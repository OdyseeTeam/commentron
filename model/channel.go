// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Channel is an object representing the database table.
type Channel struct {
	ClaimID string `boil:"claim_id" json:"claim_id" toml:"claim_id" yaml:"claim_id"`
	Name    string `boil:"name" json:"name" toml:"name" yaml:"name"`

	R *channelR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L channelL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ChannelColumns = struct {
	ClaimID string
	Name    string
}{
	ClaimID: "claim_id",
	Name:    "name",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

var ChannelWhere = struct {
	ClaimID whereHelperstring
	Name    whereHelperstring
}{
	ClaimID: whereHelperstring{field: "`channel`.`claim_id`"},
	Name:    whereHelperstring{field: "`channel`.`name`"},
}

// ChannelRels is where relationship names are stored.
var ChannelRels = struct {
	BlockedChannelBlockedEntries   string
	BlockedByChannelBlockedEntries string
	Comments                       string
	ModChannelModerators           string
	Reactions                      string
}{
	BlockedChannelBlockedEntries:   "BlockedChannelBlockedEntries",
	BlockedByChannelBlockedEntries: "BlockedByChannelBlockedEntries",
	Comments:                       "Comments",
	ModChannelModerators:           "ModChannelModerators",
	Reactions:                      "Reactions",
}

// channelR is where relationships are stored.
type channelR struct {
	BlockedChannelBlockedEntries   BlockedEntrySlice
	BlockedByChannelBlockedEntries BlockedEntrySlice
	Comments                       CommentSlice
	ModChannelModerators           ModeratorSlice
	Reactions                      ReactionSlice
}

// NewStruct creates a new relationship struct
func (*channelR) NewStruct() *channelR {
	return &channelR{}
}

// channelL is where Load methods for each relationship are stored.
type channelL struct{}

var (
	channelAllColumns            = []string{"claim_id", "name"}
	channelColumnsWithoutDefault = []string{"claim_id", "name"}
	channelColumnsWithDefault    = []string{}
	channelPrimaryKeyColumns     = []string{"claim_id"}
)

type (
	// ChannelSlice is an alias for a slice of pointers to Channel.
	// This should generally be used opposed to []Channel.
	ChannelSlice []*Channel

	channelQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	channelType                 = reflect.TypeOf(&Channel{})
	channelMapping              = queries.MakeStructMapping(channelType)
	channelPrimaryKeyMapping, _ = queries.BindMapping(channelType, channelMapping, channelPrimaryKeyColumns)
	channelInsertCacheMut       sync.RWMutex
	channelInsertCache          = make(map[string]insertCache)
	channelUpdateCacheMut       sync.RWMutex
	channelUpdateCache          = make(map[string]updateCache)
	channelUpsertCacheMut       sync.RWMutex
	channelUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// OneG returns a single channel record from the query using the global executor.
func (q channelQuery) OneG() (*Channel, error) {
	return q.One(boil.GetDB())
}

// OneGP returns a single channel record from the query using the global executor, and panics on error.
func (q channelQuery) OneGP() *Channel {
	o, err := q.One(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// OneP returns a single channel record from the query, and panics on error.
func (q channelQuery) OneP(exec boil.Executor) *Channel {
	o, err := q.One(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single channel record from the query.
func (q channelQuery) One(exec boil.Executor) (*Channel, error) {
	o := &Channel{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for channel")
	}

	return o, nil
}

// AllG returns all Channel records from the query using the global executor.
func (q channelQuery) AllG() (ChannelSlice, error) {
	return q.All(boil.GetDB())
}

// AllGP returns all Channel records from the query using the global executor, and panics on error.
func (q channelQuery) AllGP() ChannelSlice {
	o, err := q.All(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// AllP returns all Channel records from the query, and panics on error.
func (q channelQuery) AllP(exec boil.Executor) ChannelSlice {
	o, err := q.All(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all Channel records from the query.
func (q channelQuery) All(exec boil.Executor) (ChannelSlice, error) {
	var o []*Channel

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to Channel slice")
	}

	return o, nil
}

// CountG returns the count of all Channel records in the query, and panics on error.
func (q channelQuery) CountG() (int64, error) {
	return q.Count(boil.GetDB())
}

// CountGP returns the count of all Channel records in the query using the global executor, and panics on error.
func (q channelQuery) CountGP() int64 {
	c, err := q.Count(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// CountP returns the count of all Channel records in the query, and panics on error.
func (q channelQuery) CountP(exec boil.Executor) int64 {
	c, err := q.Count(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all Channel records in the query.
func (q channelQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count channel rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q channelQuery) ExistsG() (bool, error) {
	return q.Exists(boil.GetDB())
}

// ExistsGP checks if the row exists in the table using the global executor, and panics on error.
func (q channelQuery) ExistsGP() bool {
	e, err := q.Exists(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// ExistsP checks if the row exists in the table, and panics on error.
func (q channelQuery) ExistsP(exec boil.Executor) bool {
	e, err := q.Exists(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q channelQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if channel exists")
	}

	return count > 0, nil
}

// BlockedChannelBlockedEntries retrieves all the blocked_entry's BlockedEntries with an executor via blocked_channel_id column.
func (o *Channel) BlockedChannelBlockedEntries(mods ...qm.QueryMod) blockedEntryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`blocked_entry`.`blocked_channel_id`=?", o.ClaimID),
	)

	query := BlockedEntries(queryMods...)
	queries.SetFrom(query.Query, "`blocked_entry`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`blocked_entry`.*"})
	}

	return query
}

// BlockedByChannelBlockedEntries retrieves all the blocked_entry's BlockedEntries with an executor via blocked_by_channel_id column.
func (o *Channel) BlockedByChannelBlockedEntries(mods ...qm.QueryMod) blockedEntryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`blocked_entry`.`blocked_by_channel_id`=?", o.ClaimID),
	)

	query := BlockedEntries(queryMods...)
	queries.SetFrom(query.Query, "`blocked_entry`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`blocked_entry`.*"})
	}

	return query
}

// Comments retrieves all the comment's Comments with an executor.
func (o *Channel) Comments(mods ...qm.QueryMod) commentQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`comment`.`channel_id`=?", o.ClaimID),
	)

	query := Comments(queryMods...)
	queries.SetFrom(query.Query, "`comment`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`comment`.*"})
	}

	return query
}

// ModChannelModerators retrieves all the moderator's Moderators with an executor via mod_channel_id column.
func (o *Channel) ModChannelModerators(mods ...qm.QueryMod) moderatorQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`moderator`.`mod_channel_id`=?", o.ClaimID),
	)

	query := Moderators(queryMods...)
	queries.SetFrom(query.Query, "`moderator`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`moderator`.*"})
	}

	return query
}

// Reactions retrieves all the reaction's Reactions with an executor.
func (o *Channel) Reactions(mods ...qm.QueryMod) reactionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`reaction`.`channel_id`=?", o.ClaimID),
	)

	query := Reactions(queryMods...)
	queries.SetFrom(query.Query, "`reaction`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`reaction`.*"})
	}

	return query
}

// LoadBlockedChannelBlockedEntries allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (channelL) LoadBlockedChannelBlockedEntries(e boil.Executor, singular bool, maybeChannel interface{}, mods queries.Applicator) error {
	var slice []*Channel
	var object *Channel

	if singular {
		object = maybeChannel.(*Channel)
	} else {
		slice = *maybeChannel.(*[]*Channel)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &channelR{}
		}
		args = append(args, object.ClaimID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &channelR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ClaimID) {
					continue Outer
				}
			}

			args = append(args, obj.ClaimID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`blocked_entry`), qm.WhereIn(`blocked_channel_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load blocked_entry")
	}

	var resultSlice []*BlockedEntry
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice blocked_entry")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on blocked_entry")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for blocked_entry")
	}

	if singular {
		object.R.BlockedChannelBlockedEntries = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &blockedEntryR{}
			}
			foreign.R.BlockedChannel = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ClaimID, foreign.BlockedChannelID) {
				local.R.BlockedChannelBlockedEntries = append(local.R.BlockedChannelBlockedEntries, foreign)
				if foreign.R == nil {
					foreign.R = &blockedEntryR{}
				}
				foreign.R.BlockedChannel = local
				break
			}
		}
	}

	return nil
}

// LoadBlockedByChannelBlockedEntries allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (channelL) LoadBlockedByChannelBlockedEntries(e boil.Executor, singular bool, maybeChannel interface{}, mods queries.Applicator) error {
	var slice []*Channel
	var object *Channel

	if singular {
		object = maybeChannel.(*Channel)
	} else {
		slice = *maybeChannel.(*[]*Channel)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &channelR{}
		}
		args = append(args, object.ClaimID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &channelR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ClaimID) {
					continue Outer
				}
			}

			args = append(args, obj.ClaimID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`blocked_entry`), qm.WhereIn(`blocked_by_channel_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load blocked_entry")
	}

	var resultSlice []*BlockedEntry
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice blocked_entry")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on blocked_entry")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for blocked_entry")
	}

	if singular {
		object.R.BlockedByChannelBlockedEntries = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &blockedEntryR{}
			}
			foreign.R.BlockedByChannel = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ClaimID, foreign.BlockedByChannelID) {
				local.R.BlockedByChannelBlockedEntries = append(local.R.BlockedByChannelBlockedEntries, foreign)
				if foreign.R == nil {
					foreign.R = &blockedEntryR{}
				}
				foreign.R.BlockedByChannel = local
				break
			}
		}
	}

	return nil
}

// LoadComments allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (channelL) LoadComments(e boil.Executor, singular bool, maybeChannel interface{}, mods queries.Applicator) error {
	var slice []*Channel
	var object *Channel

	if singular {
		object = maybeChannel.(*Channel)
	} else {
		slice = *maybeChannel.(*[]*Channel)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &channelR{}
		}
		args = append(args, object.ClaimID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &channelR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ClaimID) {
					continue Outer
				}
			}

			args = append(args, obj.ClaimID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`comment`), qm.WhereIn(`channel_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load comment")
	}

	var resultSlice []*Comment
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice comment")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on comment")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for comment")
	}

	if singular {
		object.R.Comments = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &commentR{}
			}
			foreign.R.Channel = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ClaimID, foreign.ChannelID) {
				local.R.Comments = append(local.R.Comments, foreign)
				if foreign.R == nil {
					foreign.R = &commentR{}
				}
				foreign.R.Channel = local
				break
			}
		}
	}

	return nil
}

// LoadModChannelModerators allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (channelL) LoadModChannelModerators(e boil.Executor, singular bool, maybeChannel interface{}, mods queries.Applicator) error {
	var slice []*Channel
	var object *Channel

	if singular {
		object = maybeChannel.(*Channel)
	} else {
		slice = *maybeChannel.(*[]*Channel)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &channelR{}
		}
		args = append(args, object.ClaimID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &channelR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ClaimID) {
					continue Outer
				}
			}

			args = append(args, obj.ClaimID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`moderator`), qm.WhereIn(`mod_channel_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load moderator")
	}

	var resultSlice []*Moderator
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice moderator")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on moderator")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for moderator")
	}

	if singular {
		object.R.ModChannelModerators = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &moderatorR{}
			}
			foreign.R.ModChannel = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ClaimID, foreign.ModChannelID) {
				local.R.ModChannelModerators = append(local.R.ModChannelModerators, foreign)
				if foreign.R == nil {
					foreign.R = &moderatorR{}
				}
				foreign.R.ModChannel = local
				break
			}
		}
	}

	return nil
}

// LoadReactions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (channelL) LoadReactions(e boil.Executor, singular bool, maybeChannel interface{}, mods queries.Applicator) error {
	var slice []*Channel
	var object *Channel

	if singular {
		object = maybeChannel.(*Channel)
	} else {
		slice = *maybeChannel.(*[]*Channel)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &channelR{}
		}
		args = append(args, object.ClaimID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &channelR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ClaimID) {
					continue Outer
				}
			}

			args = append(args, obj.ClaimID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`reaction`), qm.WhereIn(`channel_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load reaction")
	}

	var resultSlice []*Reaction
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice reaction")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on reaction")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for reaction")
	}

	if singular {
		object.R.Reactions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &reactionR{}
			}
			foreign.R.Channel = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ClaimID, foreign.ChannelID) {
				local.R.Reactions = append(local.R.Reactions, foreign)
				if foreign.R == nil {
					foreign.R = &reactionR{}
				}
				foreign.R.Channel = local
				break
			}
		}
	}

	return nil
}

// AddBlockedChannelBlockedEntriesG adds the given related objects to the existing relationships
// of the channel, optionally inserting them as new records.
// Appends related to o.R.BlockedChannelBlockedEntries.
// Sets related.R.BlockedChannel appropriately.
// Uses the global database handle.
func (o *Channel) AddBlockedChannelBlockedEntriesG(insert bool, related ...*BlockedEntry) error {
	return o.AddBlockedChannelBlockedEntries(boil.GetDB(), insert, related...)
}

// AddBlockedChannelBlockedEntriesP adds the given related objects to the existing relationships
// of the channel, optionally inserting them as new records.
// Appends related to o.R.BlockedChannelBlockedEntries.
// Sets related.R.BlockedChannel appropriately.
// Panics on error.
func (o *Channel) AddBlockedChannelBlockedEntriesP(exec boil.Executor, insert bool, related ...*BlockedEntry) {
	if err := o.AddBlockedChannelBlockedEntries(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddBlockedChannelBlockedEntriesGP adds the given related objects to the existing relationships
// of the channel, optionally inserting them as new records.
// Appends related to o.R.BlockedChannelBlockedEntries.
// Sets related.R.BlockedChannel appropriately.
// Uses the global database handle and panics on error.
func (o *Channel) AddBlockedChannelBlockedEntriesGP(insert bool, related ...*BlockedEntry) {
	if err := o.AddBlockedChannelBlockedEntries(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddBlockedChannelBlockedEntries adds the given related objects to the existing relationships
// of the channel, optionally inserting them as new records.
// Appends related to o.R.BlockedChannelBlockedEntries.
// Sets related.R.BlockedChannel appropriately.
func (o *Channel) AddBlockedChannelBlockedEntries(exec boil.Executor, insert bool, related ...*BlockedEntry) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.BlockedChannelID, o.ClaimID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `blocked_entry` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"blocked_channel_id"}),
				strmangle.WhereClause("`", "`", 0, blockedEntryPrimaryKeyColumns),
			)
			values := []interface{}{o.ClaimID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.BlockedChannelID, o.ClaimID)
		}
	}

	if o.R == nil {
		o.R = &channelR{
			BlockedChannelBlockedEntries: related,
		}
	} else {
		o.R.BlockedChannelBlockedEntries = append(o.R.BlockedChannelBlockedEntries, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &blockedEntryR{
				BlockedChannel: o,
			}
		} else {
			rel.R.BlockedChannel = o
		}
	}
	return nil
}

// SetBlockedChannelBlockedEntriesG removes all previously related items of the
// channel replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.BlockedChannel's BlockedChannelBlockedEntries accordingly.
// Replaces o.R.BlockedChannelBlockedEntries with related.
// Sets related.R.BlockedChannel's BlockedChannelBlockedEntries accordingly.
// Uses the global database handle.
func (o *Channel) SetBlockedChannelBlockedEntriesG(insert bool, related ...*BlockedEntry) error {
	return o.SetBlockedChannelBlockedEntries(boil.GetDB(), insert, related...)
}

// SetBlockedChannelBlockedEntriesP removes all previously related items of the
// channel replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.BlockedChannel's BlockedChannelBlockedEntries accordingly.
// Replaces o.R.BlockedChannelBlockedEntries with related.
// Sets related.R.BlockedChannel's BlockedChannelBlockedEntries accordingly.
// Panics on error.
func (o *Channel) SetBlockedChannelBlockedEntriesP(exec boil.Executor, insert bool, related ...*BlockedEntry) {
	if err := o.SetBlockedChannelBlockedEntries(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetBlockedChannelBlockedEntriesGP removes all previously related items of the
// channel replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.BlockedChannel's BlockedChannelBlockedEntries accordingly.
// Replaces o.R.BlockedChannelBlockedEntries with related.
// Sets related.R.BlockedChannel's BlockedChannelBlockedEntries accordingly.
// Uses the global database handle and panics on error.
func (o *Channel) SetBlockedChannelBlockedEntriesGP(insert bool, related ...*BlockedEntry) {
	if err := o.SetBlockedChannelBlockedEntries(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetBlockedChannelBlockedEntries removes all previously related items of the
// channel replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.BlockedChannel's BlockedChannelBlockedEntries accordingly.
// Replaces o.R.BlockedChannelBlockedEntries with related.
// Sets related.R.BlockedChannel's BlockedChannelBlockedEntries accordingly.
func (o *Channel) SetBlockedChannelBlockedEntries(exec boil.Executor, insert bool, related ...*BlockedEntry) error {
	query := "update `blocked_entry` set `blocked_channel_id` = null where `blocked_channel_id` = ?"
	values := []interface{}{o.ClaimID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.BlockedChannelBlockedEntries {
			queries.SetScanner(&rel.BlockedChannelID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.BlockedChannel = nil
		}

		o.R.BlockedChannelBlockedEntries = nil
	}
	return o.AddBlockedChannelBlockedEntries(exec, insert, related...)
}

// RemoveBlockedChannelBlockedEntriesG relationships from objects passed in.
// Removes related items from R.BlockedChannelBlockedEntries (uses pointer comparison, removal does not keep order)
// Sets related.R.BlockedChannel.
// Uses the global database handle.
func (o *Channel) RemoveBlockedChannelBlockedEntriesG(related ...*BlockedEntry) error {
	return o.RemoveBlockedChannelBlockedEntries(boil.GetDB(), related...)
}

// RemoveBlockedChannelBlockedEntriesP relationships from objects passed in.
// Removes related items from R.BlockedChannelBlockedEntries (uses pointer comparison, removal does not keep order)
// Sets related.R.BlockedChannel.
// Panics on error.
func (o *Channel) RemoveBlockedChannelBlockedEntriesP(exec boil.Executor, related ...*BlockedEntry) {
	if err := o.RemoveBlockedChannelBlockedEntries(exec, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveBlockedChannelBlockedEntriesGP relationships from objects passed in.
// Removes related items from R.BlockedChannelBlockedEntries (uses pointer comparison, removal does not keep order)
// Sets related.R.BlockedChannel.
// Uses the global database handle and panics on error.
func (o *Channel) RemoveBlockedChannelBlockedEntriesGP(related ...*BlockedEntry) {
	if err := o.RemoveBlockedChannelBlockedEntries(boil.GetDB(), related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveBlockedChannelBlockedEntries relationships from objects passed in.
// Removes related items from R.BlockedChannelBlockedEntries (uses pointer comparison, removal does not keep order)
// Sets related.R.BlockedChannel.
func (o *Channel) RemoveBlockedChannelBlockedEntries(exec boil.Executor, related ...*BlockedEntry) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.BlockedChannelID, nil)
		if rel.R != nil {
			rel.R.BlockedChannel = nil
		}
		if err = rel.Update(exec, boil.Whitelist("blocked_channel_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.BlockedChannelBlockedEntries {
			if rel != ri {
				continue
			}

			ln := len(o.R.BlockedChannelBlockedEntries)
			if ln > 1 && i < ln-1 {
				o.R.BlockedChannelBlockedEntries[i] = o.R.BlockedChannelBlockedEntries[ln-1]
			}
			o.R.BlockedChannelBlockedEntries = o.R.BlockedChannelBlockedEntries[:ln-1]
			break
		}
	}

	return nil
}

// AddBlockedByChannelBlockedEntriesG adds the given related objects to the existing relationships
// of the channel, optionally inserting them as new records.
// Appends related to o.R.BlockedByChannelBlockedEntries.
// Sets related.R.BlockedByChannel appropriately.
// Uses the global database handle.
func (o *Channel) AddBlockedByChannelBlockedEntriesG(insert bool, related ...*BlockedEntry) error {
	return o.AddBlockedByChannelBlockedEntries(boil.GetDB(), insert, related...)
}

// AddBlockedByChannelBlockedEntriesP adds the given related objects to the existing relationships
// of the channel, optionally inserting them as new records.
// Appends related to o.R.BlockedByChannelBlockedEntries.
// Sets related.R.BlockedByChannel appropriately.
// Panics on error.
func (o *Channel) AddBlockedByChannelBlockedEntriesP(exec boil.Executor, insert bool, related ...*BlockedEntry) {
	if err := o.AddBlockedByChannelBlockedEntries(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddBlockedByChannelBlockedEntriesGP adds the given related objects to the existing relationships
// of the channel, optionally inserting them as new records.
// Appends related to o.R.BlockedByChannelBlockedEntries.
// Sets related.R.BlockedByChannel appropriately.
// Uses the global database handle and panics on error.
func (o *Channel) AddBlockedByChannelBlockedEntriesGP(insert bool, related ...*BlockedEntry) {
	if err := o.AddBlockedByChannelBlockedEntries(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddBlockedByChannelBlockedEntries adds the given related objects to the existing relationships
// of the channel, optionally inserting them as new records.
// Appends related to o.R.BlockedByChannelBlockedEntries.
// Sets related.R.BlockedByChannel appropriately.
func (o *Channel) AddBlockedByChannelBlockedEntries(exec boil.Executor, insert bool, related ...*BlockedEntry) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.BlockedByChannelID, o.ClaimID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `blocked_entry` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"blocked_by_channel_id"}),
				strmangle.WhereClause("`", "`", 0, blockedEntryPrimaryKeyColumns),
			)
			values := []interface{}{o.ClaimID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.BlockedByChannelID, o.ClaimID)
		}
	}

	if o.R == nil {
		o.R = &channelR{
			BlockedByChannelBlockedEntries: related,
		}
	} else {
		o.R.BlockedByChannelBlockedEntries = append(o.R.BlockedByChannelBlockedEntries, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &blockedEntryR{
				BlockedByChannel: o,
			}
		} else {
			rel.R.BlockedByChannel = o
		}
	}
	return nil
}

// SetBlockedByChannelBlockedEntriesG removes all previously related items of the
// channel replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.BlockedByChannel's BlockedByChannelBlockedEntries accordingly.
// Replaces o.R.BlockedByChannelBlockedEntries with related.
// Sets related.R.BlockedByChannel's BlockedByChannelBlockedEntries accordingly.
// Uses the global database handle.
func (o *Channel) SetBlockedByChannelBlockedEntriesG(insert bool, related ...*BlockedEntry) error {
	return o.SetBlockedByChannelBlockedEntries(boil.GetDB(), insert, related...)
}

// SetBlockedByChannelBlockedEntriesP removes all previously related items of the
// channel replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.BlockedByChannel's BlockedByChannelBlockedEntries accordingly.
// Replaces o.R.BlockedByChannelBlockedEntries with related.
// Sets related.R.BlockedByChannel's BlockedByChannelBlockedEntries accordingly.
// Panics on error.
func (o *Channel) SetBlockedByChannelBlockedEntriesP(exec boil.Executor, insert bool, related ...*BlockedEntry) {
	if err := o.SetBlockedByChannelBlockedEntries(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetBlockedByChannelBlockedEntriesGP removes all previously related items of the
// channel replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.BlockedByChannel's BlockedByChannelBlockedEntries accordingly.
// Replaces o.R.BlockedByChannelBlockedEntries with related.
// Sets related.R.BlockedByChannel's BlockedByChannelBlockedEntries accordingly.
// Uses the global database handle and panics on error.
func (o *Channel) SetBlockedByChannelBlockedEntriesGP(insert bool, related ...*BlockedEntry) {
	if err := o.SetBlockedByChannelBlockedEntries(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetBlockedByChannelBlockedEntries removes all previously related items of the
// channel replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.BlockedByChannel's BlockedByChannelBlockedEntries accordingly.
// Replaces o.R.BlockedByChannelBlockedEntries with related.
// Sets related.R.BlockedByChannel's BlockedByChannelBlockedEntries accordingly.
func (o *Channel) SetBlockedByChannelBlockedEntries(exec boil.Executor, insert bool, related ...*BlockedEntry) error {
	query := "update `blocked_entry` set `blocked_by_channel_id` = null where `blocked_by_channel_id` = ?"
	values := []interface{}{o.ClaimID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.BlockedByChannelBlockedEntries {
			queries.SetScanner(&rel.BlockedByChannelID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.BlockedByChannel = nil
		}

		o.R.BlockedByChannelBlockedEntries = nil
	}
	return o.AddBlockedByChannelBlockedEntries(exec, insert, related...)
}

// RemoveBlockedByChannelBlockedEntriesG relationships from objects passed in.
// Removes related items from R.BlockedByChannelBlockedEntries (uses pointer comparison, removal does not keep order)
// Sets related.R.BlockedByChannel.
// Uses the global database handle.
func (o *Channel) RemoveBlockedByChannelBlockedEntriesG(related ...*BlockedEntry) error {
	return o.RemoveBlockedByChannelBlockedEntries(boil.GetDB(), related...)
}

// RemoveBlockedByChannelBlockedEntriesP relationships from objects passed in.
// Removes related items from R.BlockedByChannelBlockedEntries (uses pointer comparison, removal does not keep order)
// Sets related.R.BlockedByChannel.
// Panics on error.
func (o *Channel) RemoveBlockedByChannelBlockedEntriesP(exec boil.Executor, related ...*BlockedEntry) {
	if err := o.RemoveBlockedByChannelBlockedEntries(exec, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveBlockedByChannelBlockedEntriesGP relationships from objects passed in.
// Removes related items from R.BlockedByChannelBlockedEntries (uses pointer comparison, removal does not keep order)
// Sets related.R.BlockedByChannel.
// Uses the global database handle and panics on error.
func (o *Channel) RemoveBlockedByChannelBlockedEntriesGP(related ...*BlockedEntry) {
	if err := o.RemoveBlockedByChannelBlockedEntries(boil.GetDB(), related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveBlockedByChannelBlockedEntries relationships from objects passed in.
// Removes related items from R.BlockedByChannelBlockedEntries (uses pointer comparison, removal does not keep order)
// Sets related.R.BlockedByChannel.
func (o *Channel) RemoveBlockedByChannelBlockedEntries(exec boil.Executor, related ...*BlockedEntry) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.BlockedByChannelID, nil)
		if rel.R != nil {
			rel.R.BlockedByChannel = nil
		}
		if err = rel.Update(exec, boil.Whitelist("blocked_by_channel_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.BlockedByChannelBlockedEntries {
			if rel != ri {
				continue
			}

			ln := len(o.R.BlockedByChannelBlockedEntries)
			if ln > 1 && i < ln-1 {
				o.R.BlockedByChannelBlockedEntries[i] = o.R.BlockedByChannelBlockedEntries[ln-1]
			}
			o.R.BlockedByChannelBlockedEntries = o.R.BlockedByChannelBlockedEntries[:ln-1]
			break
		}
	}

	return nil
}

// AddCommentsG adds the given related objects to the existing relationships
// of the channel, optionally inserting them as new records.
// Appends related to o.R.Comments.
// Sets related.R.Channel appropriately.
// Uses the global database handle.
func (o *Channel) AddCommentsG(insert bool, related ...*Comment) error {
	return o.AddComments(boil.GetDB(), insert, related...)
}

// AddCommentsP adds the given related objects to the existing relationships
// of the channel, optionally inserting them as new records.
// Appends related to o.R.Comments.
// Sets related.R.Channel appropriately.
// Panics on error.
func (o *Channel) AddCommentsP(exec boil.Executor, insert bool, related ...*Comment) {
	if err := o.AddComments(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddCommentsGP adds the given related objects to the existing relationships
// of the channel, optionally inserting them as new records.
// Appends related to o.R.Comments.
// Sets related.R.Channel appropriately.
// Uses the global database handle and panics on error.
func (o *Channel) AddCommentsGP(insert bool, related ...*Comment) {
	if err := o.AddComments(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddComments adds the given related objects to the existing relationships
// of the channel, optionally inserting them as new records.
// Appends related to o.R.Comments.
// Sets related.R.Channel appropriately.
func (o *Channel) AddComments(exec boil.Executor, insert bool, related ...*Comment) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ChannelID, o.ClaimID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `comment` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"channel_id"}),
				strmangle.WhereClause("`", "`", 0, commentPrimaryKeyColumns),
			)
			values := []interface{}{o.ClaimID, rel.CommentID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ChannelID, o.ClaimID)
		}
	}

	if o.R == nil {
		o.R = &channelR{
			Comments: related,
		}
	} else {
		o.R.Comments = append(o.R.Comments, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &commentR{
				Channel: o,
			}
		} else {
			rel.R.Channel = o
		}
	}
	return nil
}

// SetCommentsG removes all previously related items of the
// channel replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Channel's Comments accordingly.
// Replaces o.R.Comments with related.
// Sets related.R.Channel's Comments accordingly.
// Uses the global database handle.
func (o *Channel) SetCommentsG(insert bool, related ...*Comment) error {
	return o.SetComments(boil.GetDB(), insert, related...)
}

// SetCommentsP removes all previously related items of the
// channel replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Channel's Comments accordingly.
// Replaces o.R.Comments with related.
// Sets related.R.Channel's Comments accordingly.
// Panics on error.
func (o *Channel) SetCommentsP(exec boil.Executor, insert bool, related ...*Comment) {
	if err := o.SetComments(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetCommentsGP removes all previously related items of the
// channel replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Channel's Comments accordingly.
// Replaces o.R.Comments with related.
// Sets related.R.Channel's Comments accordingly.
// Uses the global database handle and panics on error.
func (o *Channel) SetCommentsGP(insert bool, related ...*Comment) {
	if err := o.SetComments(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetComments removes all previously related items of the
// channel replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Channel's Comments accordingly.
// Replaces o.R.Comments with related.
// Sets related.R.Channel's Comments accordingly.
func (o *Channel) SetComments(exec boil.Executor, insert bool, related ...*Comment) error {
	query := "update `comment` set `channel_id` = null where `channel_id` = ?"
	values := []interface{}{o.ClaimID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Comments {
			queries.SetScanner(&rel.ChannelID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Channel = nil
		}

		o.R.Comments = nil
	}
	return o.AddComments(exec, insert, related...)
}

// RemoveCommentsG relationships from objects passed in.
// Removes related items from R.Comments (uses pointer comparison, removal does not keep order)
// Sets related.R.Channel.
// Uses the global database handle.
func (o *Channel) RemoveCommentsG(related ...*Comment) error {
	return o.RemoveComments(boil.GetDB(), related...)
}

// RemoveCommentsP relationships from objects passed in.
// Removes related items from R.Comments (uses pointer comparison, removal does not keep order)
// Sets related.R.Channel.
// Panics on error.
func (o *Channel) RemoveCommentsP(exec boil.Executor, related ...*Comment) {
	if err := o.RemoveComments(exec, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveCommentsGP relationships from objects passed in.
// Removes related items from R.Comments (uses pointer comparison, removal does not keep order)
// Sets related.R.Channel.
// Uses the global database handle and panics on error.
func (o *Channel) RemoveCommentsGP(related ...*Comment) {
	if err := o.RemoveComments(boil.GetDB(), related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveComments relationships from objects passed in.
// Removes related items from R.Comments (uses pointer comparison, removal does not keep order)
// Sets related.R.Channel.
func (o *Channel) RemoveComments(exec boil.Executor, related ...*Comment) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ChannelID, nil)
		if rel.R != nil {
			rel.R.Channel = nil
		}
		if err = rel.Update(exec, boil.Whitelist("channel_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Comments {
			if rel != ri {
				continue
			}

			ln := len(o.R.Comments)
			if ln > 1 && i < ln-1 {
				o.R.Comments[i] = o.R.Comments[ln-1]
			}
			o.R.Comments = o.R.Comments[:ln-1]
			break
		}
	}

	return nil
}

// AddModChannelModeratorsG adds the given related objects to the existing relationships
// of the channel, optionally inserting them as new records.
// Appends related to o.R.ModChannelModerators.
// Sets related.R.ModChannel appropriately.
// Uses the global database handle.
func (o *Channel) AddModChannelModeratorsG(insert bool, related ...*Moderator) error {
	return o.AddModChannelModerators(boil.GetDB(), insert, related...)
}

// AddModChannelModeratorsP adds the given related objects to the existing relationships
// of the channel, optionally inserting them as new records.
// Appends related to o.R.ModChannelModerators.
// Sets related.R.ModChannel appropriately.
// Panics on error.
func (o *Channel) AddModChannelModeratorsP(exec boil.Executor, insert bool, related ...*Moderator) {
	if err := o.AddModChannelModerators(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddModChannelModeratorsGP adds the given related objects to the existing relationships
// of the channel, optionally inserting them as new records.
// Appends related to o.R.ModChannelModerators.
// Sets related.R.ModChannel appropriately.
// Uses the global database handle and panics on error.
func (o *Channel) AddModChannelModeratorsGP(insert bool, related ...*Moderator) {
	if err := o.AddModChannelModerators(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddModChannelModerators adds the given related objects to the existing relationships
// of the channel, optionally inserting them as new records.
// Appends related to o.R.ModChannelModerators.
// Sets related.R.ModChannel appropriately.
func (o *Channel) AddModChannelModerators(exec boil.Executor, insert bool, related ...*Moderator) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ModChannelID, o.ClaimID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `moderator` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"mod_channel_id"}),
				strmangle.WhereClause("`", "`", 0, moderatorPrimaryKeyColumns),
			)
			values := []interface{}{o.ClaimID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ModChannelID, o.ClaimID)
		}
	}

	if o.R == nil {
		o.R = &channelR{
			ModChannelModerators: related,
		}
	} else {
		o.R.ModChannelModerators = append(o.R.ModChannelModerators, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &moderatorR{
				ModChannel: o,
			}
		} else {
			rel.R.ModChannel = o
		}
	}
	return nil
}

// SetModChannelModeratorsG removes all previously related items of the
// channel replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ModChannel's ModChannelModerators accordingly.
// Replaces o.R.ModChannelModerators with related.
// Sets related.R.ModChannel's ModChannelModerators accordingly.
// Uses the global database handle.
func (o *Channel) SetModChannelModeratorsG(insert bool, related ...*Moderator) error {
	return o.SetModChannelModerators(boil.GetDB(), insert, related...)
}

// SetModChannelModeratorsP removes all previously related items of the
// channel replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ModChannel's ModChannelModerators accordingly.
// Replaces o.R.ModChannelModerators with related.
// Sets related.R.ModChannel's ModChannelModerators accordingly.
// Panics on error.
func (o *Channel) SetModChannelModeratorsP(exec boil.Executor, insert bool, related ...*Moderator) {
	if err := o.SetModChannelModerators(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetModChannelModeratorsGP removes all previously related items of the
// channel replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ModChannel's ModChannelModerators accordingly.
// Replaces o.R.ModChannelModerators with related.
// Sets related.R.ModChannel's ModChannelModerators accordingly.
// Uses the global database handle and panics on error.
func (o *Channel) SetModChannelModeratorsGP(insert bool, related ...*Moderator) {
	if err := o.SetModChannelModerators(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetModChannelModerators removes all previously related items of the
// channel replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ModChannel's ModChannelModerators accordingly.
// Replaces o.R.ModChannelModerators with related.
// Sets related.R.ModChannel's ModChannelModerators accordingly.
func (o *Channel) SetModChannelModerators(exec boil.Executor, insert bool, related ...*Moderator) error {
	query := "update `moderator` set `mod_channel_id` = null where `mod_channel_id` = ?"
	values := []interface{}{o.ClaimID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ModChannelModerators {
			queries.SetScanner(&rel.ModChannelID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.ModChannel = nil
		}

		o.R.ModChannelModerators = nil
	}
	return o.AddModChannelModerators(exec, insert, related...)
}

// RemoveModChannelModeratorsG relationships from objects passed in.
// Removes related items from R.ModChannelModerators (uses pointer comparison, removal does not keep order)
// Sets related.R.ModChannel.
// Uses the global database handle.
func (o *Channel) RemoveModChannelModeratorsG(related ...*Moderator) error {
	return o.RemoveModChannelModerators(boil.GetDB(), related...)
}

// RemoveModChannelModeratorsP relationships from objects passed in.
// Removes related items from R.ModChannelModerators (uses pointer comparison, removal does not keep order)
// Sets related.R.ModChannel.
// Panics on error.
func (o *Channel) RemoveModChannelModeratorsP(exec boil.Executor, related ...*Moderator) {
	if err := o.RemoveModChannelModerators(exec, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveModChannelModeratorsGP relationships from objects passed in.
// Removes related items from R.ModChannelModerators (uses pointer comparison, removal does not keep order)
// Sets related.R.ModChannel.
// Uses the global database handle and panics on error.
func (o *Channel) RemoveModChannelModeratorsGP(related ...*Moderator) {
	if err := o.RemoveModChannelModerators(boil.GetDB(), related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveModChannelModerators relationships from objects passed in.
// Removes related items from R.ModChannelModerators (uses pointer comparison, removal does not keep order)
// Sets related.R.ModChannel.
func (o *Channel) RemoveModChannelModerators(exec boil.Executor, related ...*Moderator) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ModChannelID, nil)
		if rel.R != nil {
			rel.R.ModChannel = nil
		}
		if err = rel.Update(exec, boil.Whitelist("mod_channel_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ModChannelModerators {
			if rel != ri {
				continue
			}

			ln := len(o.R.ModChannelModerators)
			if ln > 1 && i < ln-1 {
				o.R.ModChannelModerators[i] = o.R.ModChannelModerators[ln-1]
			}
			o.R.ModChannelModerators = o.R.ModChannelModerators[:ln-1]
			break
		}
	}

	return nil
}

// AddReactionsG adds the given related objects to the existing relationships
// of the channel, optionally inserting them as new records.
// Appends related to o.R.Reactions.
// Sets related.R.Channel appropriately.
// Uses the global database handle.
func (o *Channel) AddReactionsG(insert bool, related ...*Reaction) error {
	return o.AddReactions(boil.GetDB(), insert, related...)
}

// AddReactionsP adds the given related objects to the existing relationships
// of the channel, optionally inserting them as new records.
// Appends related to o.R.Reactions.
// Sets related.R.Channel appropriately.
// Panics on error.
func (o *Channel) AddReactionsP(exec boil.Executor, insert bool, related ...*Reaction) {
	if err := o.AddReactions(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddReactionsGP adds the given related objects to the existing relationships
// of the channel, optionally inserting them as new records.
// Appends related to o.R.Reactions.
// Sets related.R.Channel appropriately.
// Uses the global database handle and panics on error.
func (o *Channel) AddReactionsGP(insert bool, related ...*Reaction) {
	if err := o.AddReactions(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddReactions adds the given related objects to the existing relationships
// of the channel, optionally inserting them as new records.
// Appends related to o.R.Reactions.
// Sets related.R.Channel appropriately.
func (o *Channel) AddReactions(exec boil.Executor, insert bool, related ...*Reaction) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ChannelID, o.ClaimID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `reaction` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"channel_id"}),
				strmangle.WhereClause("`", "`", 0, reactionPrimaryKeyColumns),
			)
			values := []interface{}{o.ClaimID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ChannelID, o.ClaimID)
		}
	}

	if o.R == nil {
		o.R = &channelR{
			Reactions: related,
		}
	} else {
		o.R.Reactions = append(o.R.Reactions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &reactionR{
				Channel: o,
			}
		} else {
			rel.R.Channel = o
		}
	}
	return nil
}

// SetReactionsG removes all previously related items of the
// channel replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Channel's Reactions accordingly.
// Replaces o.R.Reactions with related.
// Sets related.R.Channel's Reactions accordingly.
// Uses the global database handle.
func (o *Channel) SetReactionsG(insert bool, related ...*Reaction) error {
	return o.SetReactions(boil.GetDB(), insert, related...)
}

// SetReactionsP removes all previously related items of the
// channel replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Channel's Reactions accordingly.
// Replaces o.R.Reactions with related.
// Sets related.R.Channel's Reactions accordingly.
// Panics on error.
func (o *Channel) SetReactionsP(exec boil.Executor, insert bool, related ...*Reaction) {
	if err := o.SetReactions(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetReactionsGP removes all previously related items of the
// channel replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Channel's Reactions accordingly.
// Replaces o.R.Reactions with related.
// Sets related.R.Channel's Reactions accordingly.
// Uses the global database handle and panics on error.
func (o *Channel) SetReactionsGP(insert bool, related ...*Reaction) {
	if err := o.SetReactions(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetReactions removes all previously related items of the
// channel replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Channel's Reactions accordingly.
// Replaces o.R.Reactions with related.
// Sets related.R.Channel's Reactions accordingly.
func (o *Channel) SetReactions(exec boil.Executor, insert bool, related ...*Reaction) error {
	query := "update `reaction` set `channel_id` = null where `channel_id` = ?"
	values := []interface{}{o.ClaimID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Reactions {
			queries.SetScanner(&rel.ChannelID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Channel = nil
		}

		o.R.Reactions = nil
	}
	return o.AddReactions(exec, insert, related...)
}

// RemoveReactionsG relationships from objects passed in.
// Removes related items from R.Reactions (uses pointer comparison, removal does not keep order)
// Sets related.R.Channel.
// Uses the global database handle.
func (o *Channel) RemoveReactionsG(related ...*Reaction) error {
	return o.RemoveReactions(boil.GetDB(), related...)
}

// RemoveReactionsP relationships from objects passed in.
// Removes related items from R.Reactions (uses pointer comparison, removal does not keep order)
// Sets related.R.Channel.
// Panics on error.
func (o *Channel) RemoveReactionsP(exec boil.Executor, related ...*Reaction) {
	if err := o.RemoveReactions(exec, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveReactionsGP relationships from objects passed in.
// Removes related items from R.Reactions (uses pointer comparison, removal does not keep order)
// Sets related.R.Channel.
// Uses the global database handle and panics on error.
func (o *Channel) RemoveReactionsGP(related ...*Reaction) {
	if err := o.RemoveReactions(boil.GetDB(), related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveReactions relationships from objects passed in.
// Removes related items from R.Reactions (uses pointer comparison, removal does not keep order)
// Sets related.R.Channel.
func (o *Channel) RemoveReactions(exec boil.Executor, related ...*Reaction) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ChannelID, nil)
		if rel.R != nil {
			rel.R.Channel = nil
		}
		if err = rel.Update(exec, boil.Whitelist("channel_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Reactions {
			if rel != ri {
				continue
			}

			ln := len(o.R.Reactions)
			if ln > 1 && i < ln-1 {
				o.R.Reactions[i] = o.R.Reactions[ln-1]
			}
			o.R.Reactions = o.R.Reactions[:ln-1]
			break
		}
	}

	return nil
}

// Channels retrieves all the records using an executor.
func Channels(mods ...qm.QueryMod) channelQuery {
	mods = append(mods, qm.From("`channel`"))
	return channelQuery{NewQuery(mods...)}
}

// FindChannelG retrieves a single record by ID.
func FindChannelG(claimID string, selectCols ...string) (*Channel, error) {
	return FindChannel(boil.GetDB(), claimID, selectCols...)
}

// FindChannelP retrieves a single record by ID with an executor, and panics on error.
func FindChannelP(exec boil.Executor, claimID string, selectCols ...string) *Channel {
	retobj, err := FindChannel(exec, claimID, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindChannelGP retrieves a single record by ID, and panics on error.
func FindChannelGP(claimID string, selectCols ...string) *Channel {
	retobj, err := FindChannel(boil.GetDB(), claimID, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindChannel retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindChannel(exec boil.Executor, claimID string, selectCols ...string) (*Channel, error) {
	channelObj := &Channel{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `channel` where `claim_id`=?", sel,
	)

	q := queries.Raw(query, claimID)

	err := q.Bind(nil, exec, channelObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from channel")
	}

	return channelObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Channel) InsertG(columns boil.Columns) error {
	return o.Insert(boil.GetDB(), columns)
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *Channel) InsertP(exec boil.Executor, columns boil.Columns) {
	if err := o.Insert(exec, columns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *Channel) InsertGP(columns boil.Columns) {
	if err := o.Insert(boil.GetDB(), columns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Channel) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no channel provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(channelColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	channelInsertCacheMut.RLock()
	cache, cached := channelInsertCache[key]
	channelInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			channelAllColumns,
			channelColumnsWithDefault,
			channelColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(channelType, channelMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(channelType, channelMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `channel` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `channel` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `channel` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, channelPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into channel")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ClaimID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for channel")
	}

CacheNoHooks:
	if !cached {
		channelInsertCacheMut.Lock()
		channelInsertCache[key] = cache
		channelInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single Channel record using the global executor.
// See Update for more documentation.
func (o *Channel) UpdateG(columns boil.Columns) error {
	return o.Update(boil.GetDB(), columns)
}

// UpdateP uses an executor to update the Channel, and panics on error.
// See Update for more documentation.
func (o *Channel) UpdateP(exec boil.Executor, columns boil.Columns) {
	err := o.Update(exec, columns)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateGP a single Channel record using the global executor. Panics on error.
// See Update for more documentation.
func (o *Channel) UpdateGP(columns boil.Columns) {
	err := o.Update(boil.GetDB(), columns)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the Channel.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Channel) Update(exec boil.Executor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	channelUpdateCacheMut.RLock()
	cache, cached := channelUpdateCache[key]
	channelUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			channelAllColumns,
			channelPrimaryKeyColumns,
		)

		if len(wl) == 0 {
			return errors.New("model: unable to update channel, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `channel` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, channelPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(channelType, channelMapping, append(wl, channelPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "model: unable to update channel row")
	}

	if !cached {
		channelUpdateCacheMut.Lock()
		channelUpdateCache[key] = cache
		channelUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q channelQuery) UpdateAllP(exec boil.Executor, cols M) {
	err := q.UpdateAll(exec, cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllG updates all rows with the specified column values.
func (q channelQuery) UpdateAllG(cols M) error {
	return q.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q channelQuery) UpdateAll(exec boil.Executor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec(exec)
	if err != nil {
		return errors.Wrap(err, "model: unable to update all for channel")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o ChannelSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o ChannelSlice) UpdateAllGP(cols M) {
	err := o.UpdateAll(boil.GetDB(), cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o ChannelSlice) UpdateAllP(exec boil.Executor, cols M) {
	err := o.UpdateAll(exec, cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ChannelSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), channelPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `channel` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, channelPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "model: unable to update all in channel slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Channel) UpsertG(updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(boil.GetDB(), updateColumns, insertColumns)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *Channel) UpsertGP(updateColumns, insertColumns boil.Columns) {
	if err := o.Upsert(boil.GetDB(), updateColumns, insertColumns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *Channel) UpsertP(exec boil.Executor, updateColumns, insertColumns boil.Columns) {
	if err := o.Upsert(exec, updateColumns, insertColumns); err != nil {
		panic(boil.WrapErr(err))
	}
}

var mySQLChannelUniqueColumns = []string{
	"claim_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Channel) Upsert(exec boil.Executor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("model: no channel provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(channelColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLChannelUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	channelUpsertCacheMut.RLock()
	cache, cached := channelUpsertCache[key]
	channelUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			channelAllColumns,
			channelColumnsWithDefault,
			channelColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			channelAllColumns,
			channelPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("model: unable to upsert channel, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "channel", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `channel` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(channelType, channelMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(channelType, channelMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to upsert for channel")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(channelType, channelMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "model: unable to retrieve unique values for channel")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRow(cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for channel")
	}

CacheNoHooks:
	if !cached {
		channelUpsertCacheMut.Lock()
		channelUpsertCache[key] = cache
		channelUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteG deletes a single Channel record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Channel) DeleteG() error {
	return o.Delete(boil.GetDB())
}

// DeleteP deletes a single Channel record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Channel) DeleteP(exec boil.Executor) {
	err := o.Delete(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteGP deletes a single Channel record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Channel) DeleteGP() {
	err := o.Delete(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single Channel record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Channel) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("model: no Channel provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), channelPrimaryKeyMapping)
	sql := "DELETE FROM `channel` WHERE `claim_id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "model: unable to delete from channel")
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q channelQuery) DeleteAllP(exec boil.Executor) {
	err := q.DeleteAll(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q channelQuery) DeleteAll(exec boil.Executor) error {
	if q.Query == nil {
		return errors.New("model: no channelQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec(exec)
	if err != nil {
		return errors.Wrap(err, "model: unable to delete all from channel")
	}

	return nil
}

// DeleteAllG deletes all rows in the slice.
func (o ChannelSlice) DeleteAllG() error {
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o ChannelSlice) DeleteAllP(exec boil.Executor) {
	err := o.DeleteAll(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o ChannelSlice) DeleteAllGP() {
	err := o.DeleteAll(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ChannelSlice) DeleteAll(exec boil.Executor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), channelPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `channel` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, channelPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "model: unable to delete all from channel slice")
	}

	return nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Channel) ReloadG() error {
	if o == nil {
		return errors.New("model: no Channel provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *Channel) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadGP refetches the object from the database and panics on error.
func (o *Channel) ReloadGP() {
	if err := o.Reload(boil.GetDB()); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Channel) Reload(exec boil.Executor) error {
	ret, err := FindChannel(exec, o.ClaimID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ChannelSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("model: empty ChannelSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *ChannelSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *ChannelSlice) ReloadAllGP() {
	if err := o.ReloadAll(boil.GetDB()); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ChannelSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ChannelSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), channelPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `channel`.* FROM `channel` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, channelPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in ChannelSlice")
	}

	*o = slice

	return nil
}

// ChannelExistsG checks if the Channel row exists.
func ChannelExistsG(claimID string) (bool, error) {
	return ChannelExists(boil.GetDB(), claimID)
}

// ChannelExistsP checks if the Channel row exists. Panics on error.
func ChannelExistsP(exec boil.Executor, claimID string) bool {
	e, err := ChannelExists(exec, claimID)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// ChannelExistsGP checks if the Channel row exists. Panics on error.
func ChannelExistsGP(claimID string) bool {
	e, err := ChannelExists(boil.GetDB(), claimID)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// ChannelExists checks if the Channel row exists.
func ChannelExists(exec boil.Executor, claimID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `channel` where `claim_id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, claimID)
	}

	row := exec.QueryRow(sql, claimID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if channel exists")
	}

	return exists, nil
}
