// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// BlockedList is an object representing the database table.
type BlockedList struct {
	ID                  uint64      `boil:"id" json:"id" toml:"id" yaml:"id"`
	ChannelID           string      `boil:"channel_id" json:"channel_id" toml:"channel_id" yaml:"channel_id"`
	Name                string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	Category            string      `boil:"category" json:"category" toml:"category" yaml:"category"`
	Description         string      `boil:"description" json:"description" toml:"description" yaml:"description"`
	MemberInviteEnabled null.Bool   `boil:"member_invite_enabled" json:"member_invite_enabled,omitempty" toml:"member_invite_enabled" yaml:"member_invite_enabled,omitempty"`
	StrikeOne           null.Uint64 `boil:"strike_one" json:"strike_one,omitempty" toml:"strike_one" yaml:"strike_one,omitempty"`
	StrikeTwo           null.Uint64 `boil:"strike_two" json:"strike_two,omitempty" toml:"strike_two" yaml:"strike_two,omitempty"`
	StrikeThree         null.Uint64 `boil:"strike_three" json:"strike_three,omitempty" toml:"strike_three" yaml:"strike_three,omitempty"`
	InviteExpiration    null.Uint64 `boil:"invite_expiration" json:"invite_expiration,omitempty" toml:"invite_expiration" yaml:"invite_expiration,omitempty"`
	CurseJarAmount      null.Uint64 `boil:"curse_jar_amount" json:"curse_jar_amount,omitempty" toml:"curse_jar_amount" yaml:"curse_jar_amount,omitempty"`
	CreatedAt           time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt           time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *blockedListR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L blockedListL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BlockedListColumns = struct {
	ID                  string
	ChannelID           string
	Name                string
	Category            string
	Description         string
	MemberInviteEnabled string
	StrikeOne           string
	StrikeTwo           string
	StrikeThree         string
	InviteExpiration    string
	CurseJarAmount      string
	CreatedAt           string
	UpdatedAt           string
}{
	ID:                  "id",
	ChannelID:           "channel_id",
	Name:                "name",
	Category:            "category",
	Description:         "description",
	MemberInviteEnabled: "member_invite_enabled",
	StrikeOne:           "strike_one",
	StrikeTwo:           "strike_two",
	StrikeThree:         "strike_three",
	InviteExpiration:    "invite_expiration",
	CurseJarAmount:      "curse_jar_amount",
	CreatedAt:           "created_at",
	UpdatedAt:           "updated_at",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

var BlockedListWhere = struct {
	ID                  whereHelperuint64
	ChannelID           whereHelperstring
	Name                whereHelperstring
	Category            whereHelperstring
	Description         whereHelperstring
	MemberInviteEnabled whereHelpernull_Bool
	StrikeOne           whereHelpernull_Uint64
	StrikeTwo           whereHelpernull_Uint64
	StrikeThree         whereHelpernull_Uint64
	InviteExpiration    whereHelpernull_Uint64
	CurseJarAmount      whereHelpernull_Uint64
	CreatedAt           whereHelpertime_Time
	UpdatedAt           whereHelpertime_Time
}{
	ID:                  whereHelperuint64{field: "`blocked_list`.`id`"},
	ChannelID:           whereHelperstring{field: "`blocked_list`.`channel_id`"},
	Name:                whereHelperstring{field: "`blocked_list`.`name`"},
	Category:            whereHelperstring{field: "`blocked_list`.`category`"},
	Description:         whereHelperstring{field: "`blocked_list`.`description`"},
	MemberInviteEnabled: whereHelpernull_Bool{field: "`blocked_list`.`member_invite_enabled`"},
	StrikeOne:           whereHelpernull_Uint64{field: "`blocked_list`.`strike_one`"},
	StrikeTwo:           whereHelpernull_Uint64{field: "`blocked_list`.`strike_two`"},
	StrikeThree:         whereHelpernull_Uint64{field: "`blocked_list`.`strike_three`"},
	InviteExpiration:    whereHelpernull_Uint64{field: "`blocked_list`.`invite_expiration`"},
	CurseJarAmount:      whereHelpernull_Uint64{field: "`blocked_list`.`curse_jar_amount`"},
	CreatedAt:           whereHelpertime_Time{field: "`blocked_list`.`created_at`"},
	UpdatedAt:           whereHelpertime_Time{field: "`blocked_list`.`updated_at`"},
}

// BlockedListRels is where relationship names are stored.
var BlockedListRels = struct {
	Channel                   string
	BlockedEntries            string
	BlockedListAppeals        string
	BlockedListInvites        string
	BlockedListInviteChannels string
	Channels                  string
}{
	Channel:                   "Channel",
	BlockedEntries:            "BlockedEntries",
	BlockedListAppeals:        "BlockedListAppeals",
	BlockedListInvites:        "BlockedListInvites",
	BlockedListInviteChannels: "BlockedListInviteChannels",
	Channels:                  "Channels",
}

// blockedListR is where relationships are stored.
type blockedListR struct {
	Channel                   *Channel
	BlockedEntries            BlockedEntrySlice
	BlockedListAppeals        BlockedListAppealSlice
	BlockedListInvites        BlockedListInviteSlice
	BlockedListInviteChannels ChannelSlice
	Channels                  ChannelSlice
}

// NewStruct creates a new relationship struct
func (*blockedListR) NewStruct() *blockedListR {
	return &blockedListR{}
}

// blockedListL is where Load methods for each relationship are stored.
type blockedListL struct{}

var (
	blockedListAllColumns            = []string{"id", "channel_id", "name", "category", "description", "member_invite_enabled", "strike_one", "strike_two", "strike_three", "invite_expiration", "curse_jar_amount", "created_at", "updated_at"}
	blockedListColumnsWithoutDefault = []string{"channel_id", "name", "category", "description", "strike_one", "strike_two", "strike_three", "invite_expiration", "curse_jar_amount"}
	blockedListColumnsWithDefault    = []string{"id", "member_invite_enabled", "created_at", "updated_at"}
	blockedListPrimaryKeyColumns     = []string{"id"}
)

type (
	// BlockedListSlice is an alias for a slice of pointers to BlockedList.
	// This should generally be used opposed to []BlockedList.
	BlockedListSlice []*BlockedList

	blockedListQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	blockedListType                 = reflect.TypeOf(&BlockedList{})
	blockedListMapping              = queries.MakeStructMapping(blockedListType)
	blockedListPrimaryKeyMapping, _ = queries.BindMapping(blockedListType, blockedListMapping, blockedListPrimaryKeyColumns)
	blockedListInsertCacheMut       sync.RWMutex
	blockedListInsertCache          = make(map[string]insertCache)
	blockedListUpdateCacheMut       sync.RWMutex
	blockedListUpdateCache          = make(map[string]updateCache)
	blockedListUpsertCacheMut       sync.RWMutex
	blockedListUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// OneG returns a single blockedList record from the query using the global executor.
func (q blockedListQuery) OneG() (*BlockedList, error) {
	return q.One(boil.GetDB())
}

// OneGP returns a single blockedList record from the query using the global executor, and panics on error.
func (q blockedListQuery) OneGP() *BlockedList {
	o, err := q.One(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// OneP returns a single blockedList record from the query, and panics on error.
func (q blockedListQuery) OneP(exec boil.Executor) *BlockedList {
	o, err := q.One(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single blockedList record from the query.
func (q blockedListQuery) One(exec boil.Executor) (*BlockedList, error) {
	o := &BlockedList{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for blocked_list")
	}

	return o, nil
}

// AllG returns all BlockedList records from the query using the global executor.
func (q blockedListQuery) AllG() (BlockedListSlice, error) {
	return q.All(boil.GetDB())
}

// AllGP returns all BlockedList records from the query using the global executor, and panics on error.
func (q blockedListQuery) AllGP() BlockedListSlice {
	o, err := q.All(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// AllP returns all BlockedList records from the query, and panics on error.
func (q blockedListQuery) AllP(exec boil.Executor) BlockedListSlice {
	o, err := q.All(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all BlockedList records from the query.
func (q blockedListQuery) All(exec boil.Executor) (BlockedListSlice, error) {
	var o []*BlockedList

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to BlockedList slice")
	}

	return o, nil
}

// CountG returns the count of all BlockedList records in the query, and panics on error.
func (q blockedListQuery) CountG() (int64, error) {
	return q.Count(boil.GetDB())
}

// CountGP returns the count of all BlockedList records in the query using the global executor, and panics on error.
func (q blockedListQuery) CountGP() int64 {
	c, err := q.Count(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// CountP returns the count of all BlockedList records in the query, and panics on error.
func (q blockedListQuery) CountP(exec boil.Executor) int64 {
	c, err := q.Count(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all BlockedList records in the query.
func (q blockedListQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count blocked_list rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q blockedListQuery) ExistsG() (bool, error) {
	return q.Exists(boil.GetDB())
}

// ExistsGP checks if the row exists in the table using the global executor, and panics on error.
func (q blockedListQuery) ExistsGP() bool {
	e, err := q.Exists(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// ExistsP checks if the row exists in the table, and panics on error.
func (q blockedListQuery) ExistsP(exec boil.Executor) bool {
	e, err := q.Exists(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q blockedListQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if blocked_list exists")
	}

	return count > 0, nil
}

// Channel pointed to by the foreign key.
func (o *BlockedList) Channel(mods ...qm.QueryMod) channelQuery {
	queryMods := []qm.QueryMod{
		qm.Where("claim_id=?", o.ChannelID),
	}

	queryMods = append(queryMods, mods...)

	query := Channels(queryMods...)
	queries.SetFrom(query.Query, "`channel`")

	return query
}

// BlockedEntries retrieves all the blocked_entry's BlockedEntries with an executor.
func (o *BlockedList) BlockedEntries(mods ...qm.QueryMod) blockedEntryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`blocked_entry`.`blocked_list_id`=?", o.ID),
	)

	query := BlockedEntries(queryMods...)
	queries.SetFrom(query.Query, "`blocked_entry`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`blocked_entry`.*"})
	}

	return query
}

// BlockedListAppeals retrieves all the blocked_list_appeal's BlockedListAppeals with an executor.
func (o *BlockedList) BlockedListAppeals(mods ...qm.QueryMod) blockedListAppealQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`blocked_list_appeal`.`blocked_list_id`=?", o.ID),
	)

	query := BlockedListAppeals(queryMods...)
	queries.SetFrom(query.Query, "`blocked_list_appeal`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`blocked_list_appeal`.*"})
	}

	return query
}

// BlockedListInvites retrieves all the blocked_list_invite's BlockedListInvites with an executor.
func (o *BlockedList) BlockedListInvites(mods ...qm.QueryMod) blockedListInviteQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`blocked_list_invite`.`blocked_list_id`=?", o.ID),
	)

	query := BlockedListInvites(queryMods...)
	queries.SetFrom(query.Query, "`blocked_list_invite`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`blocked_list_invite`.*"})
	}

	return query
}

// BlockedListInviteChannels retrieves all the channel's Channels with an executor via blocked_list_invite_id column.
func (o *BlockedList) BlockedListInviteChannels(mods ...qm.QueryMod) channelQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`channel`.`blocked_list_invite_id`=?", o.ID),
	)

	query := Channels(queryMods...)
	queries.SetFrom(query.Query, "`channel`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`channel`.*"})
	}

	return query
}

// Channels retrieves all the channel's Channels with an executor.
func (o *BlockedList) Channels(mods ...qm.QueryMod) channelQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`channel`.`blocked_list_id`=?", o.ID),
	)

	query := Channels(queryMods...)
	queries.SetFrom(query.Query, "`channel`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`channel`.*"})
	}

	return query
}

// LoadChannel allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (blockedListL) LoadChannel(e boil.Executor, singular bool, maybeBlockedList interface{}, mods queries.Applicator) error {
	var slice []*BlockedList
	var object *BlockedList

	if singular {
		object = maybeBlockedList.(*BlockedList)
	} else {
		slice = *maybeBlockedList.(*[]*BlockedList)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &blockedListR{}
		}
		args = append(args, object.ChannelID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &blockedListR{}
			}

			for _, a := range args {
				if a == obj.ChannelID {
					continue Outer
				}
			}

			args = append(args, obj.ChannelID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`channel`), qm.WhereIn(`claim_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Channel")
	}

	var resultSlice []*Channel
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Channel")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for channel")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for channel")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Channel = foreign
		if foreign.R == nil {
			foreign.R = &channelR{}
		}
		foreign.R.BlockedLists = append(foreign.R.BlockedLists, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ChannelID == foreign.ClaimID {
				local.R.Channel = foreign
				if foreign.R == nil {
					foreign.R = &channelR{}
				}
				foreign.R.BlockedLists = append(foreign.R.BlockedLists, local)
				break
			}
		}
	}

	return nil
}

// LoadBlockedEntries allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (blockedListL) LoadBlockedEntries(e boil.Executor, singular bool, maybeBlockedList interface{}, mods queries.Applicator) error {
	var slice []*BlockedList
	var object *BlockedList

	if singular {
		object = maybeBlockedList.(*BlockedList)
	} else {
		slice = *maybeBlockedList.(*[]*BlockedList)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &blockedListR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &blockedListR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`blocked_entry`), qm.WhereIn(`blocked_list_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load blocked_entry")
	}

	var resultSlice []*BlockedEntry
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice blocked_entry")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on blocked_entry")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for blocked_entry")
	}

	if singular {
		object.R.BlockedEntries = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &blockedEntryR{}
			}
			foreign.R.BlockedList = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.BlockedListID) {
				local.R.BlockedEntries = append(local.R.BlockedEntries, foreign)
				if foreign.R == nil {
					foreign.R = &blockedEntryR{}
				}
				foreign.R.BlockedList = local
				break
			}
		}
	}

	return nil
}

// LoadBlockedListAppeals allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (blockedListL) LoadBlockedListAppeals(e boil.Executor, singular bool, maybeBlockedList interface{}, mods queries.Applicator) error {
	var slice []*BlockedList
	var object *BlockedList

	if singular {
		object = maybeBlockedList.(*BlockedList)
	} else {
		slice = *maybeBlockedList.(*[]*BlockedList)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &blockedListR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &blockedListR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`blocked_list_appeal`), qm.WhereIn(`blocked_list_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load blocked_list_appeal")
	}

	var resultSlice []*BlockedListAppeal
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice blocked_list_appeal")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on blocked_list_appeal")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for blocked_list_appeal")
	}

	if singular {
		object.R.BlockedListAppeals = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &blockedListAppealR{}
			}
			foreign.R.BlockedList = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.BlockedListID {
				local.R.BlockedListAppeals = append(local.R.BlockedListAppeals, foreign)
				if foreign.R == nil {
					foreign.R = &blockedListAppealR{}
				}
				foreign.R.BlockedList = local
				break
			}
		}
	}

	return nil
}

// LoadBlockedListInvites allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (blockedListL) LoadBlockedListInvites(e boil.Executor, singular bool, maybeBlockedList interface{}, mods queries.Applicator) error {
	var slice []*BlockedList
	var object *BlockedList

	if singular {
		object = maybeBlockedList.(*BlockedList)
	} else {
		slice = *maybeBlockedList.(*[]*BlockedList)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &blockedListR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &blockedListR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`blocked_list_invite`), qm.WhereIn(`blocked_list_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load blocked_list_invite")
	}

	var resultSlice []*BlockedListInvite
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice blocked_list_invite")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on blocked_list_invite")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for blocked_list_invite")
	}

	if singular {
		object.R.BlockedListInvites = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &blockedListInviteR{}
			}
			foreign.R.BlockedList = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.BlockedListID {
				local.R.BlockedListInvites = append(local.R.BlockedListInvites, foreign)
				if foreign.R == nil {
					foreign.R = &blockedListInviteR{}
				}
				foreign.R.BlockedList = local
				break
			}
		}
	}

	return nil
}

// LoadBlockedListInviteChannels allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (blockedListL) LoadBlockedListInviteChannels(e boil.Executor, singular bool, maybeBlockedList interface{}, mods queries.Applicator) error {
	var slice []*BlockedList
	var object *BlockedList

	if singular {
		object = maybeBlockedList.(*BlockedList)
	} else {
		slice = *maybeBlockedList.(*[]*BlockedList)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &blockedListR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &blockedListR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`channel`), qm.WhereIn(`blocked_list_invite_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load channel")
	}

	var resultSlice []*Channel
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice channel")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on channel")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for channel")
	}

	if singular {
		object.R.BlockedListInviteChannels = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &channelR{}
			}
			foreign.R.BlockedListInvite = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.BlockedListInviteID) {
				local.R.BlockedListInviteChannels = append(local.R.BlockedListInviteChannels, foreign)
				if foreign.R == nil {
					foreign.R = &channelR{}
				}
				foreign.R.BlockedListInvite = local
				break
			}
		}
	}

	return nil
}

// LoadChannels allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (blockedListL) LoadChannels(e boil.Executor, singular bool, maybeBlockedList interface{}, mods queries.Applicator) error {
	var slice []*BlockedList
	var object *BlockedList

	if singular {
		object = maybeBlockedList.(*BlockedList)
	} else {
		slice = *maybeBlockedList.(*[]*BlockedList)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &blockedListR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &blockedListR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`channel`), qm.WhereIn(`blocked_list_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load channel")
	}

	var resultSlice []*Channel
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice channel")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on channel")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for channel")
	}

	if singular {
		object.R.Channels = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &channelR{}
			}
			foreign.R.BlockedList = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.BlockedListID) {
				local.R.Channels = append(local.R.Channels, foreign)
				if foreign.R == nil {
					foreign.R = &channelR{}
				}
				foreign.R.BlockedList = local
				break
			}
		}
	}

	return nil
}

// SetChannelG of the blockedList to the related item.
// Sets o.R.Channel to related.
// Adds o to related.R.BlockedLists.
// Uses the global database handle.
func (o *BlockedList) SetChannelG(insert bool, related *Channel) error {
	return o.SetChannel(boil.GetDB(), insert, related)
}

// SetChannelP of the blockedList to the related item.
// Sets o.R.Channel to related.
// Adds o to related.R.BlockedLists.
// Panics on error.
func (o *BlockedList) SetChannelP(exec boil.Executor, insert bool, related *Channel) {
	if err := o.SetChannel(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetChannelGP of the blockedList to the related item.
// Sets o.R.Channel to related.
// Adds o to related.R.BlockedLists.
// Uses the global database handle and panics on error.
func (o *BlockedList) SetChannelGP(insert bool, related *Channel) {
	if err := o.SetChannel(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetChannel of the blockedList to the related item.
// Sets o.R.Channel to related.
// Adds o to related.R.BlockedLists.
func (o *BlockedList) SetChannel(exec boil.Executor, insert bool, related *Channel) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `blocked_list` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"channel_id"}),
		strmangle.WhereClause("`", "`", 0, blockedListPrimaryKeyColumns),
	)
	values := []interface{}{related.ClaimID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ChannelID = related.ClaimID
	if o.R == nil {
		o.R = &blockedListR{
			Channel: related,
		}
	} else {
		o.R.Channel = related
	}

	if related.R == nil {
		related.R = &channelR{
			BlockedLists: BlockedListSlice{o},
		}
	} else {
		related.R.BlockedLists = append(related.R.BlockedLists, o)
	}

	return nil
}

// AddBlockedEntriesG adds the given related objects to the existing relationships
// of the blocked_list, optionally inserting them as new records.
// Appends related to o.R.BlockedEntries.
// Sets related.R.BlockedList appropriately.
// Uses the global database handle.
func (o *BlockedList) AddBlockedEntriesG(insert bool, related ...*BlockedEntry) error {
	return o.AddBlockedEntries(boil.GetDB(), insert, related...)
}

// AddBlockedEntriesP adds the given related objects to the existing relationships
// of the blocked_list, optionally inserting them as new records.
// Appends related to o.R.BlockedEntries.
// Sets related.R.BlockedList appropriately.
// Panics on error.
func (o *BlockedList) AddBlockedEntriesP(exec boil.Executor, insert bool, related ...*BlockedEntry) {
	if err := o.AddBlockedEntries(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddBlockedEntriesGP adds the given related objects to the existing relationships
// of the blocked_list, optionally inserting them as new records.
// Appends related to o.R.BlockedEntries.
// Sets related.R.BlockedList appropriately.
// Uses the global database handle and panics on error.
func (o *BlockedList) AddBlockedEntriesGP(insert bool, related ...*BlockedEntry) {
	if err := o.AddBlockedEntries(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddBlockedEntries adds the given related objects to the existing relationships
// of the blocked_list, optionally inserting them as new records.
// Appends related to o.R.BlockedEntries.
// Sets related.R.BlockedList appropriately.
func (o *BlockedList) AddBlockedEntries(exec boil.Executor, insert bool, related ...*BlockedEntry) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.BlockedListID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `blocked_entry` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"blocked_list_id"}),
				strmangle.WhereClause("`", "`", 0, blockedEntryPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.BlockedListID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &blockedListR{
			BlockedEntries: related,
		}
	} else {
		o.R.BlockedEntries = append(o.R.BlockedEntries, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &blockedEntryR{
				BlockedList: o,
			}
		} else {
			rel.R.BlockedList = o
		}
	}
	return nil
}

// SetBlockedEntriesG removes all previously related items of the
// blocked_list replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.BlockedList's BlockedEntries accordingly.
// Replaces o.R.BlockedEntries with related.
// Sets related.R.BlockedList's BlockedEntries accordingly.
// Uses the global database handle.
func (o *BlockedList) SetBlockedEntriesG(insert bool, related ...*BlockedEntry) error {
	return o.SetBlockedEntries(boil.GetDB(), insert, related...)
}

// SetBlockedEntriesP removes all previously related items of the
// blocked_list replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.BlockedList's BlockedEntries accordingly.
// Replaces o.R.BlockedEntries with related.
// Sets related.R.BlockedList's BlockedEntries accordingly.
// Panics on error.
func (o *BlockedList) SetBlockedEntriesP(exec boil.Executor, insert bool, related ...*BlockedEntry) {
	if err := o.SetBlockedEntries(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetBlockedEntriesGP removes all previously related items of the
// blocked_list replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.BlockedList's BlockedEntries accordingly.
// Replaces o.R.BlockedEntries with related.
// Sets related.R.BlockedList's BlockedEntries accordingly.
// Uses the global database handle and panics on error.
func (o *BlockedList) SetBlockedEntriesGP(insert bool, related ...*BlockedEntry) {
	if err := o.SetBlockedEntries(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetBlockedEntries removes all previously related items of the
// blocked_list replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.BlockedList's BlockedEntries accordingly.
// Replaces o.R.BlockedEntries with related.
// Sets related.R.BlockedList's BlockedEntries accordingly.
func (o *BlockedList) SetBlockedEntries(exec boil.Executor, insert bool, related ...*BlockedEntry) error {
	query := "update `blocked_entry` set `blocked_list_id` = null where `blocked_list_id` = ?"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.BlockedEntries {
			queries.SetScanner(&rel.BlockedListID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.BlockedList = nil
		}

		o.R.BlockedEntries = nil
	}
	return o.AddBlockedEntries(exec, insert, related...)
}

// RemoveBlockedEntriesG relationships from objects passed in.
// Removes related items from R.BlockedEntries (uses pointer comparison, removal does not keep order)
// Sets related.R.BlockedList.
// Uses the global database handle.
func (o *BlockedList) RemoveBlockedEntriesG(related ...*BlockedEntry) error {
	return o.RemoveBlockedEntries(boil.GetDB(), related...)
}

// RemoveBlockedEntriesP relationships from objects passed in.
// Removes related items from R.BlockedEntries (uses pointer comparison, removal does not keep order)
// Sets related.R.BlockedList.
// Panics on error.
func (o *BlockedList) RemoveBlockedEntriesP(exec boil.Executor, related ...*BlockedEntry) {
	if err := o.RemoveBlockedEntries(exec, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveBlockedEntriesGP relationships from objects passed in.
// Removes related items from R.BlockedEntries (uses pointer comparison, removal does not keep order)
// Sets related.R.BlockedList.
// Uses the global database handle and panics on error.
func (o *BlockedList) RemoveBlockedEntriesGP(related ...*BlockedEntry) {
	if err := o.RemoveBlockedEntries(boil.GetDB(), related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveBlockedEntries relationships from objects passed in.
// Removes related items from R.BlockedEntries (uses pointer comparison, removal does not keep order)
// Sets related.R.BlockedList.
func (o *BlockedList) RemoveBlockedEntries(exec boil.Executor, related ...*BlockedEntry) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.BlockedListID, nil)
		if rel.R != nil {
			rel.R.BlockedList = nil
		}
		if err = rel.Update(exec, boil.Whitelist("blocked_list_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.BlockedEntries {
			if rel != ri {
				continue
			}

			ln := len(o.R.BlockedEntries)
			if ln > 1 && i < ln-1 {
				o.R.BlockedEntries[i] = o.R.BlockedEntries[ln-1]
			}
			o.R.BlockedEntries = o.R.BlockedEntries[:ln-1]
			break
		}
	}

	return nil
}

// AddBlockedListAppealsG adds the given related objects to the existing relationships
// of the blocked_list, optionally inserting them as new records.
// Appends related to o.R.BlockedListAppeals.
// Sets related.R.BlockedList appropriately.
// Uses the global database handle.
func (o *BlockedList) AddBlockedListAppealsG(insert bool, related ...*BlockedListAppeal) error {
	return o.AddBlockedListAppeals(boil.GetDB(), insert, related...)
}

// AddBlockedListAppealsP adds the given related objects to the existing relationships
// of the blocked_list, optionally inserting them as new records.
// Appends related to o.R.BlockedListAppeals.
// Sets related.R.BlockedList appropriately.
// Panics on error.
func (o *BlockedList) AddBlockedListAppealsP(exec boil.Executor, insert bool, related ...*BlockedListAppeal) {
	if err := o.AddBlockedListAppeals(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddBlockedListAppealsGP adds the given related objects to the existing relationships
// of the blocked_list, optionally inserting them as new records.
// Appends related to o.R.BlockedListAppeals.
// Sets related.R.BlockedList appropriately.
// Uses the global database handle and panics on error.
func (o *BlockedList) AddBlockedListAppealsGP(insert bool, related ...*BlockedListAppeal) {
	if err := o.AddBlockedListAppeals(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddBlockedListAppeals adds the given related objects to the existing relationships
// of the blocked_list, optionally inserting them as new records.
// Appends related to o.R.BlockedListAppeals.
// Sets related.R.BlockedList appropriately.
func (o *BlockedList) AddBlockedListAppeals(exec boil.Executor, insert bool, related ...*BlockedListAppeal) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BlockedListID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `blocked_list_appeal` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"blocked_list_id"}),
				strmangle.WhereClause("`", "`", 0, blockedListAppealPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BlockedListID = o.ID
		}
	}

	if o.R == nil {
		o.R = &blockedListR{
			BlockedListAppeals: related,
		}
	} else {
		o.R.BlockedListAppeals = append(o.R.BlockedListAppeals, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &blockedListAppealR{
				BlockedList: o,
			}
		} else {
			rel.R.BlockedList = o
		}
	}
	return nil
}

// AddBlockedListInvitesG adds the given related objects to the existing relationships
// of the blocked_list, optionally inserting them as new records.
// Appends related to o.R.BlockedListInvites.
// Sets related.R.BlockedList appropriately.
// Uses the global database handle.
func (o *BlockedList) AddBlockedListInvitesG(insert bool, related ...*BlockedListInvite) error {
	return o.AddBlockedListInvites(boil.GetDB(), insert, related...)
}

// AddBlockedListInvitesP adds the given related objects to the existing relationships
// of the blocked_list, optionally inserting them as new records.
// Appends related to o.R.BlockedListInvites.
// Sets related.R.BlockedList appropriately.
// Panics on error.
func (o *BlockedList) AddBlockedListInvitesP(exec boil.Executor, insert bool, related ...*BlockedListInvite) {
	if err := o.AddBlockedListInvites(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddBlockedListInvitesGP adds the given related objects to the existing relationships
// of the blocked_list, optionally inserting them as new records.
// Appends related to o.R.BlockedListInvites.
// Sets related.R.BlockedList appropriately.
// Uses the global database handle and panics on error.
func (o *BlockedList) AddBlockedListInvitesGP(insert bool, related ...*BlockedListInvite) {
	if err := o.AddBlockedListInvites(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddBlockedListInvites adds the given related objects to the existing relationships
// of the blocked_list, optionally inserting them as new records.
// Appends related to o.R.BlockedListInvites.
// Sets related.R.BlockedList appropriately.
func (o *BlockedList) AddBlockedListInvites(exec boil.Executor, insert bool, related ...*BlockedListInvite) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BlockedListID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `blocked_list_invite` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"blocked_list_id"}),
				strmangle.WhereClause("`", "`", 0, blockedListInvitePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BlockedListID = o.ID
		}
	}

	if o.R == nil {
		o.R = &blockedListR{
			BlockedListInvites: related,
		}
	} else {
		o.R.BlockedListInvites = append(o.R.BlockedListInvites, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &blockedListInviteR{
				BlockedList: o,
			}
		} else {
			rel.R.BlockedList = o
		}
	}
	return nil
}

// AddBlockedListInviteChannelsG adds the given related objects to the existing relationships
// of the blocked_list, optionally inserting them as new records.
// Appends related to o.R.BlockedListInviteChannels.
// Sets related.R.BlockedListInvite appropriately.
// Uses the global database handle.
func (o *BlockedList) AddBlockedListInviteChannelsG(insert bool, related ...*Channel) error {
	return o.AddBlockedListInviteChannels(boil.GetDB(), insert, related...)
}

// AddBlockedListInviteChannelsP adds the given related objects to the existing relationships
// of the blocked_list, optionally inserting them as new records.
// Appends related to o.R.BlockedListInviteChannels.
// Sets related.R.BlockedListInvite appropriately.
// Panics on error.
func (o *BlockedList) AddBlockedListInviteChannelsP(exec boil.Executor, insert bool, related ...*Channel) {
	if err := o.AddBlockedListInviteChannels(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddBlockedListInviteChannelsGP adds the given related objects to the existing relationships
// of the blocked_list, optionally inserting them as new records.
// Appends related to o.R.BlockedListInviteChannels.
// Sets related.R.BlockedListInvite appropriately.
// Uses the global database handle and panics on error.
func (o *BlockedList) AddBlockedListInviteChannelsGP(insert bool, related ...*Channel) {
	if err := o.AddBlockedListInviteChannels(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddBlockedListInviteChannels adds the given related objects to the existing relationships
// of the blocked_list, optionally inserting them as new records.
// Appends related to o.R.BlockedListInviteChannels.
// Sets related.R.BlockedListInvite appropriately.
func (o *BlockedList) AddBlockedListInviteChannels(exec boil.Executor, insert bool, related ...*Channel) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.BlockedListInviteID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `channel` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"blocked_list_invite_id"}),
				strmangle.WhereClause("`", "`", 0, channelPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ClaimID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.BlockedListInviteID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &blockedListR{
			BlockedListInviteChannels: related,
		}
	} else {
		o.R.BlockedListInviteChannels = append(o.R.BlockedListInviteChannels, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &channelR{
				BlockedListInvite: o,
			}
		} else {
			rel.R.BlockedListInvite = o
		}
	}
	return nil
}

// SetBlockedListInviteChannelsG removes all previously related items of the
// blocked_list replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.BlockedListInvite's BlockedListInviteChannels accordingly.
// Replaces o.R.BlockedListInviteChannels with related.
// Sets related.R.BlockedListInvite's BlockedListInviteChannels accordingly.
// Uses the global database handle.
func (o *BlockedList) SetBlockedListInviteChannelsG(insert bool, related ...*Channel) error {
	return o.SetBlockedListInviteChannels(boil.GetDB(), insert, related...)
}

// SetBlockedListInviteChannelsP removes all previously related items of the
// blocked_list replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.BlockedListInvite's BlockedListInviteChannels accordingly.
// Replaces o.R.BlockedListInviteChannels with related.
// Sets related.R.BlockedListInvite's BlockedListInviteChannels accordingly.
// Panics on error.
func (o *BlockedList) SetBlockedListInviteChannelsP(exec boil.Executor, insert bool, related ...*Channel) {
	if err := o.SetBlockedListInviteChannels(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetBlockedListInviteChannelsGP removes all previously related items of the
// blocked_list replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.BlockedListInvite's BlockedListInviteChannels accordingly.
// Replaces o.R.BlockedListInviteChannels with related.
// Sets related.R.BlockedListInvite's BlockedListInviteChannels accordingly.
// Uses the global database handle and panics on error.
func (o *BlockedList) SetBlockedListInviteChannelsGP(insert bool, related ...*Channel) {
	if err := o.SetBlockedListInviteChannels(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetBlockedListInviteChannels removes all previously related items of the
// blocked_list replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.BlockedListInvite's BlockedListInviteChannels accordingly.
// Replaces o.R.BlockedListInviteChannels with related.
// Sets related.R.BlockedListInvite's BlockedListInviteChannels accordingly.
func (o *BlockedList) SetBlockedListInviteChannels(exec boil.Executor, insert bool, related ...*Channel) error {
	query := "update `channel` set `blocked_list_invite_id` = null where `blocked_list_invite_id` = ?"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.BlockedListInviteChannels {
			queries.SetScanner(&rel.BlockedListInviteID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.BlockedListInvite = nil
		}

		o.R.BlockedListInviteChannels = nil
	}
	return o.AddBlockedListInviteChannels(exec, insert, related...)
}

// RemoveBlockedListInviteChannelsG relationships from objects passed in.
// Removes related items from R.BlockedListInviteChannels (uses pointer comparison, removal does not keep order)
// Sets related.R.BlockedListInvite.
// Uses the global database handle.
func (o *BlockedList) RemoveBlockedListInviteChannelsG(related ...*Channel) error {
	return o.RemoveBlockedListInviteChannels(boil.GetDB(), related...)
}

// RemoveBlockedListInviteChannelsP relationships from objects passed in.
// Removes related items from R.BlockedListInviteChannels (uses pointer comparison, removal does not keep order)
// Sets related.R.BlockedListInvite.
// Panics on error.
func (o *BlockedList) RemoveBlockedListInviteChannelsP(exec boil.Executor, related ...*Channel) {
	if err := o.RemoveBlockedListInviteChannels(exec, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveBlockedListInviteChannelsGP relationships from objects passed in.
// Removes related items from R.BlockedListInviteChannels (uses pointer comparison, removal does not keep order)
// Sets related.R.BlockedListInvite.
// Uses the global database handle and panics on error.
func (o *BlockedList) RemoveBlockedListInviteChannelsGP(related ...*Channel) {
	if err := o.RemoveBlockedListInviteChannels(boil.GetDB(), related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveBlockedListInviteChannels relationships from objects passed in.
// Removes related items from R.BlockedListInviteChannels (uses pointer comparison, removal does not keep order)
// Sets related.R.BlockedListInvite.
func (o *BlockedList) RemoveBlockedListInviteChannels(exec boil.Executor, related ...*Channel) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.BlockedListInviteID, nil)
		if rel.R != nil {
			rel.R.BlockedListInvite = nil
		}
		if err = rel.Update(exec, boil.Whitelist("blocked_list_invite_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.BlockedListInviteChannels {
			if rel != ri {
				continue
			}

			ln := len(o.R.BlockedListInviteChannels)
			if ln > 1 && i < ln-1 {
				o.R.BlockedListInviteChannels[i] = o.R.BlockedListInviteChannels[ln-1]
			}
			o.R.BlockedListInviteChannels = o.R.BlockedListInviteChannels[:ln-1]
			break
		}
	}

	return nil
}

// AddChannelsG adds the given related objects to the existing relationships
// of the blocked_list, optionally inserting them as new records.
// Appends related to o.R.Channels.
// Sets related.R.BlockedList appropriately.
// Uses the global database handle.
func (o *BlockedList) AddChannelsG(insert bool, related ...*Channel) error {
	return o.AddChannels(boil.GetDB(), insert, related...)
}

// AddChannelsP adds the given related objects to the existing relationships
// of the blocked_list, optionally inserting them as new records.
// Appends related to o.R.Channels.
// Sets related.R.BlockedList appropriately.
// Panics on error.
func (o *BlockedList) AddChannelsP(exec boil.Executor, insert bool, related ...*Channel) {
	if err := o.AddChannels(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddChannelsGP adds the given related objects to the existing relationships
// of the blocked_list, optionally inserting them as new records.
// Appends related to o.R.Channels.
// Sets related.R.BlockedList appropriately.
// Uses the global database handle and panics on error.
func (o *BlockedList) AddChannelsGP(insert bool, related ...*Channel) {
	if err := o.AddChannels(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddChannels adds the given related objects to the existing relationships
// of the blocked_list, optionally inserting them as new records.
// Appends related to o.R.Channels.
// Sets related.R.BlockedList appropriately.
func (o *BlockedList) AddChannels(exec boil.Executor, insert bool, related ...*Channel) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.BlockedListID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `channel` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"blocked_list_id"}),
				strmangle.WhereClause("`", "`", 0, channelPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ClaimID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.BlockedListID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &blockedListR{
			Channels: related,
		}
	} else {
		o.R.Channels = append(o.R.Channels, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &channelR{
				BlockedList: o,
			}
		} else {
			rel.R.BlockedList = o
		}
	}
	return nil
}

// SetChannelsG removes all previously related items of the
// blocked_list replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.BlockedList's Channels accordingly.
// Replaces o.R.Channels with related.
// Sets related.R.BlockedList's Channels accordingly.
// Uses the global database handle.
func (o *BlockedList) SetChannelsG(insert bool, related ...*Channel) error {
	return o.SetChannels(boil.GetDB(), insert, related...)
}

// SetChannelsP removes all previously related items of the
// blocked_list replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.BlockedList's Channels accordingly.
// Replaces o.R.Channels with related.
// Sets related.R.BlockedList's Channels accordingly.
// Panics on error.
func (o *BlockedList) SetChannelsP(exec boil.Executor, insert bool, related ...*Channel) {
	if err := o.SetChannels(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetChannelsGP removes all previously related items of the
// blocked_list replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.BlockedList's Channels accordingly.
// Replaces o.R.Channels with related.
// Sets related.R.BlockedList's Channels accordingly.
// Uses the global database handle and panics on error.
func (o *BlockedList) SetChannelsGP(insert bool, related ...*Channel) {
	if err := o.SetChannels(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetChannels removes all previously related items of the
// blocked_list replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.BlockedList's Channels accordingly.
// Replaces o.R.Channels with related.
// Sets related.R.BlockedList's Channels accordingly.
func (o *BlockedList) SetChannels(exec boil.Executor, insert bool, related ...*Channel) error {
	query := "update `channel` set `blocked_list_id` = null where `blocked_list_id` = ?"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Channels {
			queries.SetScanner(&rel.BlockedListID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.BlockedList = nil
		}

		o.R.Channels = nil
	}
	return o.AddChannels(exec, insert, related...)
}

// RemoveChannelsG relationships from objects passed in.
// Removes related items from R.Channels (uses pointer comparison, removal does not keep order)
// Sets related.R.BlockedList.
// Uses the global database handle.
func (o *BlockedList) RemoveChannelsG(related ...*Channel) error {
	return o.RemoveChannels(boil.GetDB(), related...)
}

// RemoveChannelsP relationships from objects passed in.
// Removes related items from R.Channels (uses pointer comparison, removal does not keep order)
// Sets related.R.BlockedList.
// Panics on error.
func (o *BlockedList) RemoveChannelsP(exec boil.Executor, related ...*Channel) {
	if err := o.RemoveChannels(exec, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveChannelsGP relationships from objects passed in.
// Removes related items from R.Channels (uses pointer comparison, removal does not keep order)
// Sets related.R.BlockedList.
// Uses the global database handle and panics on error.
func (o *BlockedList) RemoveChannelsGP(related ...*Channel) {
	if err := o.RemoveChannels(boil.GetDB(), related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveChannels relationships from objects passed in.
// Removes related items from R.Channels (uses pointer comparison, removal does not keep order)
// Sets related.R.BlockedList.
func (o *BlockedList) RemoveChannels(exec boil.Executor, related ...*Channel) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.BlockedListID, nil)
		if rel.R != nil {
			rel.R.BlockedList = nil
		}
		if err = rel.Update(exec, boil.Whitelist("blocked_list_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Channels {
			if rel != ri {
				continue
			}

			ln := len(o.R.Channels)
			if ln > 1 && i < ln-1 {
				o.R.Channels[i] = o.R.Channels[ln-1]
			}
			o.R.Channels = o.R.Channels[:ln-1]
			break
		}
	}

	return nil
}

// BlockedLists retrieves all the records using an executor.
func BlockedLists(mods ...qm.QueryMod) blockedListQuery {
	mods = append(mods, qm.From("`blocked_list`"))
	return blockedListQuery{NewQuery(mods...)}
}

// FindBlockedListG retrieves a single record by ID.
func FindBlockedListG(iD uint64, selectCols ...string) (*BlockedList, error) {
	return FindBlockedList(boil.GetDB(), iD, selectCols...)
}

// FindBlockedListP retrieves a single record by ID with an executor, and panics on error.
func FindBlockedListP(exec boil.Executor, iD uint64, selectCols ...string) *BlockedList {
	retobj, err := FindBlockedList(exec, iD, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindBlockedListGP retrieves a single record by ID, and panics on error.
func FindBlockedListGP(iD uint64, selectCols ...string) *BlockedList {
	retobj, err := FindBlockedList(boil.GetDB(), iD, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindBlockedList retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBlockedList(exec boil.Executor, iD uint64, selectCols ...string) (*BlockedList, error) {
	blockedListObj := &BlockedList{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `blocked_list` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, blockedListObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from blocked_list")
	}

	return blockedListObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *BlockedList) InsertG(columns boil.Columns) error {
	return o.Insert(boil.GetDB(), columns)
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *BlockedList) InsertP(exec boil.Executor, columns boil.Columns) {
	if err := o.Insert(exec, columns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *BlockedList) InsertGP(columns boil.Columns) {
	if err := o.Insert(boil.GetDB(), columns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BlockedList) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no blocked_list provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(blockedListColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	blockedListInsertCacheMut.RLock()
	cache, cached := blockedListInsertCache[key]
	blockedListInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			blockedListAllColumns,
			blockedListColumnsWithDefault,
			blockedListColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(blockedListType, blockedListMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(blockedListType, blockedListMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `blocked_list` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `blocked_list` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `blocked_list` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, blockedListPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into blocked_list")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == blockedListMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for blocked_list")
	}

CacheNoHooks:
	if !cached {
		blockedListInsertCacheMut.Lock()
		blockedListInsertCache[key] = cache
		blockedListInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single BlockedList record using the global executor.
// See Update for more documentation.
func (o *BlockedList) UpdateG(columns boil.Columns) error {
	return o.Update(boil.GetDB(), columns)
}

// UpdateP uses an executor to update the BlockedList, and panics on error.
// See Update for more documentation.
func (o *BlockedList) UpdateP(exec boil.Executor, columns boil.Columns) {
	err := o.Update(exec, columns)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateGP a single BlockedList record using the global executor. Panics on error.
// See Update for more documentation.
func (o *BlockedList) UpdateGP(columns boil.Columns) {
	err := o.Update(boil.GetDB(), columns)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the BlockedList.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BlockedList) Update(exec boil.Executor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	blockedListUpdateCacheMut.RLock()
	cache, cached := blockedListUpdateCache[key]
	blockedListUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			blockedListAllColumns,
			blockedListPrimaryKeyColumns,
		)

		if len(wl) == 0 {
			return errors.New("model: unable to update blocked_list, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `blocked_list` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, blockedListPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(blockedListType, blockedListMapping, append(wl, blockedListPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "model: unable to update blocked_list row")
	}

	if !cached {
		blockedListUpdateCacheMut.Lock()
		blockedListUpdateCache[key] = cache
		blockedListUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q blockedListQuery) UpdateAllP(exec boil.Executor, cols M) {
	err := q.UpdateAll(exec, cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllG updates all rows with the specified column values.
func (q blockedListQuery) UpdateAllG(cols M) error {
	return q.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q blockedListQuery) UpdateAll(exec boil.Executor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec(exec)
	if err != nil {
		return errors.Wrap(err, "model: unable to update all for blocked_list")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o BlockedListSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o BlockedListSlice) UpdateAllGP(cols M) {
	err := o.UpdateAll(boil.GetDB(), cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o BlockedListSlice) UpdateAllP(exec boil.Executor, cols M) {
	err := o.UpdateAll(exec, cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BlockedListSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), blockedListPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `blocked_list` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, blockedListPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "model: unable to update all in blockedList slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *BlockedList) UpsertG(updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(boil.GetDB(), updateColumns, insertColumns)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *BlockedList) UpsertGP(updateColumns, insertColumns boil.Columns) {
	if err := o.Upsert(boil.GetDB(), updateColumns, insertColumns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *BlockedList) UpsertP(exec boil.Executor, updateColumns, insertColumns boil.Columns) {
	if err := o.Upsert(exec, updateColumns, insertColumns); err != nil {
		panic(boil.WrapErr(err))
	}
}

var mySQLBlockedListUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *BlockedList) Upsert(exec boil.Executor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("model: no blocked_list provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(blockedListColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLBlockedListUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	blockedListUpsertCacheMut.RLock()
	cache, cached := blockedListUpsertCache[key]
	blockedListUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			blockedListAllColumns,
			blockedListColumnsWithDefault,
			blockedListColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			blockedListAllColumns,
			blockedListPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("model: unable to upsert blocked_list, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "blocked_list", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `blocked_list` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(blockedListType, blockedListMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(blockedListType, blockedListMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to upsert for blocked_list")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == blockedListMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(blockedListType, blockedListMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "model: unable to retrieve unique values for blocked_list")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRow(cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for blocked_list")
	}

CacheNoHooks:
	if !cached {
		blockedListUpsertCacheMut.Lock()
		blockedListUpsertCache[key] = cache
		blockedListUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteG deletes a single BlockedList record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *BlockedList) DeleteG() error {
	return o.Delete(boil.GetDB())
}

// DeleteP deletes a single BlockedList record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *BlockedList) DeleteP(exec boil.Executor) {
	err := o.Delete(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteGP deletes a single BlockedList record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *BlockedList) DeleteGP() {
	err := o.Delete(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single BlockedList record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BlockedList) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("model: no BlockedList provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), blockedListPrimaryKeyMapping)
	sql := "DELETE FROM `blocked_list` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "model: unable to delete from blocked_list")
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q blockedListQuery) DeleteAllP(exec boil.Executor) {
	err := q.DeleteAll(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q blockedListQuery) DeleteAll(exec boil.Executor) error {
	if q.Query == nil {
		return errors.New("model: no blockedListQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec(exec)
	if err != nil {
		return errors.Wrap(err, "model: unable to delete all from blocked_list")
	}

	return nil
}

// DeleteAllG deletes all rows in the slice.
func (o BlockedListSlice) DeleteAllG() error {
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o BlockedListSlice) DeleteAllP(exec boil.Executor) {
	err := o.DeleteAll(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o BlockedListSlice) DeleteAllGP() {
	err := o.DeleteAll(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BlockedListSlice) DeleteAll(exec boil.Executor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), blockedListPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `blocked_list` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, blockedListPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "model: unable to delete all from blockedList slice")
	}

	return nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *BlockedList) ReloadG() error {
	if o == nil {
		return errors.New("model: no BlockedList provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *BlockedList) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadGP refetches the object from the database and panics on error.
func (o *BlockedList) ReloadGP() {
	if err := o.Reload(boil.GetDB()); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BlockedList) Reload(exec boil.Executor) error {
	ret, err := FindBlockedList(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BlockedListSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("model: empty BlockedListSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *BlockedListSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *BlockedListSlice) ReloadAllGP() {
	if err := o.ReloadAll(boil.GetDB()); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BlockedListSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BlockedListSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), blockedListPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `blocked_list`.* FROM `blocked_list` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, blockedListPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in BlockedListSlice")
	}

	*o = slice

	return nil
}

// BlockedListExistsG checks if the BlockedList row exists.
func BlockedListExistsG(iD uint64) (bool, error) {
	return BlockedListExists(boil.GetDB(), iD)
}

// BlockedListExistsP checks if the BlockedList row exists. Panics on error.
func BlockedListExistsP(exec boil.Executor, iD uint64) bool {
	e, err := BlockedListExists(exec, iD)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// BlockedListExistsGP checks if the BlockedList row exists. Panics on error.
func BlockedListExistsGP(iD uint64) bool {
	e, err := BlockedListExists(boil.GetDB(), iD)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// BlockedListExists checks if the BlockedList row exists.
func BlockedListExists(exec boil.Executor, iD uint64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `blocked_list` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if blocked_list exists")
	}

	return exists, nil
}
