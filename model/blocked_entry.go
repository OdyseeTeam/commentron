// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// BlockedEntry is an object representing the database table.
type BlockedEntry struct {
	ID                 uint64      `boil:"id" json:"id" toml:"id" yaml:"id"`
	BlockedChannelID   null.String `boil:"blocked_channel_id" json:"blocked_channel_id,omitempty" toml:"blocked_channel_id" yaml:"blocked_channel_id,omitempty"`
	BlockedByChannelID null.String `boil:"blocked_by_channel_id" json:"blocked_by_channel_id,omitempty" toml:"blocked_by_channel_id" yaml:"blocked_by_channel_id,omitempty"`
	UniversallyBlocked null.Bool   `boil:"universally_blocked" json:"universally_blocked,omitempty" toml:"universally_blocked" yaml:"universally_blocked,omitempty"`
	CreatedAt          time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt          time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *blockedEntryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L blockedEntryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BlockedEntryColumns = struct {
	ID                 string
	BlockedChannelID   string
	BlockedByChannelID string
	UniversallyBlocked string
	CreatedAt          string
	UpdatedAt          string
}{
	ID:                 "id",
	BlockedChannelID:   "blocked_channel_id",
	BlockedByChannelID: "blocked_by_channel_id",
	UniversallyBlocked: "universally_blocked",
	CreatedAt:          "created_at",
	UpdatedAt:          "updated_at",
}

// Generated where

type whereHelperuint64 struct{ field string }

func (w whereHelperuint64) EQ(x uint64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperuint64) NEQ(x uint64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperuint64) LT(x uint64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperuint64) LTE(x uint64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperuint64) GT(x uint64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperuint64) GTE(x uint64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_Bool struct{ field string }

func (w whereHelpernull_Bool) EQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Bool) NEQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Bool) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Bool) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Bool) LT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Bool) LTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Bool) GT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Bool) GTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var BlockedEntryWhere = struct {
	ID                 whereHelperuint64
	BlockedChannelID   whereHelpernull_String
	BlockedByChannelID whereHelpernull_String
	UniversallyBlocked whereHelpernull_Bool
	CreatedAt          whereHelpertime_Time
	UpdatedAt          whereHelpertime_Time
}{
	ID:                 whereHelperuint64{field: "`blocked_entry`.`id`"},
	BlockedChannelID:   whereHelpernull_String{field: "`blocked_entry`.`blocked_channel_id`"},
	BlockedByChannelID: whereHelpernull_String{field: "`blocked_entry`.`blocked_by_channel_id`"},
	UniversallyBlocked: whereHelpernull_Bool{field: "`blocked_entry`.`universally_blocked`"},
	CreatedAt:          whereHelpertime_Time{field: "`blocked_entry`.`created_at`"},
	UpdatedAt:          whereHelpertime_Time{field: "`blocked_entry`.`updated_at`"},
}

// BlockedEntryRels is where relationship names are stored.
var BlockedEntryRels = struct {
	BlockedChannel   string
	BlockedByChannel string
}{
	BlockedChannel:   "BlockedChannel",
	BlockedByChannel: "BlockedByChannel",
}

// blockedEntryR is where relationships are stored.
type blockedEntryR struct {
	BlockedChannel   *Channel
	BlockedByChannel *Channel
}

// NewStruct creates a new relationship struct
func (*blockedEntryR) NewStruct() *blockedEntryR {
	return &blockedEntryR{}
}

// blockedEntryL is where Load methods for each relationship are stored.
type blockedEntryL struct{}

var (
	blockedEntryAllColumns            = []string{"id", "blocked_channel_id", "blocked_by_channel_id", "universally_blocked", "created_at", "updated_at"}
	blockedEntryColumnsWithoutDefault = []string{"blocked_channel_id", "blocked_by_channel_id"}
	blockedEntryColumnsWithDefault    = []string{"id", "universally_blocked", "created_at", "updated_at"}
	blockedEntryPrimaryKeyColumns     = []string{"id"}
)

type (
	// BlockedEntrySlice is an alias for a slice of pointers to BlockedEntry.
	// This should generally be used opposed to []BlockedEntry.
	BlockedEntrySlice []*BlockedEntry

	blockedEntryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	blockedEntryType                 = reflect.TypeOf(&BlockedEntry{})
	blockedEntryMapping              = queries.MakeStructMapping(blockedEntryType)
	blockedEntryPrimaryKeyMapping, _ = queries.BindMapping(blockedEntryType, blockedEntryMapping, blockedEntryPrimaryKeyColumns)
	blockedEntryInsertCacheMut       sync.RWMutex
	blockedEntryInsertCache          = make(map[string]insertCache)
	blockedEntryUpdateCacheMut       sync.RWMutex
	blockedEntryUpdateCache          = make(map[string]updateCache)
	blockedEntryUpsertCacheMut       sync.RWMutex
	blockedEntryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// OneG returns a single blockedEntry record from the query using the global executor.
func (q blockedEntryQuery) OneG() (*BlockedEntry, error) {
	return q.One(boil.GetDB())
}

// OneGP returns a single blockedEntry record from the query using the global executor, and panics on error.
func (q blockedEntryQuery) OneGP() *BlockedEntry {
	o, err := q.One(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// OneP returns a single blockedEntry record from the query, and panics on error.
func (q blockedEntryQuery) OneP(exec boil.Executor) *BlockedEntry {
	o, err := q.One(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single blockedEntry record from the query.
func (q blockedEntryQuery) One(exec boil.Executor) (*BlockedEntry, error) {
	o := &BlockedEntry{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for blocked_entry")
	}

	return o, nil
}

// AllG returns all BlockedEntry records from the query using the global executor.
func (q blockedEntryQuery) AllG() (BlockedEntrySlice, error) {
	return q.All(boil.GetDB())
}

// AllGP returns all BlockedEntry records from the query using the global executor, and panics on error.
func (q blockedEntryQuery) AllGP() BlockedEntrySlice {
	o, err := q.All(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// AllP returns all BlockedEntry records from the query, and panics on error.
func (q blockedEntryQuery) AllP(exec boil.Executor) BlockedEntrySlice {
	o, err := q.All(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all BlockedEntry records from the query.
func (q blockedEntryQuery) All(exec boil.Executor) (BlockedEntrySlice, error) {
	var o []*BlockedEntry

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to BlockedEntry slice")
	}

	return o, nil
}

// CountG returns the count of all BlockedEntry records in the query, and panics on error.
func (q blockedEntryQuery) CountG() (int64, error) {
	return q.Count(boil.GetDB())
}

// CountGP returns the count of all BlockedEntry records in the query using the global executor, and panics on error.
func (q blockedEntryQuery) CountGP() int64 {
	c, err := q.Count(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// CountP returns the count of all BlockedEntry records in the query, and panics on error.
func (q blockedEntryQuery) CountP(exec boil.Executor) int64 {
	c, err := q.Count(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all BlockedEntry records in the query.
func (q blockedEntryQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count blocked_entry rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q blockedEntryQuery) ExistsG() (bool, error) {
	return q.Exists(boil.GetDB())
}

// ExistsGP checks if the row exists in the table using the global executor, and panics on error.
func (q blockedEntryQuery) ExistsGP() bool {
	e, err := q.Exists(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// ExistsP checks if the row exists in the table, and panics on error.
func (q blockedEntryQuery) ExistsP(exec boil.Executor) bool {
	e, err := q.Exists(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q blockedEntryQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if blocked_entry exists")
	}

	return count > 0, nil
}

// BlockedChannel pointed to by the foreign key.
func (o *BlockedEntry) BlockedChannel(mods ...qm.QueryMod) channelQuery {
	queryMods := []qm.QueryMod{
		qm.Where("claim_id=?", o.BlockedChannelID),
	}

	queryMods = append(queryMods, mods...)

	query := Channels(queryMods...)
	queries.SetFrom(query.Query, "`channel`")

	return query
}

// BlockedByChannel pointed to by the foreign key.
func (o *BlockedEntry) BlockedByChannel(mods ...qm.QueryMod) channelQuery {
	queryMods := []qm.QueryMod{
		qm.Where("claim_id=?", o.BlockedByChannelID),
	}

	queryMods = append(queryMods, mods...)

	query := Channels(queryMods...)
	queries.SetFrom(query.Query, "`channel`")

	return query
}

// LoadBlockedChannel allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (blockedEntryL) LoadBlockedChannel(e boil.Executor, singular bool, maybeBlockedEntry interface{}, mods queries.Applicator) error {
	var slice []*BlockedEntry
	var object *BlockedEntry

	if singular {
		object = maybeBlockedEntry.(*BlockedEntry)
	} else {
		slice = *maybeBlockedEntry.(*[]*BlockedEntry)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &blockedEntryR{}
		}
		if !queries.IsNil(object.BlockedChannelID) {
			args = append(args, object.BlockedChannelID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &blockedEntryR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.BlockedChannelID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.BlockedChannelID) {
				args = append(args, obj.BlockedChannelID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`channel`), qm.WhereIn(`claim_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Channel")
	}

	var resultSlice []*Channel
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Channel")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for channel")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for channel")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BlockedChannel = foreign
		if foreign.R == nil {
			foreign.R = &channelR{}
		}
		foreign.R.BlockedChannelBlockedEntries = append(foreign.R.BlockedChannelBlockedEntries, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.BlockedChannelID, foreign.ClaimID) {
				local.R.BlockedChannel = foreign
				if foreign.R == nil {
					foreign.R = &channelR{}
				}
				foreign.R.BlockedChannelBlockedEntries = append(foreign.R.BlockedChannelBlockedEntries, local)
				break
			}
		}
	}

	return nil
}

// LoadBlockedByChannel allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (blockedEntryL) LoadBlockedByChannel(e boil.Executor, singular bool, maybeBlockedEntry interface{}, mods queries.Applicator) error {
	var slice []*BlockedEntry
	var object *BlockedEntry

	if singular {
		object = maybeBlockedEntry.(*BlockedEntry)
	} else {
		slice = *maybeBlockedEntry.(*[]*BlockedEntry)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &blockedEntryR{}
		}
		if !queries.IsNil(object.BlockedByChannelID) {
			args = append(args, object.BlockedByChannelID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &blockedEntryR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.BlockedByChannelID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.BlockedByChannelID) {
				args = append(args, obj.BlockedByChannelID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`channel`), qm.WhereIn(`claim_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Channel")
	}

	var resultSlice []*Channel
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Channel")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for channel")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for channel")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BlockedByChannel = foreign
		if foreign.R == nil {
			foreign.R = &channelR{}
		}
		foreign.R.BlockedByChannelBlockedEntries = append(foreign.R.BlockedByChannelBlockedEntries, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.BlockedByChannelID, foreign.ClaimID) {
				local.R.BlockedByChannel = foreign
				if foreign.R == nil {
					foreign.R = &channelR{}
				}
				foreign.R.BlockedByChannelBlockedEntries = append(foreign.R.BlockedByChannelBlockedEntries, local)
				break
			}
		}
	}

	return nil
}

// SetBlockedChannelG of the blockedEntry to the related item.
// Sets o.R.BlockedChannel to related.
// Adds o to related.R.BlockedChannelBlockedEntries.
// Uses the global database handle.
func (o *BlockedEntry) SetBlockedChannelG(insert bool, related *Channel) error {
	return o.SetBlockedChannel(boil.GetDB(), insert, related)
}

// SetBlockedChannelP of the blockedEntry to the related item.
// Sets o.R.BlockedChannel to related.
// Adds o to related.R.BlockedChannelBlockedEntries.
// Panics on error.
func (o *BlockedEntry) SetBlockedChannelP(exec boil.Executor, insert bool, related *Channel) {
	if err := o.SetBlockedChannel(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetBlockedChannelGP of the blockedEntry to the related item.
// Sets o.R.BlockedChannel to related.
// Adds o to related.R.BlockedChannelBlockedEntries.
// Uses the global database handle and panics on error.
func (o *BlockedEntry) SetBlockedChannelGP(insert bool, related *Channel) {
	if err := o.SetBlockedChannel(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetBlockedChannel of the blockedEntry to the related item.
// Sets o.R.BlockedChannel to related.
// Adds o to related.R.BlockedChannelBlockedEntries.
func (o *BlockedEntry) SetBlockedChannel(exec boil.Executor, insert bool, related *Channel) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `blocked_entry` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"blocked_channel_id"}),
		strmangle.WhereClause("`", "`", 0, blockedEntryPrimaryKeyColumns),
	)
	values := []interface{}{related.ClaimID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.BlockedChannelID, related.ClaimID)
	if o.R == nil {
		o.R = &blockedEntryR{
			BlockedChannel: related,
		}
	} else {
		o.R.BlockedChannel = related
	}

	if related.R == nil {
		related.R = &channelR{
			BlockedChannelBlockedEntries: BlockedEntrySlice{o},
		}
	} else {
		related.R.BlockedChannelBlockedEntries = append(related.R.BlockedChannelBlockedEntries, o)
	}

	return nil
}

// RemoveBlockedChannelG relationship.
// Sets o.R.BlockedChannel to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle.
func (o *BlockedEntry) RemoveBlockedChannelG(related *Channel) error {
	return o.RemoveBlockedChannel(boil.GetDB(), related)
}

// RemoveBlockedChannelP relationship.
// Sets o.R.BlockedChannel to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Panics on error.
func (o *BlockedEntry) RemoveBlockedChannelP(exec boil.Executor, related *Channel) {
	if err := o.RemoveBlockedChannel(exec, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveBlockedChannelGP relationship.
// Sets o.R.BlockedChannel to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle and panics on error.
func (o *BlockedEntry) RemoveBlockedChannelGP(related *Channel) {
	if err := o.RemoveBlockedChannel(boil.GetDB(), related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveBlockedChannel relationship.
// Sets o.R.BlockedChannel to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *BlockedEntry) RemoveBlockedChannel(exec boil.Executor, related *Channel) error {
	var err error

	queries.SetScanner(&o.BlockedChannelID, nil)
	if err = o.Update(exec, boil.Whitelist("blocked_channel_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.BlockedChannel = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.BlockedChannelBlockedEntries {
		if queries.Equal(o.BlockedChannelID, ri.BlockedChannelID) {
			continue
		}

		ln := len(related.R.BlockedChannelBlockedEntries)
		if ln > 1 && i < ln-1 {
			related.R.BlockedChannelBlockedEntries[i] = related.R.BlockedChannelBlockedEntries[ln-1]
		}
		related.R.BlockedChannelBlockedEntries = related.R.BlockedChannelBlockedEntries[:ln-1]
		break
	}
	return nil
}

// SetBlockedByChannelG of the blockedEntry to the related item.
// Sets o.R.BlockedByChannel to related.
// Adds o to related.R.BlockedByChannelBlockedEntries.
// Uses the global database handle.
func (o *BlockedEntry) SetBlockedByChannelG(insert bool, related *Channel) error {
	return o.SetBlockedByChannel(boil.GetDB(), insert, related)
}

// SetBlockedByChannelP of the blockedEntry to the related item.
// Sets o.R.BlockedByChannel to related.
// Adds o to related.R.BlockedByChannelBlockedEntries.
// Panics on error.
func (o *BlockedEntry) SetBlockedByChannelP(exec boil.Executor, insert bool, related *Channel) {
	if err := o.SetBlockedByChannel(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetBlockedByChannelGP of the blockedEntry to the related item.
// Sets o.R.BlockedByChannel to related.
// Adds o to related.R.BlockedByChannelBlockedEntries.
// Uses the global database handle and panics on error.
func (o *BlockedEntry) SetBlockedByChannelGP(insert bool, related *Channel) {
	if err := o.SetBlockedByChannel(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetBlockedByChannel of the blockedEntry to the related item.
// Sets o.R.BlockedByChannel to related.
// Adds o to related.R.BlockedByChannelBlockedEntries.
func (o *BlockedEntry) SetBlockedByChannel(exec boil.Executor, insert bool, related *Channel) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `blocked_entry` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"blocked_by_channel_id"}),
		strmangle.WhereClause("`", "`", 0, blockedEntryPrimaryKeyColumns),
	)
	values := []interface{}{related.ClaimID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.BlockedByChannelID, related.ClaimID)
	if o.R == nil {
		o.R = &blockedEntryR{
			BlockedByChannel: related,
		}
	} else {
		o.R.BlockedByChannel = related
	}

	if related.R == nil {
		related.R = &channelR{
			BlockedByChannelBlockedEntries: BlockedEntrySlice{o},
		}
	} else {
		related.R.BlockedByChannelBlockedEntries = append(related.R.BlockedByChannelBlockedEntries, o)
	}

	return nil
}

// RemoveBlockedByChannelG relationship.
// Sets o.R.BlockedByChannel to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle.
func (o *BlockedEntry) RemoveBlockedByChannelG(related *Channel) error {
	return o.RemoveBlockedByChannel(boil.GetDB(), related)
}

// RemoveBlockedByChannelP relationship.
// Sets o.R.BlockedByChannel to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Panics on error.
func (o *BlockedEntry) RemoveBlockedByChannelP(exec boil.Executor, related *Channel) {
	if err := o.RemoveBlockedByChannel(exec, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveBlockedByChannelGP relationship.
// Sets o.R.BlockedByChannel to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle and panics on error.
func (o *BlockedEntry) RemoveBlockedByChannelGP(related *Channel) {
	if err := o.RemoveBlockedByChannel(boil.GetDB(), related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveBlockedByChannel relationship.
// Sets o.R.BlockedByChannel to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *BlockedEntry) RemoveBlockedByChannel(exec boil.Executor, related *Channel) error {
	var err error

	queries.SetScanner(&o.BlockedByChannelID, nil)
	if err = o.Update(exec, boil.Whitelist("blocked_by_channel_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.BlockedByChannel = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.BlockedByChannelBlockedEntries {
		if queries.Equal(o.BlockedByChannelID, ri.BlockedByChannelID) {
			continue
		}

		ln := len(related.R.BlockedByChannelBlockedEntries)
		if ln > 1 && i < ln-1 {
			related.R.BlockedByChannelBlockedEntries[i] = related.R.BlockedByChannelBlockedEntries[ln-1]
		}
		related.R.BlockedByChannelBlockedEntries = related.R.BlockedByChannelBlockedEntries[:ln-1]
		break
	}
	return nil
}

// BlockedEntries retrieves all the records using an executor.
func BlockedEntries(mods ...qm.QueryMod) blockedEntryQuery {
	mods = append(mods, qm.From("`blocked_entry`"))
	return blockedEntryQuery{NewQuery(mods...)}
}

// FindBlockedEntryG retrieves a single record by ID.
func FindBlockedEntryG(iD uint64, selectCols ...string) (*BlockedEntry, error) {
	return FindBlockedEntry(boil.GetDB(), iD, selectCols...)
}

// FindBlockedEntryP retrieves a single record by ID with an executor, and panics on error.
func FindBlockedEntryP(exec boil.Executor, iD uint64, selectCols ...string) *BlockedEntry {
	retobj, err := FindBlockedEntry(exec, iD, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindBlockedEntryGP retrieves a single record by ID, and panics on error.
func FindBlockedEntryGP(iD uint64, selectCols ...string) *BlockedEntry {
	retobj, err := FindBlockedEntry(boil.GetDB(), iD, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindBlockedEntry retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBlockedEntry(exec boil.Executor, iD uint64, selectCols ...string) (*BlockedEntry, error) {
	blockedEntryObj := &BlockedEntry{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `blocked_entry` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, blockedEntryObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from blocked_entry")
	}

	return blockedEntryObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *BlockedEntry) InsertG(columns boil.Columns) error {
	return o.Insert(boil.GetDB(), columns)
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *BlockedEntry) InsertP(exec boil.Executor, columns boil.Columns) {
	if err := o.Insert(exec, columns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *BlockedEntry) InsertGP(columns boil.Columns) {
	if err := o.Insert(boil.GetDB(), columns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BlockedEntry) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no blocked_entry provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(blockedEntryColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	blockedEntryInsertCacheMut.RLock()
	cache, cached := blockedEntryInsertCache[key]
	blockedEntryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			blockedEntryAllColumns,
			blockedEntryColumnsWithDefault,
			blockedEntryColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(blockedEntryType, blockedEntryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(blockedEntryType, blockedEntryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `blocked_entry` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `blocked_entry` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `blocked_entry` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, blockedEntryPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into blocked_entry")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == blockedEntryMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for blocked_entry")
	}

CacheNoHooks:
	if !cached {
		blockedEntryInsertCacheMut.Lock()
		blockedEntryInsertCache[key] = cache
		blockedEntryInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single BlockedEntry record using the global executor.
// See Update for more documentation.
func (o *BlockedEntry) UpdateG(columns boil.Columns) error {
	return o.Update(boil.GetDB(), columns)
}

// UpdateP uses an executor to update the BlockedEntry, and panics on error.
// See Update for more documentation.
func (o *BlockedEntry) UpdateP(exec boil.Executor, columns boil.Columns) {
	err := o.Update(exec, columns)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateGP a single BlockedEntry record using the global executor. Panics on error.
// See Update for more documentation.
func (o *BlockedEntry) UpdateGP(columns boil.Columns) {
	err := o.Update(boil.GetDB(), columns)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the BlockedEntry.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BlockedEntry) Update(exec boil.Executor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	blockedEntryUpdateCacheMut.RLock()
	cache, cached := blockedEntryUpdateCache[key]
	blockedEntryUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			blockedEntryAllColumns,
			blockedEntryPrimaryKeyColumns,
		)

		if len(wl) == 0 {
			return errors.New("model: unable to update blocked_entry, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `blocked_entry` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, blockedEntryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(blockedEntryType, blockedEntryMapping, append(wl, blockedEntryPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "model: unable to update blocked_entry row")
	}

	if !cached {
		blockedEntryUpdateCacheMut.Lock()
		blockedEntryUpdateCache[key] = cache
		blockedEntryUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q blockedEntryQuery) UpdateAllP(exec boil.Executor, cols M) {
	err := q.UpdateAll(exec, cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllG updates all rows with the specified column values.
func (q blockedEntryQuery) UpdateAllG(cols M) error {
	return q.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q blockedEntryQuery) UpdateAll(exec boil.Executor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec(exec)
	if err != nil {
		return errors.Wrap(err, "model: unable to update all for blocked_entry")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o BlockedEntrySlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o BlockedEntrySlice) UpdateAllGP(cols M) {
	err := o.UpdateAll(boil.GetDB(), cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o BlockedEntrySlice) UpdateAllP(exec boil.Executor, cols M) {
	err := o.UpdateAll(exec, cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BlockedEntrySlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), blockedEntryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `blocked_entry` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, blockedEntryPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "model: unable to update all in blockedEntry slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *BlockedEntry) UpsertG(updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(boil.GetDB(), updateColumns, insertColumns)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *BlockedEntry) UpsertGP(updateColumns, insertColumns boil.Columns) {
	if err := o.Upsert(boil.GetDB(), updateColumns, insertColumns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *BlockedEntry) UpsertP(exec boil.Executor, updateColumns, insertColumns boil.Columns) {
	if err := o.Upsert(exec, updateColumns, insertColumns); err != nil {
		panic(boil.WrapErr(err))
	}
}

var mySQLBlockedEntryUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *BlockedEntry) Upsert(exec boil.Executor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("model: no blocked_entry provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(blockedEntryColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLBlockedEntryUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	blockedEntryUpsertCacheMut.RLock()
	cache, cached := blockedEntryUpsertCache[key]
	blockedEntryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			blockedEntryAllColumns,
			blockedEntryColumnsWithDefault,
			blockedEntryColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			blockedEntryAllColumns,
			blockedEntryPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("model: unable to upsert blocked_entry, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "blocked_entry", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `blocked_entry` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(blockedEntryType, blockedEntryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(blockedEntryType, blockedEntryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to upsert for blocked_entry")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == blockedEntryMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(blockedEntryType, blockedEntryMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "model: unable to retrieve unique values for blocked_entry")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRow(cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for blocked_entry")
	}

CacheNoHooks:
	if !cached {
		blockedEntryUpsertCacheMut.Lock()
		blockedEntryUpsertCache[key] = cache
		blockedEntryUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteG deletes a single BlockedEntry record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *BlockedEntry) DeleteG() error {
	return o.Delete(boil.GetDB())
}

// DeleteP deletes a single BlockedEntry record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *BlockedEntry) DeleteP(exec boil.Executor) {
	err := o.Delete(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteGP deletes a single BlockedEntry record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *BlockedEntry) DeleteGP() {
	err := o.Delete(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single BlockedEntry record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BlockedEntry) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("model: no BlockedEntry provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), blockedEntryPrimaryKeyMapping)
	sql := "DELETE FROM `blocked_entry` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "model: unable to delete from blocked_entry")
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q blockedEntryQuery) DeleteAllP(exec boil.Executor) {
	err := q.DeleteAll(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q blockedEntryQuery) DeleteAll(exec boil.Executor) error {
	if q.Query == nil {
		return errors.New("model: no blockedEntryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec(exec)
	if err != nil {
		return errors.Wrap(err, "model: unable to delete all from blocked_entry")
	}

	return nil
}

// DeleteAllG deletes all rows in the slice.
func (o BlockedEntrySlice) DeleteAllG() error {
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o BlockedEntrySlice) DeleteAllP(exec boil.Executor) {
	err := o.DeleteAll(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o BlockedEntrySlice) DeleteAllGP() {
	err := o.DeleteAll(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BlockedEntrySlice) DeleteAll(exec boil.Executor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), blockedEntryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `blocked_entry` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, blockedEntryPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "model: unable to delete all from blockedEntry slice")
	}

	return nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *BlockedEntry) ReloadG() error {
	if o == nil {
		return errors.New("model: no BlockedEntry provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *BlockedEntry) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadGP refetches the object from the database and panics on error.
func (o *BlockedEntry) ReloadGP() {
	if err := o.Reload(boil.GetDB()); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BlockedEntry) Reload(exec boil.Executor) error {
	ret, err := FindBlockedEntry(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BlockedEntrySlice) ReloadAllG() error {
	if o == nil {
		return errors.New("model: empty BlockedEntrySlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *BlockedEntrySlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *BlockedEntrySlice) ReloadAllGP() {
	if err := o.ReloadAll(boil.GetDB()); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BlockedEntrySlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BlockedEntrySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), blockedEntryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `blocked_entry`.* FROM `blocked_entry` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, blockedEntryPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in BlockedEntrySlice")
	}

	*o = slice

	return nil
}

// BlockedEntryExistsG checks if the BlockedEntry row exists.
func BlockedEntryExistsG(iD uint64) (bool, error) {
	return BlockedEntryExists(boil.GetDB(), iD)
}

// BlockedEntryExistsP checks if the BlockedEntry row exists. Panics on error.
func BlockedEntryExistsP(exec boil.Executor, iD uint64) bool {
	e, err := BlockedEntryExists(exec, iD)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// BlockedEntryExistsGP checks if the BlockedEntry row exists. Panics on error.
func BlockedEntryExistsGP(iD uint64) bool {
	e, err := BlockedEntryExists(boil.GetDB(), iD)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// BlockedEntryExists checks if the BlockedEntry row exists.
func BlockedEntryExists(exec boil.Executor, iD uint64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `blocked_entry` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if blocked_entry exists")
	}

	return exists, nil
}
