// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// CommentOpinion is an object representing the database table.
type CommentOpinion struct {
	ID        uint64      `boil:"id" json:"id" toml:"id" yaml:"id"`
	CommentID string      `boil:"comment_id" json:"comment_id" toml:"comment_id" yaml:"comment_id"`
	ChannelID null.String `boil:"channel_id" json:"channel_id,omitempty" toml:"channel_id" yaml:"channel_id,omitempty"`
	Signature null.String `boil:"signature" json:"signature,omitempty" toml:"signature" yaml:"signature,omitempty"`
	Signingts null.String `boil:"signingts" json:"signingts,omitempty" toml:"signingts" yaml:"signingts,omitempty"`
	Timestamp int         `boil:"timestamp" json:"timestamp" toml:"timestamp" yaml:"timestamp"`
	Rating    null.Int8   `boil:"rating" json:"rating,omitempty" toml:"rating" yaml:"rating,omitempty"`

	R *commentOpinionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L commentOpinionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CommentOpinionColumns = struct {
	ID        string
	CommentID string
	ChannelID string
	Signature string
	Signingts string
	Timestamp string
	Rating    string
}{
	ID:        "id",
	CommentID: "comment_id",
	ChannelID: "channel_id",
	Signature: "signature",
	Signingts: "signingts",
	Timestamp: "timestamp",
	Rating:    "rating",
}

// Generated where

type whereHelperuint64 struct{ field string }

func (w whereHelperuint64) EQ(x uint64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperuint64) NEQ(x uint64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperuint64) LT(x uint64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperuint64) LTE(x uint64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperuint64) GT(x uint64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperuint64) GTE(x uint64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

type whereHelpernull_Int8 struct{ field string }

func (w whereHelpernull_Int8) EQ(x null.Int8) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int8) NEQ(x null.Int8) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int8) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int8) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Int8) LT(x null.Int8) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int8) LTE(x null.Int8) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int8) GT(x null.Int8) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int8) GTE(x null.Int8) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var CommentOpinionWhere = struct {
	ID        whereHelperuint64
	CommentID whereHelperstring
	ChannelID whereHelpernull_String
	Signature whereHelpernull_String
	Signingts whereHelpernull_String
	Timestamp whereHelperint
	Rating    whereHelpernull_Int8
}{
	ID:        whereHelperuint64{field: "`comment_opinion`.`id`"},
	CommentID: whereHelperstring{field: "`comment_opinion`.`comment_id`"},
	ChannelID: whereHelpernull_String{field: "`comment_opinion`.`channel_id`"},
	Signature: whereHelpernull_String{field: "`comment_opinion`.`signature`"},
	Signingts: whereHelpernull_String{field: "`comment_opinion`.`signingts`"},
	Timestamp: whereHelperint{field: "`comment_opinion`.`timestamp`"},
	Rating:    whereHelpernull_Int8{field: "`comment_opinion`.`rating`"},
}

// CommentOpinionRels is where relationship names are stored.
var CommentOpinionRels = struct {
	Comment string
	Channel string
}{
	Comment: "Comment",
	Channel: "Channel",
}

// commentOpinionR is where relationships are stored.
type commentOpinionR struct {
	Comment *Comment
	Channel *Channel
}

// NewStruct creates a new relationship struct
func (*commentOpinionR) NewStruct() *commentOpinionR {
	return &commentOpinionR{}
}

// commentOpinionL is where Load methods for each relationship are stored.
type commentOpinionL struct{}

var (
	commentOpinionAllColumns            = []string{"id", "comment_id", "channel_id", "signature", "signingts", "timestamp", "rating"}
	commentOpinionColumnsWithoutDefault = []string{"comment_id", "channel_id", "signature", "signingts", "timestamp"}
	commentOpinionColumnsWithDefault    = []string{"id", "rating"}
	commentOpinionPrimaryKeyColumns     = []string{"id"}
)

type (
	// CommentOpinionSlice is an alias for a slice of pointers to CommentOpinion.
	// This should generally be used opposed to []CommentOpinion.
	CommentOpinionSlice []*CommentOpinion

	commentOpinionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	commentOpinionType                 = reflect.TypeOf(&CommentOpinion{})
	commentOpinionMapping              = queries.MakeStructMapping(commentOpinionType)
	commentOpinionPrimaryKeyMapping, _ = queries.BindMapping(commentOpinionType, commentOpinionMapping, commentOpinionPrimaryKeyColumns)
	commentOpinionInsertCacheMut       sync.RWMutex
	commentOpinionInsertCache          = make(map[string]insertCache)
	commentOpinionUpdateCacheMut       sync.RWMutex
	commentOpinionUpdateCache          = make(map[string]updateCache)
	commentOpinionUpsertCacheMut       sync.RWMutex
	commentOpinionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// OneG returns a single commentOpinion record from the query using the global executor.
func (q commentOpinionQuery) OneG() (*CommentOpinion, error) {
	return q.One(boil.GetDB())
}

// OneGP returns a single commentOpinion record from the query using the global executor, and panics on error.
func (q commentOpinionQuery) OneGP() *CommentOpinion {
	o, err := q.One(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// OneP returns a single commentOpinion record from the query, and panics on error.
func (q commentOpinionQuery) OneP(exec boil.Executor) *CommentOpinion {
	o, err := q.One(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single commentOpinion record from the query.
func (q commentOpinionQuery) One(exec boil.Executor) (*CommentOpinion, error) {
	o := &CommentOpinion{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for comment_opinion")
	}

	return o, nil
}

// AllG returns all CommentOpinion records from the query using the global executor.
func (q commentOpinionQuery) AllG() (CommentOpinionSlice, error) {
	return q.All(boil.GetDB())
}

// AllGP returns all CommentOpinion records from the query using the global executor, and panics on error.
func (q commentOpinionQuery) AllGP() CommentOpinionSlice {
	o, err := q.All(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// AllP returns all CommentOpinion records from the query, and panics on error.
func (q commentOpinionQuery) AllP(exec boil.Executor) CommentOpinionSlice {
	o, err := q.All(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all CommentOpinion records from the query.
func (q commentOpinionQuery) All(exec boil.Executor) (CommentOpinionSlice, error) {
	var o []*CommentOpinion

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to CommentOpinion slice")
	}

	return o, nil
}

// CountG returns the count of all CommentOpinion records in the query, and panics on error.
func (q commentOpinionQuery) CountG() (int64, error) {
	return q.Count(boil.GetDB())
}

// CountGP returns the count of all CommentOpinion records in the query using the global executor, and panics on error.
func (q commentOpinionQuery) CountGP() int64 {
	c, err := q.Count(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// CountP returns the count of all CommentOpinion records in the query, and panics on error.
func (q commentOpinionQuery) CountP(exec boil.Executor) int64 {
	c, err := q.Count(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all CommentOpinion records in the query.
func (q commentOpinionQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count comment_opinion rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q commentOpinionQuery) ExistsG() (bool, error) {
	return q.Exists(boil.GetDB())
}

// ExistsGP checks if the row exists in the table using the global executor, and panics on error.
func (q commentOpinionQuery) ExistsGP() bool {
	e, err := q.Exists(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// ExistsP checks if the row exists in the table, and panics on error.
func (q commentOpinionQuery) ExistsP(exec boil.Executor) bool {
	e, err := q.Exists(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q commentOpinionQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if comment_opinion exists")
	}

	return count > 0, nil
}

// Comment pointed to by the foreign key.
func (o *CommentOpinion) Comment(mods ...qm.QueryMod) commentQuery {
	queryMods := []qm.QueryMod{
		qm.Where("comment_id=?", o.CommentID),
	}

	queryMods = append(queryMods, mods...)

	query := Comments(queryMods...)
	queries.SetFrom(query.Query, "`comment`")

	return query
}

// Channel pointed to by the foreign key.
func (o *CommentOpinion) Channel(mods ...qm.QueryMod) channelQuery {
	queryMods := []qm.QueryMod{
		qm.Where("claim_id=?", o.ChannelID),
	}

	queryMods = append(queryMods, mods...)

	query := Channels(queryMods...)
	queries.SetFrom(query.Query, "`channel`")

	return query
}

// LoadComment allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (commentOpinionL) LoadComment(e boil.Executor, singular bool, maybeCommentOpinion interface{}, mods queries.Applicator) error {
	var slice []*CommentOpinion
	var object *CommentOpinion

	if singular {
		object = maybeCommentOpinion.(*CommentOpinion)
	} else {
		slice = *maybeCommentOpinion.(*[]*CommentOpinion)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &commentOpinionR{}
		}
		args = append(args, object.CommentID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &commentOpinionR{}
			}

			for _, a := range args {
				if a == obj.CommentID {
					continue Outer
				}
			}

			args = append(args, obj.CommentID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`comment`), qm.WhereIn(`comment_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Comment")
	}

	var resultSlice []*Comment
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Comment")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for comment")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for comment")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Comment = foreign
		if foreign.R == nil {
			foreign.R = &commentR{}
		}
		foreign.R.CommentOpinions = append(foreign.R.CommentOpinions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CommentID == foreign.CommentID {
				local.R.Comment = foreign
				if foreign.R == nil {
					foreign.R = &commentR{}
				}
				foreign.R.CommentOpinions = append(foreign.R.CommentOpinions, local)
				break
			}
		}
	}

	return nil
}

// LoadChannel allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (commentOpinionL) LoadChannel(e boil.Executor, singular bool, maybeCommentOpinion interface{}, mods queries.Applicator) error {
	var slice []*CommentOpinion
	var object *CommentOpinion

	if singular {
		object = maybeCommentOpinion.(*CommentOpinion)
	} else {
		slice = *maybeCommentOpinion.(*[]*CommentOpinion)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &commentOpinionR{}
		}
		if !queries.IsNil(object.ChannelID) {
			args = append(args, object.ChannelID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &commentOpinionR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ChannelID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ChannelID) {
				args = append(args, obj.ChannelID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`channel`), qm.WhereIn(`claim_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Channel")
	}

	var resultSlice []*Channel
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Channel")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for channel")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for channel")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Channel = foreign
		if foreign.R == nil {
			foreign.R = &channelR{}
		}
		foreign.R.CommentOpinions = append(foreign.R.CommentOpinions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ChannelID, foreign.ClaimID) {
				local.R.Channel = foreign
				if foreign.R == nil {
					foreign.R = &channelR{}
				}
				foreign.R.CommentOpinions = append(foreign.R.CommentOpinions, local)
				break
			}
		}
	}

	return nil
}

// SetCommentG of the commentOpinion to the related item.
// Sets o.R.Comment to related.
// Adds o to related.R.CommentOpinions.
// Uses the global database handle.
func (o *CommentOpinion) SetCommentG(insert bool, related *Comment) error {
	return o.SetComment(boil.GetDB(), insert, related)
}

// SetCommentP of the commentOpinion to the related item.
// Sets o.R.Comment to related.
// Adds o to related.R.CommentOpinions.
// Panics on error.
func (o *CommentOpinion) SetCommentP(exec boil.Executor, insert bool, related *Comment) {
	if err := o.SetComment(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetCommentGP of the commentOpinion to the related item.
// Sets o.R.Comment to related.
// Adds o to related.R.CommentOpinions.
// Uses the global database handle and panics on error.
func (o *CommentOpinion) SetCommentGP(insert bool, related *Comment) {
	if err := o.SetComment(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetComment of the commentOpinion to the related item.
// Sets o.R.Comment to related.
// Adds o to related.R.CommentOpinions.
func (o *CommentOpinion) SetComment(exec boil.Executor, insert bool, related *Comment) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `comment_opinion` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"comment_id"}),
		strmangle.WhereClause("`", "`", 0, commentOpinionPrimaryKeyColumns),
	)
	values := []interface{}{related.CommentID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CommentID = related.CommentID
	if o.R == nil {
		o.R = &commentOpinionR{
			Comment: related,
		}
	} else {
		o.R.Comment = related
	}

	if related.R == nil {
		related.R = &commentR{
			CommentOpinions: CommentOpinionSlice{o},
		}
	} else {
		related.R.CommentOpinions = append(related.R.CommentOpinions, o)
	}

	return nil
}

// SetChannelG of the commentOpinion to the related item.
// Sets o.R.Channel to related.
// Adds o to related.R.CommentOpinions.
// Uses the global database handle.
func (o *CommentOpinion) SetChannelG(insert bool, related *Channel) error {
	return o.SetChannel(boil.GetDB(), insert, related)
}

// SetChannelP of the commentOpinion to the related item.
// Sets o.R.Channel to related.
// Adds o to related.R.CommentOpinions.
// Panics on error.
func (o *CommentOpinion) SetChannelP(exec boil.Executor, insert bool, related *Channel) {
	if err := o.SetChannel(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetChannelGP of the commentOpinion to the related item.
// Sets o.R.Channel to related.
// Adds o to related.R.CommentOpinions.
// Uses the global database handle and panics on error.
func (o *CommentOpinion) SetChannelGP(insert bool, related *Channel) {
	if err := o.SetChannel(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetChannel of the commentOpinion to the related item.
// Sets o.R.Channel to related.
// Adds o to related.R.CommentOpinions.
func (o *CommentOpinion) SetChannel(exec boil.Executor, insert bool, related *Channel) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `comment_opinion` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"channel_id"}),
		strmangle.WhereClause("`", "`", 0, commentOpinionPrimaryKeyColumns),
	)
	values := []interface{}{related.ClaimID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ChannelID, related.ClaimID)
	if o.R == nil {
		o.R = &commentOpinionR{
			Channel: related,
		}
	} else {
		o.R.Channel = related
	}

	if related.R == nil {
		related.R = &channelR{
			CommentOpinions: CommentOpinionSlice{o},
		}
	} else {
		related.R.CommentOpinions = append(related.R.CommentOpinions, o)
	}

	return nil
}

// RemoveChannelG relationship.
// Sets o.R.Channel to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle.
func (o *CommentOpinion) RemoveChannelG(related *Channel) error {
	return o.RemoveChannel(boil.GetDB(), related)
}

// RemoveChannelP relationship.
// Sets o.R.Channel to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Panics on error.
func (o *CommentOpinion) RemoveChannelP(exec boil.Executor, related *Channel) {
	if err := o.RemoveChannel(exec, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveChannelGP relationship.
// Sets o.R.Channel to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle and panics on error.
func (o *CommentOpinion) RemoveChannelGP(related *Channel) {
	if err := o.RemoveChannel(boil.GetDB(), related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveChannel relationship.
// Sets o.R.Channel to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *CommentOpinion) RemoveChannel(exec boil.Executor, related *Channel) error {
	var err error

	queries.SetScanner(&o.ChannelID, nil)
	if err = o.Update(exec, boil.Whitelist("channel_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.Channel = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.CommentOpinions {
		if queries.Equal(o.ChannelID, ri.ChannelID) {
			continue
		}

		ln := len(related.R.CommentOpinions)
		if ln > 1 && i < ln-1 {
			related.R.CommentOpinions[i] = related.R.CommentOpinions[ln-1]
		}
		related.R.CommentOpinions = related.R.CommentOpinions[:ln-1]
		break
	}
	return nil
}

// CommentOpinions retrieves all the records using an executor.
func CommentOpinions(mods ...qm.QueryMod) commentOpinionQuery {
	mods = append(mods, qm.From("`comment_opinion`"))
	return commentOpinionQuery{NewQuery(mods...)}
}

// FindCommentOpinionG retrieves a single record by ID.
func FindCommentOpinionG(iD uint64, selectCols ...string) (*CommentOpinion, error) {
	return FindCommentOpinion(boil.GetDB(), iD, selectCols...)
}

// FindCommentOpinionP retrieves a single record by ID with an executor, and panics on error.
func FindCommentOpinionP(exec boil.Executor, iD uint64, selectCols ...string) *CommentOpinion {
	retobj, err := FindCommentOpinion(exec, iD, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindCommentOpinionGP retrieves a single record by ID, and panics on error.
func FindCommentOpinionGP(iD uint64, selectCols ...string) *CommentOpinion {
	retobj, err := FindCommentOpinion(boil.GetDB(), iD, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindCommentOpinion retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCommentOpinion(exec boil.Executor, iD uint64, selectCols ...string) (*CommentOpinion, error) {
	commentOpinionObj := &CommentOpinion{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `comment_opinion` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, commentOpinionObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from comment_opinion")
	}

	return commentOpinionObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *CommentOpinion) InsertG(columns boil.Columns) error {
	return o.Insert(boil.GetDB(), columns)
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *CommentOpinion) InsertP(exec boil.Executor, columns boil.Columns) {
	if err := o.Insert(exec, columns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *CommentOpinion) InsertGP(columns boil.Columns) {
	if err := o.Insert(boil.GetDB(), columns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CommentOpinion) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no comment_opinion provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(commentOpinionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	commentOpinionInsertCacheMut.RLock()
	cache, cached := commentOpinionInsertCache[key]
	commentOpinionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			commentOpinionAllColumns,
			commentOpinionColumnsWithDefault,
			commentOpinionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(commentOpinionType, commentOpinionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(commentOpinionType, commentOpinionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `comment_opinion` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `comment_opinion` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `comment_opinion` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, commentOpinionPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into comment_opinion")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == commentOpinionMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for comment_opinion")
	}

CacheNoHooks:
	if !cached {
		commentOpinionInsertCacheMut.Lock()
		commentOpinionInsertCache[key] = cache
		commentOpinionInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single CommentOpinion record using the global executor.
// See Update for more documentation.
func (o *CommentOpinion) UpdateG(columns boil.Columns) error {
	return o.Update(boil.GetDB(), columns)
}

// UpdateP uses an executor to update the CommentOpinion, and panics on error.
// See Update for more documentation.
func (o *CommentOpinion) UpdateP(exec boil.Executor, columns boil.Columns) {
	err := o.Update(exec, columns)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateGP a single CommentOpinion record using the global executor. Panics on error.
// See Update for more documentation.
func (o *CommentOpinion) UpdateGP(columns boil.Columns) {
	err := o.Update(boil.GetDB(), columns)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the CommentOpinion.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CommentOpinion) Update(exec boil.Executor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	commentOpinionUpdateCacheMut.RLock()
	cache, cached := commentOpinionUpdateCache[key]
	commentOpinionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			commentOpinionAllColumns,
			commentOpinionPrimaryKeyColumns,
		)

		if len(wl) == 0 {
			return errors.New("model: unable to update comment_opinion, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `comment_opinion` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, commentOpinionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(commentOpinionType, commentOpinionMapping, append(wl, commentOpinionPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "model: unable to update comment_opinion row")
	}

	if !cached {
		commentOpinionUpdateCacheMut.Lock()
		commentOpinionUpdateCache[key] = cache
		commentOpinionUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q commentOpinionQuery) UpdateAllP(exec boil.Executor, cols M) {
	err := q.UpdateAll(exec, cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllG updates all rows with the specified column values.
func (q commentOpinionQuery) UpdateAllG(cols M) error {
	return q.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q commentOpinionQuery) UpdateAll(exec boil.Executor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec(exec)
	if err != nil {
		return errors.Wrap(err, "model: unable to update all for comment_opinion")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o CommentOpinionSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o CommentOpinionSlice) UpdateAllGP(cols M) {
	err := o.UpdateAll(boil.GetDB(), cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o CommentOpinionSlice) UpdateAllP(exec boil.Executor, cols M) {
	err := o.UpdateAll(exec, cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CommentOpinionSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), commentOpinionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `comment_opinion` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, commentOpinionPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "model: unable to update all in commentOpinion slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *CommentOpinion) UpsertG(updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(boil.GetDB(), updateColumns, insertColumns)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *CommentOpinion) UpsertGP(updateColumns, insertColumns boil.Columns) {
	if err := o.Upsert(boil.GetDB(), updateColumns, insertColumns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *CommentOpinion) UpsertP(exec boil.Executor, updateColumns, insertColumns boil.Columns) {
	if err := o.Upsert(exec, updateColumns, insertColumns); err != nil {
		panic(boil.WrapErr(err))
	}
}

var mySQLCommentOpinionUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CommentOpinion) Upsert(exec boil.Executor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("model: no comment_opinion provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(commentOpinionColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLCommentOpinionUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	commentOpinionUpsertCacheMut.RLock()
	cache, cached := commentOpinionUpsertCache[key]
	commentOpinionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			commentOpinionAllColumns,
			commentOpinionColumnsWithDefault,
			commentOpinionColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			commentOpinionAllColumns,
			commentOpinionPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("model: unable to upsert comment_opinion, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "comment_opinion", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `comment_opinion` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(commentOpinionType, commentOpinionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(commentOpinionType, commentOpinionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to upsert for comment_opinion")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == commentOpinionMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(commentOpinionType, commentOpinionMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "model: unable to retrieve unique values for comment_opinion")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRow(cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for comment_opinion")
	}

CacheNoHooks:
	if !cached {
		commentOpinionUpsertCacheMut.Lock()
		commentOpinionUpsertCache[key] = cache
		commentOpinionUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteG deletes a single CommentOpinion record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *CommentOpinion) DeleteG() error {
	return o.Delete(boil.GetDB())
}

// DeleteP deletes a single CommentOpinion record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *CommentOpinion) DeleteP(exec boil.Executor) {
	err := o.Delete(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteGP deletes a single CommentOpinion record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *CommentOpinion) DeleteGP() {
	err := o.Delete(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single CommentOpinion record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CommentOpinion) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("model: no CommentOpinion provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), commentOpinionPrimaryKeyMapping)
	sql := "DELETE FROM `comment_opinion` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "model: unable to delete from comment_opinion")
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q commentOpinionQuery) DeleteAllP(exec boil.Executor) {
	err := q.DeleteAll(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q commentOpinionQuery) DeleteAll(exec boil.Executor) error {
	if q.Query == nil {
		return errors.New("model: no commentOpinionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec(exec)
	if err != nil {
		return errors.Wrap(err, "model: unable to delete all from comment_opinion")
	}

	return nil
}

// DeleteAllG deletes all rows in the slice.
func (o CommentOpinionSlice) DeleteAllG() error {
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o CommentOpinionSlice) DeleteAllP(exec boil.Executor) {
	err := o.DeleteAll(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o CommentOpinionSlice) DeleteAllGP() {
	err := o.DeleteAll(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CommentOpinionSlice) DeleteAll(exec boil.Executor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), commentOpinionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `comment_opinion` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, commentOpinionPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "model: unable to delete all from commentOpinion slice")
	}

	return nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *CommentOpinion) ReloadG() error {
	if o == nil {
		return errors.New("model: no CommentOpinion provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *CommentOpinion) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadGP refetches the object from the database and panics on error.
func (o *CommentOpinion) ReloadGP() {
	if err := o.Reload(boil.GetDB()); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CommentOpinion) Reload(exec boil.Executor) error {
	ret, err := FindCommentOpinion(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CommentOpinionSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("model: empty CommentOpinionSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *CommentOpinionSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *CommentOpinionSlice) ReloadAllGP() {
	if err := o.ReloadAll(boil.GetDB()); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CommentOpinionSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CommentOpinionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), commentOpinionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `comment_opinion`.* FROM `comment_opinion` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, commentOpinionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in CommentOpinionSlice")
	}

	*o = slice

	return nil
}

// CommentOpinionExistsG checks if the CommentOpinion row exists.
func CommentOpinionExistsG(iD uint64) (bool, error) {
	return CommentOpinionExists(boil.GetDB(), iD)
}

// CommentOpinionExistsP checks if the CommentOpinion row exists. Panics on error.
func CommentOpinionExistsP(exec boil.Executor, iD uint64) bool {
	e, err := CommentOpinionExists(exec, iD)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// CommentOpinionExistsGP checks if the CommentOpinion row exists. Panics on error.
func CommentOpinionExistsGP(iD uint64) bool {
	e, err := CommentOpinionExists(boil.GetDB(), iD)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// CommentOpinionExists checks if the CommentOpinion row exists.
func CommentOpinionExists(exec boil.Executor, iD uint64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `comment_opinion` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if comment_opinion exists")
	}

	return exists, nil
}
