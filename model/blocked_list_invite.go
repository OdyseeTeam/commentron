// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// BlockedListInvite is an object representing the database table.
type BlockedListInvite struct {
	ID               uint64    `boil:"id" json:"id" toml:"id" yaml:"id"`
	BlockedListID    uint64    `boil:"blocked_list_id" json:"blocked_list_id" toml:"blocked_list_id" yaml:"blocked_list_id"`
	InviterChannelID string    `boil:"inviter_channel_id" json:"inviter_channel_id" toml:"inviter_channel_id" yaml:"inviter_channel_id"`
	InvitedChannelID string    `boil:"invited_channel_id" json:"invited_channel_id" toml:"invited_channel_id" yaml:"invited_channel_id"`
	Accepted         null.Bool `boil:"accepted" json:"accepted,omitempty" toml:"accepted" yaml:"accepted,omitempty"`
	Message          string    `boil:"message" json:"message" toml:"message" yaml:"message"`
	CreatedAt        time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt        time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *blockedListInviteR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L blockedListInviteL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BlockedListInviteColumns = struct {
	ID               string
	BlockedListID    string
	InviterChannelID string
	InvitedChannelID string
	Accepted         string
	Message          string
	CreatedAt        string
	UpdatedAt        string
}{
	ID:               "id",
	BlockedListID:    "blocked_list_id",
	InviterChannelID: "inviter_channel_id",
	InvitedChannelID: "invited_channel_id",
	Accepted:         "accepted",
	Message:          "message",
	CreatedAt:        "created_at",
	UpdatedAt:        "updated_at",
}

// Generated where

var BlockedListInviteWhere = struct {
	ID               whereHelperuint64
	BlockedListID    whereHelperuint64
	InviterChannelID whereHelperstring
	InvitedChannelID whereHelperstring
	Accepted         whereHelpernull_Bool
	Message          whereHelperstring
	CreatedAt        whereHelpertime_Time
	UpdatedAt        whereHelpertime_Time
}{
	ID:               whereHelperuint64{field: "`blocked_list_invite`.`id`"},
	BlockedListID:    whereHelperuint64{field: "`blocked_list_invite`.`blocked_list_id`"},
	InviterChannelID: whereHelperstring{field: "`blocked_list_invite`.`inviter_channel_id`"},
	InvitedChannelID: whereHelperstring{field: "`blocked_list_invite`.`invited_channel_id`"},
	Accepted:         whereHelpernull_Bool{field: "`blocked_list_invite`.`accepted`"},
	Message:          whereHelperstring{field: "`blocked_list_invite`.`message`"},
	CreatedAt:        whereHelpertime_Time{field: "`blocked_list_invite`.`created_at`"},
	UpdatedAt:        whereHelpertime_Time{field: "`blocked_list_invite`.`updated_at`"},
}

// BlockedListInviteRels is where relationship names are stored.
var BlockedListInviteRels = struct {
	BlockedList    string
	InviterChannel string
	InvitedChannel string
}{
	BlockedList:    "BlockedList",
	InviterChannel: "InviterChannel",
	InvitedChannel: "InvitedChannel",
}

// blockedListInviteR is where relationships are stored.
type blockedListInviteR struct {
	BlockedList    *BlockedList
	InviterChannel *Channel
	InvitedChannel *Channel
}

// NewStruct creates a new relationship struct
func (*blockedListInviteR) NewStruct() *blockedListInviteR {
	return &blockedListInviteR{}
}

// blockedListInviteL is where Load methods for each relationship are stored.
type blockedListInviteL struct{}

var (
	blockedListInviteAllColumns            = []string{"id", "blocked_list_id", "inviter_channel_id", "invited_channel_id", "accepted", "message", "created_at", "updated_at"}
	blockedListInviteColumnsWithoutDefault = []string{"blocked_list_id", "inviter_channel_id", "invited_channel_id", "message"}
	blockedListInviteColumnsWithDefault    = []string{"id", "accepted", "created_at", "updated_at"}
	blockedListInvitePrimaryKeyColumns     = []string{"id"}
)

type (
	// BlockedListInviteSlice is an alias for a slice of pointers to BlockedListInvite.
	// This should generally be used opposed to []BlockedListInvite.
	BlockedListInviteSlice []*BlockedListInvite

	blockedListInviteQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	blockedListInviteType                 = reflect.TypeOf(&BlockedListInvite{})
	blockedListInviteMapping              = queries.MakeStructMapping(blockedListInviteType)
	blockedListInvitePrimaryKeyMapping, _ = queries.BindMapping(blockedListInviteType, blockedListInviteMapping, blockedListInvitePrimaryKeyColumns)
	blockedListInviteInsertCacheMut       sync.RWMutex
	blockedListInviteInsertCache          = make(map[string]insertCache)
	blockedListInviteUpdateCacheMut       sync.RWMutex
	blockedListInviteUpdateCache          = make(map[string]updateCache)
	blockedListInviteUpsertCacheMut       sync.RWMutex
	blockedListInviteUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// OneG returns a single blockedListInvite record from the query using the global executor.
func (q blockedListInviteQuery) OneG() (*BlockedListInvite, error) {
	return q.One(boil.GetDB())
}

// OneGP returns a single blockedListInvite record from the query using the global executor, and panics on error.
func (q blockedListInviteQuery) OneGP() *BlockedListInvite {
	o, err := q.One(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// OneP returns a single blockedListInvite record from the query, and panics on error.
func (q blockedListInviteQuery) OneP(exec boil.Executor) *BlockedListInvite {
	o, err := q.One(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single blockedListInvite record from the query.
func (q blockedListInviteQuery) One(exec boil.Executor) (*BlockedListInvite, error) {
	o := &BlockedListInvite{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for blocked_list_invite")
	}

	return o, nil
}

// AllG returns all BlockedListInvite records from the query using the global executor.
func (q blockedListInviteQuery) AllG() (BlockedListInviteSlice, error) {
	return q.All(boil.GetDB())
}

// AllGP returns all BlockedListInvite records from the query using the global executor, and panics on error.
func (q blockedListInviteQuery) AllGP() BlockedListInviteSlice {
	o, err := q.All(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// AllP returns all BlockedListInvite records from the query, and panics on error.
func (q blockedListInviteQuery) AllP(exec boil.Executor) BlockedListInviteSlice {
	o, err := q.All(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all BlockedListInvite records from the query.
func (q blockedListInviteQuery) All(exec boil.Executor) (BlockedListInviteSlice, error) {
	var o []*BlockedListInvite

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to BlockedListInvite slice")
	}

	return o, nil
}

// CountG returns the count of all BlockedListInvite records in the query, and panics on error.
func (q blockedListInviteQuery) CountG() (int64, error) {
	return q.Count(boil.GetDB())
}

// CountGP returns the count of all BlockedListInvite records in the query using the global executor, and panics on error.
func (q blockedListInviteQuery) CountGP() int64 {
	c, err := q.Count(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// CountP returns the count of all BlockedListInvite records in the query, and panics on error.
func (q blockedListInviteQuery) CountP(exec boil.Executor) int64 {
	c, err := q.Count(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all BlockedListInvite records in the query.
func (q blockedListInviteQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count blocked_list_invite rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q blockedListInviteQuery) ExistsG() (bool, error) {
	return q.Exists(boil.GetDB())
}

// ExistsGP checks if the row exists in the table using the global executor, and panics on error.
func (q blockedListInviteQuery) ExistsGP() bool {
	e, err := q.Exists(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// ExistsP checks if the row exists in the table, and panics on error.
func (q blockedListInviteQuery) ExistsP(exec boil.Executor) bool {
	e, err := q.Exists(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q blockedListInviteQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if blocked_list_invite exists")
	}

	return count > 0, nil
}

// BlockedList pointed to by the foreign key.
func (o *BlockedListInvite) BlockedList(mods ...qm.QueryMod) blockedListQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.BlockedListID),
	}

	queryMods = append(queryMods, mods...)

	query := BlockedLists(queryMods...)
	queries.SetFrom(query.Query, "`blocked_list`")

	return query
}

// InviterChannel pointed to by the foreign key.
func (o *BlockedListInvite) InviterChannel(mods ...qm.QueryMod) channelQuery {
	queryMods := []qm.QueryMod{
		qm.Where("claim_id=?", o.InviterChannelID),
	}

	queryMods = append(queryMods, mods...)

	query := Channels(queryMods...)
	queries.SetFrom(query.Query, "`channel`")

	return query
}

// InvitedChannel pointed to by the foreign key.
func (o *BlockedListInvite) InvitedChannel(mods ...qm.QueryMod) channelQuery {
	queryMods := []qm.QueryMod{
		qm.Where("claim_id=?", o.InvitedChannelID),
	}

	queryMods = append(queryMods, mods...)

	query := Channels(queryMods...)
	queries.SetFrom(query.Query, "`channel`")

	return query
}

// LoadBlockedList allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (blockedListInviteL) LoadBlockedList(e boil.Executor, singular bool, maybeBlockedListInvite interface{}, mods queries.Applicator) error {
	var slice []*BlockedListInvite
	var object *BlockedListInvite

	if singular {
		object = maybeBlockedListInvite.(*BlockedListInvite)
	} else {
		slice = *maybeBlockedListInvite.(*[]*BlockedListInvite)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &blockedListInviteR{}
		}
		args = append(args, object.BlockedListID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &blockedListInviteR{}
			}

			for _, a := range args {
				if a == obj.BlockedListID {
					continue Outer
				}
			}

			args = append(args, obj.BlockedListID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`blocked_list`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load BlockedList")
	}

	var resultSlice []*BlockedList
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice BlockedList")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for blocked_list")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for blocked_list")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BlockedList = foreign
		if foreign.R == nil {
			foreign.R = &blockedListR{}
		}
		foreign.R.BlockedListInvites = append(foreign.R.BlockedListInvites, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BlockedListID == foreign.ID {
				local.R.BlockedList = foreign
				if foreign.R == nil {
					foreign.R = &blockedListR{}
				}
				foreign.R.BlockedListInvites = append(foreign.R.BlockedListInvites, local)
				break
			}
		}
	}

	return nil
}

// LoadInviterChannel allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (blockedListInviteL) LoadInviterChannel(e boil.Executor, singular bool, maybeBlockedListInvite interface{}, mods queries.Applicator) error {
	var slice []*BlockedListInvite
	var object *BlockedListInvite

	if singular {
		object = maybeBlockedListInvite.(*BlockedListInvite)
	} else {
		slice = *maybeBlockedListInvite.(*[]*BlockedListInvite)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &blockedListInviteR{}
		}
		args = append(args, object.InviterChannelID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &blockedListInviteR{}
			}

			for _, a := range args {
				if a == obj.InviterChannelID {
					continue Outer
				}
			}

			args = append(args, obj.InviterChannelID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`channel`), qm.WhereIn(`claim_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Channel")
	}

	var resultSlice []*Channel
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Channel")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for channel")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for channel")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.InviterChannel = foreign
		if foreign.R == nil {
			foreign.R = &channelR{}
		}
		foreign.R.InviterChannelBlockedListInvites = append(foreign.R.InviterChannelBlockedListInvites, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.InviterChannelID == foreign.ClaimID {
				local.R.InviterChannel = foreign
				if foreign.R == nil {
					foreign.R = &channelR{}
				}
				foreign.R.InviterChannelBlockedListInvites = append(foreign.R.InviterChannelBlockedListInvites, local)
				break
			}
		}
	}

	return nil
}

// LoadInvitedChannel allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (blockedListInviteL) LoadInvitedChannel(e boil.Executor, singular bool, maybeBlockedListInvite interface{}, mods queries.Applicator) error {
	var slice []*BlockedListInvite
	var object *BlockedListInvite

	if singular {
		object = maybeBlockedListInvite.(*BlockedListInvite)
	} else {
		slice = *maybeBlockedListInvite.(*[]*BlockedListInvite)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &blockedListInviteR{}
		}
		args = append(args, object.InvitedChannelID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &blockedListInviteR{}
			}

			for _, a := range args {
				if a == obj.InvitedChannelID {
					continue Outer
				}
			}

			args = append(args, obj.InvitedChannelID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`channel`), qm.WhereIn(`claim_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Channel")
	}

	var resultSlice []*Channel
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Channel")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for channel")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for channel")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.InvitedChannel = foreign
		if foreign.R == nil {
			foreign.R = &channelR{}
		}
		foreign.R.InvitedChannelBlockedListInvites = append(foreign.R.InvitedChannelBlockedListInvites, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.InvitedChannelID == foreign.ClaimID {
				local.R.InvitedChannel = foreign
				if foreign.R == nil {
					foreign.R = &channelR{}
				}
				foreign.R.InvitedChannelBlockedListInvites = append(foreign.R.InvitedChannelBlockedListInvites, local)
				break
			}
		}
	}

	return nil
}

// SetBlockedListG of the blockedListInvite to the related item.
// Sets o.R.BlockedList to related.
// Adds o to related.R.BlockedListInvites.
// Uses the global database handle.
func (o *BlockedListInvite) SetBlockedListG(insert bool, related *BlockedList) error {
	return o.SetBlockedList(boil.GetDB(), insert, related)
}

// SetBlockedListP of the blockedListInvite to the related item.
// Sets o.R.BlockedList to related.
// Adds o to related.R.BlockedListInvites.
// Panics on error.
func (o *BlockedListInvite) SetBlockedListP(exec boil.Executor, insert bool, related *BlockedList) {
	if err := o.SetBlockedList(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetBlockedListGP of the blockedListInvite to the related item.
// Sets o.R.BlockedList to related.
// Adds o to related.R.BlockedListInvites.
// Uses the global database handle and panics on error.
func (o *BlockedListInvite) SetBlockedListGP(insert bool, related *BlockedList) {
	if err := o.SetBlockedList(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetBlockedList of the blockedListInvite to the related item.
// Sets o.R.BlockedList to related.
// Adds o to related.R.BlockedListInvites.
func (o *BlockedListInvite) SetBlockedList(exec boil.Executor, insert bool, related *BlockedList) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `blocked_list_invite` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"blocked_list_id"}),
		strmangle.WhereClause("`", "`", 0, blockedListInvitePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BlockedListID = related.ID
	if o.R == nil {
		o.R = &blockedListInviteR{
			BlockedList: related,
		}
	} else {
		o.R.BlockedList = related
	}

	if related.R == nil {
		related.R = &blockedListR{
			BlockedListInvites: BlockedListInviteSlice{o},
		}
	} else {
		related.R.BlockedListInvites = append(related.R.BlockedListInvites, o)
	}

	return nil
}

// SetInviterChannelG of the blockedListInvite to the related item.
// Sets o.R.InviterChannel to related.
// Adds o to related.R.InviterChannelBlockedListInvites.
// Uses the global database handle.
func (o *BlockedListInvite) SetInviterChannelG(insert bool, related *Channel) error {
	return o.SetInviterChannel(boil.GetDB(), insert, related)
}

// SetInviterChannelP of the blockedListInvite to the related item.
// Sets o.R.InviterChannel to related.
// Adds o to related.R.InviterChannelBlockedListInvites.
// Panics on error.
func (o *BlockedListInvite) SetInviterChannelP(exec boil.Executor, insert bool, related *Channel) {
	if err := o.SetInviterChannel(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetInviterChannelGP of the blockedListInvite to the related item.
// Sets o.R.InviterChannel to related.
// Adds o to related.R.InviterChannelBlockedListInvites.
// Uses the global database handle and panics on error.
func (o *BlockedListInvite) SetInviterChannelGP(insert bool, related *Channel) {
	if err := o.SetInviterChannel(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetInviterChannel of the blockedListInvite to the related item.
// Sets o.R.InviterChannel to related.
// Adds o to related.R.InviterChannelBlockedListInvites.
func (o *BlockedListInvite) SetInviterChannel(exec boil.Executor, insert bool, related *Channel) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `blocked_list_invite` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"inviter_channel_id"}),
		strmangle.WhereClause("`", "`", 0, blockedListInvitePrimaryKeyColumns),
	)
	values := []interface{}{related.ClaimID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.InviterChannelID = related.ClaimID
	if o.R == nil {
		o.R = &blockedListInviteR{
			InviterChannel: related,
		}
	} else {
		o.R.InviterChannel = related
	}

	if related.R == nil {
		related.R = &channelR{
			InviterChannelBlockedListInvites: BlockedListInviteSlice{o},
		}
	} else {
		related.R.InviterChannelBlockedListInvites = append(related.R.InviterChannelBlockedListInvites, o)
	}

	return nil
}

// SetInvitedChannelG of the blockedListInvite to the related item.
// Sets o.R.InvitedChannel to related.
// Adds o to related.R.InvitedChannelBlockedListInvites.
// Uses the global database handle.
func (o *BlockedListInvite) SetInvitedChannelG(insert bool, related *Channel) error {
	return o.SetInvitedChannel(boil.GetDB(), insert, related)
}

// SetInvitedChannelP of the blockedListInvite to the related item.
// Sets o.R.InvitedChannel to related.
// Adds o to related.R.InvitedChannelBlockedListInvites.
// Panics on error.
func (o *BlockedListInvite) SetInvitedChannelP(exec boil.Executor, insert bool, related *Channel) {
	if err := o.SetInvitedChannel(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetInvitedChannelGP of the blockedListInvite to the related item.
// Sets o.R.InvitedChannel to related.
// Adds o to related.R.InvitedChannelBlockedListInvites.
// Uses the global database handle and panics on error.
func (o *BlockedListInvite) SetInvitedChannelGP(insert bool, related *Channel) {
	if err := o.SetInvitedChannel(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetInvitedChannel of the blockedListInvite to the related item.
// Sets o.R.InvitedChannel to related.
// Adds o to related.R.InvitedChannelBlockedListInvites.
func (o *BlockedListInvite) SetInvitedChannel(exec boil.Executor, insert bool, related *Channel) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `blocked_list_invite` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"invited_channel_id"}),
		strmangle.WhereClause("`", "`", 0, blockedListInvitePrimaryKeyColumns),
	)
	values := []interface{}{related.ClaimID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.InvitedChannelID = related.ClaimID
	if o.R == nil {
		o.R = &blockedListInviteR{
			InvitedChannel: related,
		}
	} else {
		o.R.InvitedChannel = related
	}

	if related.R == nil {
		related.R = &channelR{
			InvitedChannelBlockedListInvites: BlockedListInviteSlice{o},
		}
	} else {
		related.R.InvitedChannelBlockedListInvites = append(related.R.InvitedChannelBlockedListInvites, o)
	}

	return nil
}

// BlockedListInvites retrieves all the records using an executor.
func BlockedListInvites(mods ...qm.QueryMod) blockedListInviteQuery {
	mods = append(mods, qm.From("`blocked_list_invite`"))
	return blockedListInviteQuery{NewQuery(mods...)}
}

// FindBlockedListInviteG retrieves a single record by ID.
func FindBlockedListInviteG(iD uint64, selectCols ...string) (*BlockedListInvite, error) {
	return FindBlockedListInvite(boil.GetDB(), iD, selectCols...)
}

// FindBlockedListInviteP retrieves a single record by ID with an executor, and panics on error.
func FindBlockedListInviteP(exec boil.Executor, iD uint64, selectCols ...string) *BlockedListInvite {
	retobj, err := FindBlockedListInvite(exec, iD, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindBlockedListInviteGP retrieves a single record by ID, and panics on error.
func FindBlockedListInviteGP(iD uint64, selectCols ...string) *BlockedListInvite {
	retobj, err := FindBlockedListInvite(boil.GetDB(), iD, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindBlockedListInvite retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBlockedListInvite(exec boil.Executor, iD uint64, selectCols ...string) (*BlockedListInvite, error) {
	blockedListInviteObj := &BlockedListInvite{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `blocked_list_invite` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, blockedListInviteObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from blocked_list_invite")
	}

	return blockedListInviteObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *BlockedListInvite) InsertG(columns boil.Columns) error {
	return o.Insert(boil.GetDB(), columns)
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *BlockedListInvite) InsertP(exec boil.Executor, columns boil.Columns) {
	if err := o.Insert(exec, columns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *BlockedListInvite) InsertGP(columns boil.Columns) {
	if err := o.Insert(boil.GetDB(), columns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BlockedListInvite) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no blocked_list_invite provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(blockedListInviteColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	blockedListInviteInsertCacheMut.RLock()
	cache, cached := blockedListInviteInsertCache[key]
	blockedListInviteInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			blockedListInviteAllColumns,
			blockedListInviteColumnsWithDefault,
			blockedListInviteColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(blockedListInviteType, blockedListInviteMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(blockedListInviteType, blockedListInviteMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `blocked_list_invite` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `blocked_list_invite` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `blocked_list_invite` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, blockedListInvitePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into blocked_list_invite")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == blockedListInviteMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for blocked_list_invite")
	}

CacheNoHooks:
	if !cached {
		blockedListInviteInsertCacheMut.Lock()
		blockedListInviteInsertCache[key] = cache
		blockedListInviteInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single BlockedListInvite record using the global executor.
// See Update for more documentation.
func (o *BlockedListInvite) UpdateG(columns boil.Columns) error {
	return o.Update(boil.GetDB(), columns)
}

// UpdateP uses an executor to update the BlockedListInvite, and panics on error.
// See Update for more documentation.
func (o *BlockedListInvite) UpdateP(exec boil.Executor, columns boil.Columns) {
	err := o.Update(exec, columns)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateGP a single BlockedListInvite record using the global executor. Panics on error.
// See Update for more documentation.
func (o *BlockedListInvite) UpdateGP(columns boil.Columns) {
	err := o.Update(boil.GetDB(), columns)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the BlockedListInvite.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BlockedListInvite) Update(exec boil.Executor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	blockedListInviteUpdateCacheMut.RLock()
	cache, cached := blockedListInviteUpdateCache[key]
	blockedListInviteUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			blockedListInviteAllColumns,
			blockedListInvitePrimaryKeyColumns,
		)

		if len(wl) == 0 {
			return errors.New("model: unable to update blocked_list_invite, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `blocked_list_invite` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, blockedListInvitePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(blockedListInviteType, blockedListInviteMapping, append(wl, blockedListInvitePrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "model: unable to update blocked_list_invite row")
	}

	if !cached {
		blockedListInviteUpdateCacheMut.Lock()
		blockedListInviteUpdateCache[key] = cache
		blockedListInviteUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q blockedListInviteQuery) UpdateAllP(exec boil.Executor, cols M) {
	err := q.UpdateAll(exec, cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllG updates all rows with the specified column values.
func (q blockedListInviteQuery) UpdateAllG(cols M) error {
	return q.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q blockedListInviteQuery) UpdateAll(exec boil.Executor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec(exec)
	if err != nil {
		return errors.Wrap(err, "model: unable to update all for blocked_list_invite")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o BlockedListInviteSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o BlockedListInviteSlice) UpdateAllGP(cols M) {
	err := o.UpdateAll(boil.GetDB(), cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o BlockedListInviteSlice) UpdateAllP(exec boil.Executor, cols M) {
	err := o.UpdateAll(exec, cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BlockedListInviteSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), blockedListInvitePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `blocked_list_invite` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, blockedListInvitePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "model: unable to update all in blockedListInvite slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *BlockedListInvite) UpsertG(updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(boil.GetDB(), updateColumns, insertColumns)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *BlockedListInvite) UpsertGP(updateColumns, insertColumns boil.Columns) {
	if err := o.Upsert(boil.GetDB(), updateColumns, insertColumns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *BlockedListInvite) UpsertP(exec boil.Executor, updateColumns, insertColumns boil.Columns) {
	if err := o.Upsert(exec, updateColumns, insertColumns); err != nil {
		panic(boil.WrapErr(err))
	}
}

var mySQLBlockedListInviteUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *BlockedListInvite) Upsert(exec boil.Executor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("model: no blocked_list_invite provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(blockedListInviteColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLBlockedListInviteUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	blockedListInviteUpsertCacheMut.RLock()
	cache, cached := blockedListInviteUpsertCache[key]
	blockedListInviteUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			blockedListInviteAllColumns,
			blockedListInviteColumnsWithDefault,
			blockedListInviteColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			blockedListInviteAllColumns,
			blockedListInvitePrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("model: unable to upsert blocked_list_invite, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "blocked_list_invite", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `blocked_list_invite` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(blockedListInviteType, blockedListInviteMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(blockedListInviteType, blockedListInviteMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to upsert for blocked_list_invite")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == blockedListInviteMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(blockedListInviteType, blockedListInviteMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "model: unable to retrieve unique values for blocked_list_invite")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRow(cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for blocked_list_invite")
	}

CacheNoHooks:
	if !cached {
		blockedListInviteUpsertCacheMut.Lock()
		blockedListInviteUpsertCache[key] = cache
		blockedListInviteUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteG deletes a single BlockedListInvite record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *BlockedListInvite) DeleteG() error {
	return o.Delete(boil.GetDB())
}

// DeleteP deletes a single BlockedListInvite record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *BlockedListInvite) DeleteP(exec boil.Executor) {
	err := o.Delete(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteGP deletes a single BlockedListInvite record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *BlockedListInvite) DeleteGP() {
	err := o.Delete(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single BlockedListInvite record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BlockedListInvite) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("model: no BlockedListInvite provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), blockedListInvitePrimaryKeyMapping)
	sql := "DELETE FROM `blocked_list_invite` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "model: unable to delete from blocked_list_invite")
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q blockedListInviteQuery) DeleteAllP(exec boil.Executor) {
	err := q.DeleteAll(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q blockedListInviteQuery) DeleteAll(exec boil.Executor) error {
	if q.Query == nil {
		return errors.New("model: no blockedListInviteQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec(exec)
	if err != nil {
		return errors.Wrap(err, "model: unable to delete all from blocked_list_invite")
	}

	return nil
}

// DeleteAllG deletes all rows in the slice.
func (o BlockedListInviteSlice) DeleteAllG() error {
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o BlockedListInviteSlice) DeleteAllP(exec boil.Executor) {
	err := o.DeleteAll(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o BlockedListInviteSlice) DeleteAllGP() {
	err := o.DeleteAll(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BlockedListInviteSlice) DeleteAll(exec boil.Executor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), blockedListInvitePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `blocked_list_invite` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, blockedListInvitePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "model: unable to delete all from blockedListInvite slice")
	}

	return nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *BlockedListInvite) ReloadG() error {
	if o == nil {
		return errors.New("model: no BlockedListInvite provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *BlockedListInvite) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadGP refetches the object from the database and panics on error.
func (o *BlockedListInvite) ReloadGP() {
	if err := o.Reload(boil.GetDB()); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BlockedListInvite) Reload(exec boil.Executor) error {
	ret, err := FindBlockedListInvite(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BlockedListInviteSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("model: empty BlockedListInviteSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *BlockedListInviteSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *BlockedListInviteSlice) ReloadAllGP() {
	if err := o.ReloadAll(boil.GetDB()); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BlockedListInviteSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BlockedListInviteSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), blockedListInvitePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `blocked_list_invite`.* FROM `blocked_list_invite` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, blockedListInvitePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in BlockedListInviteSlice")
	}

	*o = slice

	return nil
}

// BlockedListInviteExistsG checks if the BlockedListInvite row exists.
func BlockedListInviteExistsG(iD uint64) (bool, error) {
	return BlockedListInviteExists(boil.GetDB(), iD)
}

// BlockedListInviteExistsP checks if the BlockedListInvite row exists. Panics on error.
func BlockedListInviteExistsP(exec boil.Executor, iD uint64) bool {
	e, err := BlockedListInviteExists(exec, iD)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// BlockedListInviteExistsGP checks if the BlockedListInvite row exists. Panics on error.
func BlockedListInviteExistsGP(iD uint64) bool {
	e, err := BlockedListInviteExists(boil.GetDB(), iD)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// BlockedListInviteExists checks if the BlockedListInvite row exists.
func BlockedListInviteExists(exec boil.Executor, iD uint64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `blocked_list_invite` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if blocked_list_invite exists")
	}

	return exists, nil
}
