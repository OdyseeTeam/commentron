// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// BlockedListAppeal is an object representing the database table.
type BlockedListAppeal struct {
	ID             uint64      `boil:"id" json:"id" toml:"id" yaml:"id"`
	BlockedListID  uint64      `boil:"blocked_list_id" json:"blocked_list_id" toml:"blocked_list_id" yaml:"blocked_list_id"`
	BlockedEntryID uint64      `boil:"blocked_entry_id" json:"blocked_entry_id" toml:"blocked_entry_id" yaml:"blocked_entry_id"`
	Appeal         string      `boil:"appeal" json:"appeal" toml:"appeal" yaml:"appeal"`
	Response       string      `boil:"response" json:"response" toml:"response" yaml:"response"`
	Approved       null.Bool   `boil:"approved" json:"approved,omitempty" toml:"approved" yaml:"approved,omitempty"`
	Escalated      null.Bool   `boil:"escalated" json:"escalated,omitempty" toml:"escalated" yaml:"escalated,omitempty"`
	TXID           null.String `boil:"tx_id" json:"tx_id,omitempty" toml:"tx_id" yaml:"tx_id,omitempty"`
	CreatedAt      time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt      time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *blockedListAppealR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L blockedListAppealL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BlockedListAppealColumns = struct {
	ID             string
	BlockedListID  string
	BlockedEntryID string
	Appeal         string
	Response       string
	Approved       string
	Escalated      string
	TXID           string
	CreatedAt      string
	UpdatedAt      string
}{
	ID:             "id",
	BlockedListID:  "blocked_list_id",
	BlockedEntryID: "blocked_entry_id",
	Appeal:         "appeal",
	Response:       "response",
	Approved:       "approved",
	Escalated:      "escalated",
	TXID:           "tx_id",
	CreatedAt:      "created_at",
	UpdatedAt:      "updated_at",
}

// Generated where

var BlockedListAppealWhere = struct {
	ID             whereHelperuint64
	BlockedListID  whereHelperuint64
	BlockedEntryID whereHelperuint64
	Appeal         whereHelperstring
	Response       whereHelperstring
	Approved       whereHelpernull_Bool
	Escalated      whereHelpernull_Bool
	TXID           whereHelpernull_String
	CreatedAt      whereHelpertime_Time
	UpdatedAt      whereHelpertime_Time
}{
	ID:             whereHelperuint64{field: "`blocked_list_appeal`.`id`"},
	BlockedListID:  whereHelperuint64{field: "`blocked_list_appeal`.`blocked_list_id`"},
	BlockedEntryID: whereHelperuint64{field: "`blocked_list_appeal`.`blocked_entry_id`"},
	Appeal:         whereHelperstring{field: "`blocked_list_appeal`.`appeal`"},
	Response:       whereHelperstring{field: "`blocked_list_appeal`.`response`"},
	Approved:       whereHelpernull_Bool{field: "`blocked_list_appeal`.`approved`"},
	Escalated:      whereHelpernull_Bool{field: "`blocked_list_appeal`.`escalated`"},
	TXID:           whereHelpernull_String{field: "`blocked_list_appeal`.`tx_id`"},
	CreatedAt:      whereHelpertime_Time{field: "`blocked_list_appeal`.`created_at`"},
	UpdatedAt:      whereHelpertime_Time{field: "`blocked_list_appeal`.`updated_at`"},
}

// BlockedListAppealRels is where relationship names are stored.
var BlockedListAppealRels = struct {
	BlockedList  string
	BlockedEntry string
}{
	BlockedList:  "BlockedList",
	BlockedEntry: "BlockedEntry",
}

// blockedListAppealR is where relationships are stored.
type blockedListAppealR struct {
	BlockedList  *BlockedList
	BlockedEntry *BlockedEntry
}

// NewStruct creates a new relationship struct
func (*blockedListAppealR) NewStruct() *blockedListAppealR {
	return &blockedListAppealR{}
}

// blockedListAppealL is where Load methods for each relationship are stored.
type blockedListAppealL struct{}

var (
	blockedListAppealAllColumns            = []string{"id", "blocked_list_id", "blocked_entry_id", "appeal", "response", "approved", "escalated", "tx_id", "created_at", "updated_at"}
	blockedListAppealColumnsWithoutDefault = []string{"blocked_list_id", "blocked_entry_id", "appeal", "response", "approved", "tx_id"}
	blockedListAppealColumnsWithDefault    = []string{"id", "escalated", "created_at", "updated_at"}
	blockedListAppealPrimaryKeyColumns     = []string{"id"}
)

type (
	// BlockedListAppealSlice is an alias for a slice of pointers to BlockedListAppeal.
	// This should generally be used opposed to []BlockedListAppeal.
	BlockedListAppealSlice []*BlockedListAppeal

	blockedListAppealQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	blockedListAppealType                 = reflect.TypeOf(&BlockedListAppeal{})
	blockedListAppealMapping              = queries.MakeStructMapping(blockedListAppealType)
	blockedListAppealPrimaryKeyMapping, _ = queries.BindMapping(blockedListAppealType, blockedListAppealMapping, blockedListAppealPrimaryKeyColumns)
	blockedListAppealInsertCacheMut       sync.RWMutex
	blockedListAppealInsertCache          = make(map[string]insertCache)
	blockedListAppealUpdateCacheMut       sync.RWMutex
	blockedListAppealUpdateCache          = make(map[string]updateCache)
	blockedListAppealUpsertCacheMut       sync.RWMutex
	blockedListAppealUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// OneG returns a single blockedListAppeal record from the query using the global executor.
func (q blockedListAppealQuery) OneG() (*BlockedListAppeal, error) {
	return q.One(boil.GetDB())
}

// OneGP returns a single blockedListAppeal record from the query using the global executor, and panics on error.
func (q blockedListAppealQuery) OneGP() *BlockedListAppeal {
	o, err := q.One(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// OneP returns a single blockedListAppeal record from the query, and panics on error.
func (q blockedListAppealQuery) OneP(exec boil.Executor) *BlockedListAppeal {
	o, err := q.One(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single blockedListAppeal record from the query.
func (q blockedListAppealQuery) One(exec boil.Executor) (*BlockedListAppeal, error) {
	o := &BlockedListAppeal{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for blocked_list_appeal")
	}

	return o, nil
}

// AllG returns all BlockedListAppeal records from the query using the global executor.
func (q blockedListAppealQuery) AllG() (BlockedListAppealSlice, error) {
	return q.All(boil.GetDB())
}

// AllGP returns all BlockedListAppeal records from the query using the global executor, and panics on error.
func (q blockedListAppealQuery) AllGP() BlockedListAppealSlice {
	o, err := q.All(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// AllP returns all BlockedListAppeal records from the query, and panics on error.
func (q blockedListAppealQuery) AllP(exec boil.Executor) BlockedListAppealSlice {
	o, err := q.All(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all BlockedListAppeal records from the query.
func (q blockedListAppealQuery) All(exec boil.Executor) (BlockedListAppealSlice, error) {
	var o []*BlockedListAppeal

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to BlockedListAppeal slice")
	}

	return o, nil
}

// CountG returns the count of all BlockedListAppeal records in the query, and panics on error.
func (q blockedListAppealQuery) CountG() (int64, error) {
	return q.Count(boil.GetDB())
}

// CountGP returns the count of all BlockedListAppeal records in the query using the global executor, and panics on error.
func (q blockedListAppealQuery) CountGP() int64 {
	c, err := q.Count(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// CountP returns the count of all BlockedListAppeal records in the query, and panics on error.
func (q blockedListAppealQuery) CountP(exec boil.Executor) int64 {
	c, err := q.Count(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all BlockedListAppeal records in the query.
func (q blockedListAppealQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count blocked_list_appeal rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q blockedListAppealQuery) ExistsG() (bool, error) {
	return q.Exists(boil.GetDB())
}

// ExistsGP checks if the row exists in the table using the global executor, and panics on error.
func (q blockedListAppealQuery) ExistsGP() bool {
	e, err := q.Exists(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// ExistsP checks if the row exists in the table, and panics on error.
func (q blockedListAppealQuery) ExistsP(exec boil.Executor) bool {
	e, err := q.Exists(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q blockedListAppealQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if blocked_list_appeal exists")
	}

	return count > 0, nil
}

// BlockedList pointed to by the foreign key.
func (o *BlockedListAppeal) BlockedList(mods ...qm.QueryMod) blockedListQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.BlockedListID),
	}

	queryMods = append(queryMods, mods...)

	query := BlockedLists(queryMods...)
	queries.SetFrom(query.Query, "`blocked_list`")

	return query
}

// BlockedEntry pointed to by the foreign key.
func (o *BlockedListAppeal) BlockedEntry(mods ...qm.QueryMod) blockedEntryQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.BlockedEntryID),
	}

	queryMods = append(queryMods, mods...)

	query := BlockedEntries(queryMods...)
	queries.SetFrom(query.Query, "`blocked_entry`")

	return query
}

// LoadBlockedList allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (blockedListAppealL) LoadBlockedList(e boil.Executor, singular bool, maybeBlockedListAppeal interface{}, mods queries.Applicator) error {
	var slice []*BlockedListAppeal
	var object *BlockedListAppeal

	if singular {
		object = maybeBlockedListAppeal.(*BlockedListAppeal)
	} else {
		slice = *maybeBlockedListAppeal.(*[]*BlockedListAppeal)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &blockedListAppealR{}
		}
		args = append(args, object.BlockedListID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &blockedListAppealR{}
			}

			for _, a := range args {
				if a == obj.BlockedListID {
					continue Outer
				}
			}

			args = append(args, obj.BlockedListID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`blocked_list`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load BlockedList")
	}

	var resultSlice []*BlockedList
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice BlockedList")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for blocked_list")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for blocked_list")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BlockedList = foreign
		if foreign.R == nil {
			foreign.R = &blockedListR{}
		}
		foreign.R.BlockedListAppeals = append(foreign.R.BlockedListAppeals, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BlockedListID == foreign.ID {
				local.R.BlockedList = foreign
				if foreign.R == nil {
					foreign.R = &blockedListR{}
				}
				foreign.R.BlockedListAppeals = append(foreign.R.BlockedListAppeals, local)
				break
			}
		}
	}

	return nil
}

// LoadBlockedEntry allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (blockedListAppealL) LoadBlockedEntry(e boil.Executor, singular bool, maybeBlockedListAppeal interface{}, mods queries.Applicator) error {
	var slice []*BlockedListAppeal
	var object *BlockedListAppeal

	if singular {
		object = maybeBlockedListAppeal.(*BlockedListAppeal)
	} else {
		slice = *maybeBlockedListAppeal.(*[]*BlockedListAppeal)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &blockedListAppealR{}
		}
		args = append(args, object.BlockedEntryID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &blockedListAppealR{}
			}

			for _, a := range args {
				if a == obj.BlockedEntryID {
					continue Outer
				}
			}

			args = append(args, obj.BlockedEntryID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`blocked_entry`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load BlockedEntry")
	}

	var resultSlice []*BlockedEntry
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice BlockedEntry")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for blocked_entry")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for blocked_entry")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BlockedEntry = foreign
		if foreign.R == nil {
			foreign.R = &blockedEntryR{}
		}
		foreign.R.BlockedListAppeals = append(foreign.R.BlockedListAppeals, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BlockedEntryID == foreign.ID {
				local.R.BlockedEntry = foreign
				if foreign.R == nil {
					foreign.R = &blockedEntryR{}
				}
				foreign.R.BlockedListAppeals = append(foreign.R.BlockedListAppeals, local)
				break
			}
		}
	}

	return nil
}

// SetBlockedListG of the blockedListAppeal to the related item.
// Sets o.R.BlockedList to related.
// Adds o to related.R.BlockedListAppeals.
// Uses the global database handle.
func (o *BlockedListAppeal) SetBlockedListG(insert bool, related *BlockedList) error {
	return o.SetBlockedList(boil.GetDB(), insert, related)
}

// SetBlockedListP of the blockedListAppeal to the related item.
// Sets o.R.BlockedList to related.
// Adds o to related.R.BlockedListAppeals.
// Panics on error.
func (o *BlockedListAppeal) SetBlockedListP(exec boil.Executor, insert bool, related *BlockedList) {
	if err := o.SetBlockedList(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetBlockedListGP of the blockedListAppeal to the related item.
// Sets o.R.BlockedList to related.
// Adds o to related.R.BlockedListAppeals.
// Uses the global database handle and panics on error.
func (o *BlockedListAppeal) SetBlockedListGP(insert bool, related *BlockedList) {
	if err := o.SetBlockedList(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetBlockedList of the blockedListAppeal to the related item.
// Sets o.R.BlockedList to related.
// Adds o to related.R.BlockedListAppeals.
func (o *BlockedListAppeal) SetBlockedList(exec boil.Executor, insert bool, related *BlockedList) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `blocked_list_appeal` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"blocked_list_id"}),
		strmangle.WhereClause("`", "`", 0, blockedListAppealPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BlockedListID = related.ID
	if o.R == nil {
		o.R = &blockedListAppealR{
			BlockedList: related,
		}
	} else {
		o.R.BlockedList = related
	}

	if related.R == nil {
		related.R = &blockedListR{
			BlockedListAppeals: BlockedListAppealSlice{o},
		}
	} else {
		related.R.BlockedListAppeals = append(related.R.BlockedListAppeals, o)
	}

	return nil
}

// SetBlockedEntryG of the blockedListAppeal to the related item.
// Sets o.R.BlockedEntry to related.
// Adds o to related.R.BlockedListAppeals.
// Uses the global database handle.
func (o *BlockedListAppeal) SetBlockedEntryG(insert bool, related *BlockedEntry) error {
	return o.SetBlockedEntry(boil.GetDB(), insert, related)
}

// SetBlockedEntryP of the blockedListAppeal to the related item.
// Sets o.R.BlockedEntry to related.
// Adds o to related.R.BlockedListAppeals.
// Panics on error.
func (o *BlockedListAppeal) SetBlockedEntryP(exec boil.Executor, insert bool, related *BlockedEntry) {
	if err := o.SetBlockedEntry(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetBlockedEntryGP of the blockedListAppeal to the related item.
// Sets o.R.BlockedEntry to related.
// Adds o to related.R.BlockedListAppeals.
// Uses the global database handle and panics on error.
func (o *BlockedListAppeal) SetBlockedEntryGP(insert bool, related *BlockedEntry) {
	if err := o.SetBlockedEntry(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetBlockedEntry of the blockedListAppeal to the related item.
// Sets o.R.BlockedEntry to related.
// Adds o to related.R.BlockedListAppeals.
func (o *BlockedListAppeal) SetBlockedEntry(exec boil.Executor, insert bool, related *BlockedEntry) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `blocked_list_appeal` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"blocked_entry_id"}),
		strmangle.WhereClause("`", "`", 0, blockedListAppealPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BlockedEntryID = related.ID
	if o.R == nil {
		o.R = &blockedListAppealR{
			BlockedEntry: related,
		}
	} else {
		o.R.BlockedEntry = related
	}

	if related.R == nil {
		related.R = &blockedEntryR{
			BlockedListAppeals: BlockedListAppealSlice{o},
		}
	} else {
		related.R.BlockedListAppeals = append(related.R.BlockedListAppeals, o)
	}

	return nil
}

// BlockedListAppeals retrieves all the records using an executor.
func BlockedListAppeals(mods ...qm.QueryMod) blockedListAppealQuery {
	mods = append(mods, qm.From("`blocked_list_appeal`"))
	return blockedListAppealQuery{NewQuery(mods...)}
}

// FindBlockedListAppealG retrieves a single record by ID.
func FindBlockedListAppealG(iD uint64, selectCols ...string) (*BlockedListAppeal, error) {
	return FindBlockedListAppeal(boil.GetDB(), iD, selectCols...)
}

// FindBlockedListAppealP retrieves a single record by ID with an executor, and panics on error.
func FindBlockedListAppealP(exec boil.Executor, iD uint64, selectCols ...string) *BlockedListAppeal {
	retobj, err := FindBlockedListAppeal(exec, iD, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindBlockedListAppealGP retrieves a single record by ID, and panics on error.
func FindBlockedListAppealGP(iD uint64, selectCols ...string) *BlockedListAppeal {
	retobj, err := FindBlockedListAppeal(boil.GetDB(), iD, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindBlockedListAppeal retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBlockedListAppeal(exec boil.Executor, iD uint64, selectCols ...string) (*BlockedListAppeal, error) {
	blockedListAppealObj := &BlockedListAppeal{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `blocked_list_appeal` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, blockedListAppealObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from blocked_list_appeal")
	}

	return blockedListAppealObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *BlockedListAppeal) InsertG(columns boil.Columns) error {
	return o.Insert(boil.GetDB(), columns)
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *BlockedListAppeal) InsertP(exec boil.Executor, columns boil.Columns) {
	if err := o.Insert(exec, columns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *BlockedListAppeal) InsertGP(columns boil.Columns) {
	if err := o.Insert(boil.GetDB(), columns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BlockedListAppeal) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no blocked_list_appeal provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(blockedListAppealColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	blockedListAppealInsertCacheMut.RLock()
	cache, cached := blockedListAppealInsertCache[key]
	blockedListAppealInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			blockedListAppealAllColumns,
			blockedListAppealColumnsWithDefault,
			blockedListAppealColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(blockedListAppealType, blockedListAppealMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(blockedListAppealType, blockedListAppealMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `blocked_list_appeal` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `blocked_list_appeal` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `blocked_list_appeal` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, blockedListAppealPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into blocked_list_appeal")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == blockedListAppealMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for blocked_list_appeal")
	}

CacheNoHooks:
	if !cached {
		blockedListAppealInsertCacheMut.Lock()
		blockedListAppealInsertCache[key] = cache
		blockedListAppealInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single BlockedListAppeal record using the global executor.
// See Update for more documentation.
func (o *BlockedListAppeal) UpdateG(columns boil.Columns) error {
	return o.Update(boil.GetDB(), columns)
}

// UpdateP uses an executor to update the BlockedListAppeal, and panics on error.
// See Update for more documentation.
func (o *BlockedListAppeal) UpdateP(exec boil.Executor, columns boil.Columns) {
	err := o.Update(exec, columns)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateGP a single BlockedListAppeal record using the global executor. Panics on error.
// See Update for more documentation.
func (o *BlockedListAppeal) UpdateGP(columns boil.Columns) {
	err := o.Update(boil.GetDB(), columns)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the BlockedListAppeal.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BlockedListAppeal) Update(exec boil.Executor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	blockedListAppealUpdateCacheMut.RLock()
	cache, cached := blockedListAppealUpdateCache[key]
	blockedListAppealUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			blockedListAppealAllColumns,
			blockedListAppealPrimaryKeyColumns,
		)

		if len(wl) == 0 {
			return errors.New("model: unable to update blocked_list_appeal, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `blocked_list_appeal` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, blockedListAppealPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(blockedListAppealType, blockedListAppealMapping, append(wl, blockedListAppealPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "model: unable to update blocked_list_appeal row")
	}

	if !cached {
		blockedListAppealUpdateCacheMut.Lock()
		blockedListAppealUpdateCache[key] = cache
		blockedListAppealUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q blockedListAppealQuery) UpdateAllP(exec boil.Executor, cols M) {
	err := q.UpdateAll(exec, cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllG updates all rows with the specified column values.
func (q blockedListAppealQuery) UpdateAllG(cols M) error {
	return q.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q blockedListAppealQuery) UpdateAll(exec boil.Executor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec(exec)
	if err != nil {
		return errors.Wrap(err, "model: unable to update all for blocked_list_appeal")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o BlockedListAppealSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o BlockedListAppealSlice) UpdateAllGP(cols M) {
	err := o.UpdateAll(boil.GetDB(), cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o BlockedListAppealSlice) UpdateAllP(exec boil.Executor, cols M) {
	err := o.UpdateAll(exec, cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BlockedListAppealSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), blockedListAppealPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `blocked_list_appeal` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, blockedListAppealPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "model: unable to update all in blockedListAppeal slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *BlockedListAppeal) UpsertG(updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(boil.GetDB(), updateColumns, insertColumns)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *BlockedListAppeal) UpsertGP(updateColumns, insertColumns boil.Columns) {
	if err := o.Upsert(boil.GetDB(), updateColumns, insertColumns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *BlockedListAppeal) UpsertP(exec boil.Executor, updateColumns, insertColumns boil.Columns) {
	if err := o.Upsert(exec, updateColumns, insertColumns); err != nil {
		panic(boil.WrapErr(err))
	}
}

var mySQLBlockedListAppealUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *BlockedListAppeal) Upsert(exec boil.Executor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("model: no blocked_list_appeal provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(blockedListAppealColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLBlockedListAppealUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	blockedListAppealUpsertCacheMut.RLock()
	cache, cached := blockedListAppealUpsertCache[key]
	blockedListAppealUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			blockedListAppealAllColumns,
			blockedListAppealColumnsWithDefault,
			blockedListAppealColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			blockedListAppealAllColumns,
			blockedListAppealPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("model: unable to upsert blocked_list_appeal, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "blocked_list_appeal", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `blocked_list_appeal` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(blockedListAppealType, blockedListAppealMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(blockedListAppealType, blockedListAppealMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to upsert for blocked_list_appeal")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == blockedListAppealMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(blockedListAppealType, blockedListAppealMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "model: unable to retrieve unique values for blocked_list_appeal")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRow(cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for blocked_list_appeal")
	}

CacheNoHooks:
	if !cached {
		blockedListAppealUpsertCacheMut.Lock()
		blockedListAppealUpsertCache[key] = cache
		blockedListAppealUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteG deletes a single BlockedListAppeal record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *BlockedListAppeal) DeleteG() error {
	return o.Delete(boil.GetDB())
}

// DeleteP deletes a single BlockedListAppeal record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *BlockedListAppeal) DeleteP(exec boil.Executor) {
	err := o.Delete(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteGP deletes a single BlockedListAppeal record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *BlockedListAppeal) DeleteGP() {
	err := o.Delete(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single BlockedListAppeal record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BlockedListAppeal) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("model: no BlockedListAppeal provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), blockedListAppealPrimaryKeyMapping)
	sql := "DELETE FROM `blocked_list_appeal` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "model: unable to delete from blocked_list_appeal")
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q blockedListAppealQuery) DeleteAllP(exec boil.Executor) {
	err := q.DeleteAll(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q blockedListAppealQuery) DeleteAll(exec boil.Executor) error {
	if q.Query == nil {
		return errors.New("model: no blockedListAppealQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec(exec)
	if err != nil {
		return errors.Wrap(err, "model: unable to delete all from blocked_list_appeal")
	}

	return nil
}

// DeleteAllG deletes all rows in the slice.
func (o BlockedListAppealSlice) DeleteAllG() error {
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o BlockedListAppealSlice) DeleteAllP(exec boil.Executor) {
	err := o.DeleteAll(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o BlockedListAppealSlice) DeleteAllGP() {
	err := o.DeleteAll(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BlockedListAppealSlice) DeleteAll(exec boil.Executor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), blockedListAppealPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `blocked_list_appeal` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, blockedListAppealPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "model: unable to delete all from blockedListAppeal slice")
	}

	return nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *BlockedListAppeal) ReloadG() error {
	if o == nil {
		return errors.New("model: no BlockedListAppeal provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *BlockedListAppeal) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadGP refetches the object from the database and panics on error.
func (o *BlockedListAppeal) ReloadGP() {
	if err := o.Reload(boil.GetDB()); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BlockedListAppeal) Reload(exec boil.Executor) error {
	ret, err := FindBlockedListAppeal(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BlockedListAppealSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("model: empty BlockedListAppealSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *BlockedListAppealSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *BlockedListAppealSlice) ReloadAllGP() {
	if err := o.ReloadAll(boil.GetDB()); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BlockedListAppealSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BlockedListAppealSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), blockedListAppealPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `blocked_list_appeal`.* FROM `blocked_list_appeal` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, blockedListAppealPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in BlockedListAppealSlice")
	}

	*o = slice

	return nil
}

// BlockedListAppealExistsG checks if the BlockedListAppeal row exists.
func BlockedListAppealExistsG(iD uint64) (bool, error) {
	return BlockedListAppealExists(boil.GetDB(), iD)
}

// BlockedListAppealExistsP checks if the BlockedListAppeal row exists. Panics on error.
func BlockedListAppealExistsP(exec boil.Executor, iD uint64) bool {
	e, err := BlockedListAppealExists(exec, iD)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// BlockedListAppealExistsGP checks if the BlockedListAppeal row exists. Panics on error.
func BlockedListAppealExistsGP(iD uint64) bool {
	e, err := BlockedListAppealExists(boil.GetDB(), iD)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// BlockedListAppealExists checks if the BlockedListAppeal row exists.
func BlockedListAppealExists(exec boil.Executor, iD uint64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `blocked_list_appeal` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if blocked_list_appeal exists")
	}

	return exists, nil
}
