// Code generated by go-bindata. DO NOT EDIT.
// sources:
// migration/000_init.sql (6.866kB)
// migration/001_cascade_reaction_delete.sql (1.081kB)
// migration/002_pinned_comments.sql (139B)
// migration/003_blocked.sql (1.489kB)
// migration/004_flagged.sql (492B)
// migration/005_creator_settings.sql (1.828kB)
// migration/006_new_settings.sql (886B)
// migration/007_indices.sql (344B)
// migration/008_comment_ranking.sql (619B)
// migration/009_comment_fiat.sql (754B)
// migration/010_shared_blocked_list.sql (5.927kB)
// migration/011_accepted_default.sql (161B)
// migration/012_appeals_for_all.sql (503B)
// migration/013_oauth.sql (236B)
// migration/014_overlap_settings.sql (2.022kB)
// migration/015_creationtime.sql (827B)
// migration/016_protected_settings.sql (302B)
// migration/017_comments_protected_flag.sql (141B)
// migration/018_comments_timestamp_idx.sql (133B)
// migration/019_comments_protected_idx.sql (161B)
// migration/020_members_only_settings.sql (308B)
// migration/021_comment_classification.sql (1.657kB)
// migration/022_comments_soft_delete.sql (126B)
// migration/023_claim_to_channel.sql (794B)
// migration/024_more_creator_settings.sql (285B)
// migration/025_more_creator_settings_rename.sql (224B)
// migration/migration.go (66B)

package migration

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _migration000_initSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\xdf\x8f\xda\xb8\x13\x7f\xe7\xaf\x98\xb7\x82\xbe\x0b\xda\x45\xdb\xaa\xd2\x57\xfb\x10\x82\xd9\x8d\x1a\x42\x2f\x09\x77\xed\x53\x14\x12\x17\xac\x06\x87\x4b\x4c\x5b\xfe\xfb\x93\x1d\xc7\xb1\x09\xec\xa6\xbb\x6c\x4f\xba\xbb\x3c\x91\xc9\xf8\x33\xe3\xf9\x3d\x0c\x87\xf0\xbf\x2d\x59\x17\x31\xc3\xb0\xdc\xf5\xf4\xd7\x80\xc5\x0c\x6f\x31\x65\x13\xbc\x26\xb4\x67\xfb\xc8\x0a\x11\x04\xf6\x03\x9a\x5b\xe0\xcc\xc0\x5b\x84\x80\x3e\x39\x41\x18\x40\x99\x27\x24\xce\xfe\x7f\xfa\x38\xa2\x69\xaf\x03\x70\x68\x4d\x5c\x74\x12\x77\x64\x3f\x58\x9e\x87\x5c\xe8\xf7\xe0\xfc\x93\x64\x31\xd9\x92\x14\xbe\xc5\x45\xb2\x89\x8b\xfe\xed\xf5\x00\xec\x85\xeb\x72\xec\x3d\xfb\xf2\x7e\xbb\xba\x8d\xf6\x94\x24\x79\x8a\xa3\x84\x08\x29\xde\xd2\x75\xaf\x1e\xc3\xa4\xf1\x16\x2b\xc0\xf1\xdb\x77\x2f\x47\xfc\xe8\x3b\x73\xcb\xff\x0c\x1f\xd0\x67\xe8\x4b\x95\x07\xbd\x01\x20\xef\xde\xf1\xd0\x9d\x43\x69\x3e\x9d\xc0\x14\xcd\xac\xa5\x1b\x82\xfd\x60\xf9\x01\x0a\xef\xa4\xb4\x5a\xfa\x5d\x5b\xfa\xeb\xd9\x7e\x31\x9f\x23\x2f\x7c\xc2\xf6\xf9\x96\x63\x92\x14\x84\xa5\xde\xdd\xbe\xdc\x50\xd9\xaa\x38\xd4\x2e\xbd\x98\x3f\x93\x4d\x4c\x29\xce\x3a\x42\xd6\x5e\x78\x12\x76\x95\xa7\x07\x60\xf8\x07\x7b\xb1\x82\xbb\xb8\xe8\x6e\xc7\xce\xfa\x95\x64\x4d\x63\xb6\x2f\x70\x05\x7b\x33\x7e\x7f\x39\x5c\x42\xd7\xac\x6c\x72\x64\x7c\x19\x64\x46\xb6\xb8\x64\xf1\x76\x07\x84\xb2\xfe\xcd\xcd\xa0\x9b\xf9\x48\xb9\x21\x69\x8a\x29\x30\x42\x0f\xe2\xe4\x40\xc9\x7c\x73\xfd\xe6\x27\x32\xb3\x0e\xe8\xc1\xa3\x67\x38\xaf\x64\x8d\x64\x6c\x45\x5f\xbe\x42\x5f\xc5\x59\xf7\xe3\x95\xe7\xc5\xe9\x3a\x08\x9e\x3e\xac\x27\x49\x5f\x7b\x79\xfc\xa4\xbd\xf0\x82\xd0\xb7\x1c\x2f\x3c\xa5\xfc\x6c\xe1\x23\xe7\xde\x93\x76\x50\x17\x01\x1f\xcd\x90\x8f\x3c\x1b\x05\xa0\xea\x71\x2d\x0e\x16\x1e\x4c\x91\x8b\x42\x04\xb6\x15\xd8\xd6\x14\x71\xca\xf2\xe3\xd4\x6a\x28\x3f\xab\x52\x63\x10\x43\x23\x65\x1c\x43\xa1\xba\x48\x35\x7e\xeb\xa2\xd2\xdf\x57\x77\x2d\x37\x44\x3e\x4c\xad\xd0\x9a\x58\x01\xaa\xef\x5c\xe4\x54\x18\x49\x57\xc3\xb2\x39\x67\x80\xc2\x3a\x9f\x4c\x8e\xb3\xb9\xf6\x4c\xc5\x96\x86\x36\x97\xe8\x2a\x32\x84\xaa\x06\x22\x02\x26\x22\x29\xfc\x6e\xf9\xfc\x76\xa2\x04\x9b\xb9\x2d\x7a\xae\xb8\x7a\x7f\xfc\xf6\xed\xe0\xb4\x11\x3a\x17\x5a\x3d\xb0\x64\x8c\xef\xbe\x9e\xe8\xc2\x51\xd5\x86\x7f\x56\xd8\x45\x0c\x54\x99\x5b\x76\xd8\xe1\x10\xca\x4d\xbe\xcf\x52\x58\x89\x72\x4d\xd7\x38\x05\x96\x57\x06\x79\x77\x3b\x10\x4c\x75\x8e\x90\x14\x40\x7d\x39\x2a\x91\x8f\x02\xdd\x5e\x57\x40\xbc\x66\x44\xca\x29\xca\x23\x2d\xa4\x24\xa6\x1c\x86\xee\xb3\xec\x0a\xca\x1c\x48\xfa\x15\xc8\x17\x60\x1b\x52\x9a\x52\x0a\x05\x5d\x9b\xbb\xd1\x91\x23\xb7\x3b\x80\x68\x9e\xf2\x09\xd1\xa7\x33\x51\xdf\xbd\xb3\xca\xba\x21\xc4\x36\xb6\x69\xcb\x6d\x9a\xa2\x64\x13\x6d\xb1\xcd\x37\x1c\xc2\x78\x2c\xae\x56\x42\x96\xd3\x35\x90\x12\x76\x45\x9e\x65\x07\xc0\x34\xdf\xaf\x37\x0a\xad\x6a\x85\xa0\x62\x9b\x37\x43\x13\x4f\xb0\x36\xbd\x0d\xc0\xf1\x42\x74\x8f\xfc\xb6\xc1\xd9\x06\x17\xf8\x4d\x09\x34\x87\xef\xf1\x01\xd8\x26\x66\x9c\xa6\x1d\xfe\x4e\xb2\x0c\xf0\x37\x5c\x40\x81\xe3\x64\x53\x2b\x19\x27\x0c\x17\xa5\x80\x21\x65\x24\xdb\x21\x00\x4c\x16\x0b\x17\x59\x9e\x52\x68\x66\xb9\x81\xac\xc9\x5a\x8e\xc8\x42\x1a\xc9\x04\x89\x78\x82\x9c\x6a\x8c\x22\x5d\xea\x28\xc3\x8c\x11\xba\x16\xc1\x01\x64\xbb\xcb\x08\x2e\x55\x50\x93\x12\x58\xbe\x83\x0c\x7f\xc3\xd9\xaf\xcb\xaf\xaa\xbc\x1a\xe9\x25\xb4\xb5\xa6\xd3\x93\xfd\x2d\x3a\xea\x27\xaa\x66\xa9\xda\xd0\xa5\x9d\xbc\xb6\xb2\x2a\xb2\x4d\x5d\xeb\xf2\xa1\xb9\xa6\xad\x5b\x5b\xff\x97\x95\x2e\xc7\x9b\xa2\x4f\xb2\x9c\x2b\xc1\x34\xc5\x3f\xb8\x20\xa5\x92\x51\x5e\xae\xb4\xb2\x35\xb8\x88\x74\xe9\xbc\xf3\xf2\x1b\xf7\x5e\x42\xb8\xe3\x05\xc8\x0f\x79\xce\x2e\xb4\x1e\x39\x6a\x82\xa5\xfa\x31\x52\x17\xae\x09\xbc\xa5\x0d\x7a\x01\x72\x91\x1d\x42\x32\x92\x53\xd3\x15\x24\xe2\x0b\xcc\xfc\xc5\xfc\x78\xd5\x4d\x9e\xa9\x23\x4f\x2b\x19\x34\x3c\x79\x23\xfb\x01\xd9\x1f\x02\xb8\x83\xeb\x0b\x5f\xda\x68\x5a\xf2\x6d\xd4\xd8\xf8\xca\xa0\x9b\x71\x60\x1e\x69\x5c\x64\xd0\x79\x5b\x30\x29\x2a\xfc\x4d\xb2\xaa\xe3\x6d\xb2\x28\xc8\x26\x59\xd5\x4f\x93\xac\x4a\xe5\xa0\xa7\xf9\xa9\x1e\x26\xd5\xe8\x9a\x8c\xb4\x21\x5b\xa3\xaa\x31\x59\xa3\x35\x17\x10\xaf\xf5\xdc\xaa\x91\x8e\x34\x57\x34\x4d\x6d\x41\x3b\xd2\x59\xd0\xea\x4d\xa7\x67\x04\x8f\x1c\x83\x93\xde\x1f\x0f\xc8\x47\x9a\x54\x70\x02\xd1\x5f\xfe\x0b\x82\x7f\x7b\x10\xc8\x41\xe3\xd2\xe5\xe5\xe6\x99\x80\x49\x81\x39\x95\xc5\xab\x0c\x8b\x41\x86\x91\x9c\x46\xec\xb0\xc3\x32\xaa\xaa\x39\x4e\x7f\x26\xce\x3d\x1f\x55\x96\x5e\xe0\xdc\x7b\x68\xaa\xae\x04\xd6\x32\x5c\x44\x8e\x67\xfb\x88\x1b\xa0\xb2\x53\xb5\x4d\xe8\x8f\x9a\xce\xf8\x72\x61\xce\x5d\x95\x32\x69\x14\xb3\x9a\x99\xb7\xd0\xd0\x99\xa3\x46\x88\xda\xbc\x96\xbe\xcf\x27\x25\xfe\x35\x08\xad\xf9\xc7\x0a\x62\xbf\x4b\x9f\x0f\xa1\xb7\xed\x36\xbc\xc0\x37\x86\x31\xb5\xe8\x2f\x3d\xe7\xb7\x65\xdd\x16\x49\xfa\x23\x12\xd7\xee\x57\x7d\xe7\x78\xc9\xfd\x45\x33\xd8\x49\xcf\x5e\xc6\xa9\xc6\xfa\x23\x9e\x33\x3b\x90\xb1\x83\x34\x8c\xa7\x17\x11\xb5\x06\x41\x8b\xd9\x44\x35\xc2\x54\x1c\x38\xa7\xfd\x3f\x2d\xac\xf6\x94\xfc\xb9\xc7\x51\xe3\x4d\xad\x70\x6b\x65\x5f\x15\xf9\x63\x4b\x49\xdc\x06\xb0\x3e\x7f\x12\xf1\xc9\xd3\xbb\xfd\x2a\x23\xe5\x46\x3f\xdd\x5d\x72\xe3\x94\x7e\xf3\xbb\xc5\xa6\x19\xbe\xdf\xfc\x96\x6c\x9d\x56\x89\xd6\xa0\xa8\x94\x04\x7d\xab\xf0\x51\x10\xfa\x8e\x1d\x9e\xfb\xe3\xcc\x94\xa5\x8d\xfa\x67\x64\x55\x3f\x35\xce\xe7\x4b\x6b\xd9\x52\x97\x69\x7c\xec\x9b\x9b\xd2\x79\x29\xaf\x58\x94\xfe\x0a\x00\x00\xff\xff\x94\xd4\xb0\xf5\xd2\x1a\x00\x00")

func migration000_initSqlBytes() ([]byte, error) {
	return bindataRead(
		_migration000_initSql,
		"migration/000_init.sql",
	)
}

func migration000_initSql() (*asset, error) {
	bytes, err := migration000_initSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migration/000_init.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc7, 0x8e, 0x72, 0xf2, 0x2d, 0x92, 0x7d, 0x20, 0x65, 0x7c, 0x92, 0xa2, 0xd0, 0x20, 0x43, 0x86, 0xfd, 0x73, 0xfb, 0x6a, 0xf2, 0xb1, 0xa9, 0x98, 0xd9, 0x52, 0x74, 0xbd, 0x80, 0x84, 0xca, 0xdd}}
	return a, nil
}

var _migration001_cascade_reaction_deleteSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x90\x31\x4f\x42\x31\x14\x85\xf7\xfe\x8a\x33\x3e\x63\x18\x84\xd1\xa9\xb4\x17\x43\x7c\x69\x49\x5b\x06\xa7\x97\xfa\xa8\xd8\x48\x0b\x21\x5d\xfc\xf7\xe6\xa9\x79\x22\x02\x13\x12\xee\xd6\x9c\x2f\xf7\xf4\xbb\x83\x01\x6e\x53\x5c\x6e\x7d\x09\x98\x6f\x18\xdb\x7d\xdb\xe2\x4b\x48\x21\x97\x71\x58\xc6\xcc\x78\xed\xc8\xc0\xf1\x71\x4d\xd8\x06\xdf\x96\xb8\xce\x90\x46\xcf\x30\xd1\x86\xa6\x0f\x0a\x8f\xf4\xd4\x27\x4d\x7c\x7e\x79\x6b\xee\xee\x0f\x6f\xa4\xbc\x38\x7b\xd7\xf0\x82\x5d\xa3\x33\x76\x31\x00\xe0\x52\x42\x68\x65\x9d\xe1\x53\xe5\xf6\xaf\xf8\x89\x74\xb3\xfb\xa3\xaa\x7d\xf5\x39\x87\x55\x13\x17\x37\x3d\xd0\x8d\xa1\x09\x19\x52\x82\x2c\xbe\x11\x54\xed\xca\xc7\xf4\x87\xd4\x0a\x92\x6a\x72\x04\xc1\xad\xe0\x92\xf6\xd3\xf9\x4c\xf2\x9f\xf4\xa2\xd2\xc3\x23\xd2\xeb\xd4\x6d\x3e\x29\xfd\x85\x1c\x67\xaf\x59\x7b\x74\x58\xbb\x87\xca\xfb\x26\x9c\x92\xff\x05\xa2\xfa\x37\xf5\x8f\x00\x00\x00\xff\xff\x52\xc4\x2c\xad\x39\x04\x00\x00")

func migration001_cascade_reaction_deleteSqlBytes() ([]byte, error) {
	return bindataRead(
		_migration001_cascade_reaction_deleteSql,
		"migration/001_cascade_reaction_delete.sql",
	)
}

func migration001_cascade_reaction_deleteSql() (*asset, error) {
	bytes, err := migration001_cascade_reaction_deleteSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migration/001_cascade_reaction_delete.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x1, 0xe4, 0xe0, 0xb9, 0x26, 0x1f, 0xfb, 0x1e, 0x4, 0x10, 0xb3, 0x74, 0x86, 0x91, 0x64, 0x84, 0x29, 0x67, 0xbe, 0xa5, 0xfa, 0xc1, 0x88, 0xb7, 0xca, 0x5, 0x64, 0x90, 0xe3, 0x99, 0xe3, 0x6d}}
	return a, nil
}

var _migration002_pinned_commentsSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd5\x55\xd0\xce\xcd\x4c\x2f\x4a\x2c\x49\x55\x08\x2d\xe0\xe2\x42\xe6\x07\x97\x24\x96\xa4\xe6\xa6\xe6\x95\x38\xa5\xa6\x67\xe6\x71\x39\xfa\x84\xb8\x06\x29\x84\x38\x3a\xf9\xb8\x2a\x24\xe7\xe7\x82\x24\x14\x1c\x5d\x5c\x14\x9c\xfd\x7d\x42\x7d\xfd\x14\x32\x8b\xe3\x0b\x32\xf3\xf2\x52\x53\x14\x42\x3c\xfd\x22\x3d\xfd\x42\x34\x0c\x35\x15\xfc\xfc\x43\x14\xfc\x42\x7d\x7c\x14\x5c\x5c\xdd\x1c\x43\x7d\x42\x14\x0c\xac\xb1\x5b\xe1\x9a\x97\x02\x08\x00\x00\xff\xff\xb3\xa8\xc3\x1c\x8b\x00\x00\x00")

func migration002_pinned_commentsSqlBytes() ([]byte, error) {
	return bindataRead(
		_migration002_pinned_commentsSql,
		"migration/002_pinned_comments.sql",
	)
}

func migration002_pinned_commentsSql() (*asset, error) {
	bytes, err := migration002_pinned_commentsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migration/002_pinned_comments.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x54, 0x39, 0xf1, 0x6a, 0xba, 0x33, 0x20, 0x27, 0x65, 0xb9, 0x4f, 0xc4, 0xee, 0xbd, 0xc9, 0xf3, 0xb4, 0xc1, 0xac, 0xc0, 0x22, 0xba, 0x16, 0x6b, 0xdf, 0x4f, 0x34, 0xee, 0x1b, 0x44, 0x62, 0x61}}
	return a, nil
}

var _migration003_blockedSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x53\x4d\x8f\x9b\x30\x10\xbd\xf3\x2b\xe6\x48\xd4\xac\xd4\x4a\x7b\xa8\x54\xf5\x40\x60\x92\x5a\x25\x26\x32\x46\xea\x9e\x90\xc1\xde\xad\xb5\xc6\xac\xa8\x77\xd5\xfc\xfb\x8a\x90\x8f\x22\x1c\x54\x29\xad\xca\xcd\x66\xde\x7b\xf3\xc6\xf3\xee\xee\xe0\x5d\xa3\x9f\x3a\xe1\x14\x14\x2f\x41\xf0\xfb\x39\x77\xc2\xa9\x46\x59\xb7\x52\x4f\xda\x06\x75\xa7\xfa\x5b\x27\x2a\xa3\xa0\x32\x6d\xfd\xac\x64\xa9\xac\xeb\xf6\x10\x06\x00\x00\x5a\x82\xf7\x5b\x91\x0d\xa1\x1c\x0a\x9a\x93\x0d\xc5\x04\x68\xc6\x81\x16\x69\x0a\x51\xc1\xb3\x92\xd0\x98\xe1\x16\x29\x5f\x1e\x48\x4e\xc4\xf5\x77\x61\xad\x32\xe5\x89\x34\xfe\x12\xb1\xf0\xfe\xfd\x02\x12\x5c\x47\x45\x3a\x30\x8c\x21\xd5\x7e\x8c\x9a\x81\xbc\x5a\xfd\xa6\xba\x1f\xc2\x98\x7d\x79\x84\x0f\xad\x66\x59\x7a\x2e\x5f\x47\x69\x8e\x43\xfd\xe0\x5d\x96\xc2\x8d\xad\x25\x11\x47\x4e\xb6\x78\xf1\x74\x02\xc7\x05\x63\x48\x79\xd9\xff\xcd\x79\xb4\xdd\x1d\x85\x5f\xe4\xad\x44\x90\x51\x28\x76\x3d\xc0\x27\x72\x50\xd9\x31\xb2\x8d\xd8\x03\x7c\xc5\x07\x08\xb5\x5c\x0c\xda\x84\x26\xf8\x0d\xb4\xfc\x79\xb2\x2c\x8c\x81\x70\x3a\xf0\xa5\x77\xa0\x4b\xcf\xcc\xae\x11\x97\xd5\xfe\x42\x3c\x62\x99\x20\xce\xac\x10\x5e\x17\x58\x67\x0c\xc9\x86\x1e\xfc\x3c\x3e\x9f\x5f\xcc\xd3\xfb\x02\x18\xae\x91\x21\x8d\x31\x87\xe3\x35\x84\xb5\x11\xba\xb9\xa8\xfb\xe9\x66\x9a\x9e\x27\x0d\x16\x80\x74\x43\x28\x7e\x26\xd6\xb6\xc9\xea\xb0\x78\x51\xcc\x91\x41\x8e\x1c\x5e\xdd\xe3\xc7\xa6\xba\x87\x38\x4b\xd3\xfe\xd1\x8e\xe7\xde\x79\xdd\x4a\x55\xd6\xfa\x93\x3f\x76\x68\xe5\x9f\x07\xb2\x69\xa5\xea\x84\x6b\x3b\x08\x83\x9b\x83\xd8\xb4\xd3\x00\xce\x84\xb0\x2f\x37\xea\x4d\x19\xbf\xde\x64\xa5\x3f\x2c\x83\xbf\x12\xa8\x7f\x1f\xa6\x69\x90\xae\xad\xe2\x78\x64\xff\x6f\x63\x7e\x05\x00\x00\xff\xff\xfb\x36\xd2\xa9\xd1\x05\x00\x00")

func migration003_blockedSqlBytes() ([]byte, error) {
	return bindataRead(
		_migration003_blockedSql,
		"migration/003_blocked.sql",
	)
}

func migration003_blockedSql() (*asset, error) {
	bytes, err := migration003_blockedSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migration/003_blocked.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x43, 0xe4, 0xf0, 0xae, 0x69, 0xc8, 0x9c, 0x38, 0x0, 0x7f, 0xe6, 0xd9, 0xfd, 0x3, 0x38, 0x61, 0x2a, 0x18, 0x50, 0x6b, 0x7b, 0xd3, 0x73, 0x6d, 0x36, 0xb7, 0x83, 0xf6, 0x31, 0x80, 0x5a, 0x4d}}
	return a, nil
}

var _migration004_flaggedSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\xcf\xb1\xaa\xc2\x30\x18\xc5\xf1\xbd\x4f\x71\xc6\x96\x4b\xe1\x3a\x3b\xa5\x26\x42\x21\xa6\xa0\x5f\x40\xa7\x12\xda\xcf\x10\xb0\xa9\xd4\x0c\x3e\xbe\x38\x59\xc1\x49\x05\xc7\xc3\x19\x7e\xfc\xcb\x12\x7f\x43\xf0\x93\x4b\x0c\x7b\xce\xb2\xf9\xde\x25\x97\x78\xe0\x98\x2a\xf6\x21\x66\x42\x93\xda\x82\x44\xa5\x15\xba\x71\xb8\x1f\x10\x52\x62\xd5\x68\xbb\x31\x08\x97\xf6\x78\x72\xde\x73\x0f\xaa\xcd\xa1\x36\x94\x2f\x0a\x98\x86\x60\xac\xd6\x90\x6a\x2d\xac\x26\xfc\x2f\x5f\x1b\x2a\xf6\x6f\xe9\xb5\x91\x6a\x3f\xc3\xdb\xd0\x5f\x91\x3f\x76\xf1\x05\x6f\x62\xd7\xa5\x30\xc6\x1f\xe5\x3e\xf1\x1f\xf4\xde\x02\x00\x00\xff\xff\xc0\xf0\x8f\xc2\xec\x01\x00\x00")

func migration004_flaggedSqlBytes() ([]byte, error) {
	return bindataRead(
		_migration004_flaggedSql,
		"migration/004_flagged.sql",
	)
}

func migration004_flaggedSql() (*asset, error) {
	bytes, err := migration004_flaggedSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migration/004_flagged.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x3e, 0xb3, 0xf7, 0x98, 0x36, 0x9e, 0xb5, 0x54, 0x38, 0x88, 0xfc, 0xcf, 0xad, 0xcd, 0x88, 0x27, 0x77, 0x9c, 0x4f, 0x3f, 0x2, 0x67, 0x39, 0x99, 0x1, 0x7, 0x7b, 0x32, 0xf7, 0x2c, 0xbf, 0x6f}}
	return a, nil
}

var _migration005_creator_settingsSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x95\xc1\x6f\x9b\x30\x14\xc6\xef\xfc\x15\xef\x48\xb4\x55\xea\xa1\x87\x49\xd3\x0e\x0e\xbc\x64\x68\xc4\x44\xc6\x48\xed\xc9\xa2\xb1\x9b\x59\x8b\x0d\x02\xa3\xed\xcf\x9f\x20\x64\xd0\x40\xd6\x46\xca\xa1\x39\x85\xd8\xdf\xfb\x9e\x9f\x7f\x5f\xb8\xbb\x83\x4f\x46\xef\xab\xdc\x29\xc8\x4a\xcf\x1b\x3f\xa7\x2e\x77\xca\x28\xeb\x96\x6a\xaf\xad\x17\x30\x24\x1c\x81\x93\x65\x8c\xb0\xab\x54\xee\x8a\x4a\xd4\xca\x39\x6d\xf7\xe0\x7b\x00\x00\x5a\xc2\xc5\xcf\x32\x5a\x47\x94\x43\x46\xd3\x68\x4d\x31\x04\x9a\x70\xa0\x59\x1c\x03\xc9\x78\x22\x22\x1a\x30\xdc\x20\xe5\x9f\xbb\x42\xa7\xf2\xbb\x9f\xb9\xb5\xea\x20\xb4\x84\xe0\x3b\x61\xfe\xc3\xfd\xe2\x9f\xb0\xdf\x59\x98\xb6\xc5\x5a\x28\x9b\x3f\x1f\xd4\xab\x06\x96\x49\x12\x43\x88\x2b\x92\xc5\x1c\x56\x24\x4e\xf1\xa8\x31\xda\x0a\xa7\x4b\x91\x1b\x53\x34\xd6\x89\xbe\xc6\x6c\x9b\x27\xf9\xe0\x78\xae\xae\x9b\x52\x75\x9d\xba\x77\xa9\x1b\xa7\xa4\xf8\x5d\x54\xb2\x9e\x8c\x88\xe3\x23\x9f\x91\x74\xc3\x50\x52\xe4\x6e\x3a\xd5\x90\x70\xe4\xd1\x06\x87\x71\x9e\xf4\x41\xc6\x18\x52\x2e\xda\xd5\x94\x93\xcd\xf6\x58\xac\x29\xe5\x2d\x8a\x41\x42\x21\xdb\xb6\x82\x39\xa3\xce\x69\xcb\xa2\x0d\x61\x4f\xf0\x03\x9f\xc0\xd7\x72\x71\xf4\x8f\x68\x88\x8f\xa0\xe5\x1f\x31\xb9\x39\xff\xfc\x97\x5e\xb2\x4a\x18\x46\x6b\xda\x15\x7a\xf9\x25\xce\xd8\x00\x7f\x0a\xcb\x02\x18\xae\x90\x21\x0d\x30\x85\x61\xdf\x21\xd7\xa6\x5d\xf5\x16\x80\x74\x1d\x51\xfc\x16\x59\x5b\x84\xcb\x8e\x2d\x12\x70\x64\x90\x22\x87\xc6\xbd\x7c\x31\xcf\x0f\x10\x24\x71\xdc\x1e\xb0\x7f\x16\x8d\xd5\xbb\x42\x2a\xb1\xd3\x5f\xe7\x73\x82\x56\x7a\xef\x8f\x90\x54\x07\xb5\xef\xee\xc2\x14\x52\x55\xed\x11\xfa\x18\x4d\x73\x74\x55\x78\xc0\x14\x72\x9c\x1c\xb8\x94\x9d\x2b\x62\x06\xa5\xaa\x8c\xae\xeb\xc2\xd6\x6f\xb5\x74\x62\xe6\x7e\x6c\x32\x26\xee\x6a\x66\xa7\xd0\xde\x96\xd4\x0b\xa8\x8e\x58\xed\x4f\xaf\xdb\xe3\xfb\xc3\x28\x4e\x1b\xcf\x08\x1d\xcd\x1f\xfc\xd7\x97\xf1\x06\x99\xf3\xf5\x3e\x38\xf1\xff\x01\x9e\xc4\xad\x45\xff\xca\xe8\xbb\x22\x61\xd8\x1a\x65\x1b\x0a\xba\x16\x75\x99\x1b\xa3\xaa\xee\xbf\x1a\x09\x1d\xe8\xb9\xb1\xe3\x70\x97\x23\x53\x7f\xf8\xbe\xb8\xec\xf7\x37\x00\x00\xff\xff\x5c\xd4\x68\x32\x24\x07\x00\x00")

func migration005_creator_settingsSqlBytes() ([]byte, error) {
	return bindataRead(
		_migration005_creator_settingsSql,
		"migration/005_creator_settings.sql",
	)
}

func migration005_creator_settingsSql() (*asset, error) {
	bytes, err := migration005_creator_settingsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migration/005_creator_settings.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x9e, 0xc6, 0x53, 0x2e, 0xc2, 0x40, 0x87, 0xfe, 0x48, 0x45, 0xf7, 0x35, 0x5c, 0x9d, 0xaa, 0xd5, 0x7a, 0x5, 0x3b, 0x2a, 0xef, 0x33, 0x8c, 0xbd, 0x2c, 0xa9, 0x5b, 0x7, 0x91, 0x55, 0x51, 0x9c}}
	return a, nil
}

var _migration006_new_settingsSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\xd2\x41\x4b\xc3\x30\x14\x07\xf0\x7b\x3f\xc5\x3b\xb6\xc8\x60\x78\xf1\xe0\x29\x6d\x62\x57\x88\x11\xba\x46\xbc\x85\xd0\x3e\x6a\xc0\x24\xa5\x7d\xc3\x7d\x7c\x99\x9b\x10\x51\x8f\xb3\xa7\xf0\xfe\x81\xfc\x7f\x24\xd9\x6c\xe0\xc6\xbb\x71\xb6\x84\xa0\xa7\x2c\x4b\xe7\x3d\x59\x42\x8f\x81\x4a\x1c\x5d\xc8\x98\xec\x44\x0b\x1d\x2b\xa5\x80\x7e\x46\x4b\x71\x36\x0b\x12\xb9\x30\x42\xb5\x63\xaa\x16\x50\x3d\x49\xfd\xa8\xc0\xbb\x60\xc8\x4d\xc6\x7a\x1f\x0f\x81\x4c\x1f\xfd\xe9\x98\x24\xff\x16\x97\x4d\xdd\xa8\x2e\xbf\xdd\x16\xa0\xd5\xbe\xa9\x95\xe0\xa0\xb4\x94\xc0\xc5\x03\xd3\xb2\xfb\x1c\xee\x7f\xa7\x89\x30\x5c\x09\xbd\x1c\x26\x9c\x4d\xff\x6a\x7f\xb8\x93\x9d\xb5\xe8\x8c\xf3\x2f\xf7\xf2\x16\xdf\x8d\x8f\x03\x9a\x13\x73\xb4\xd3\xff\xa1\x2e\xef\x97\x60\xce\x37\xb4\xa6\x80\x8e\xc6\x0d\xf0\xcc\xda\x6a\xc7\xda\xfc\x6e\x5b\x5c\xbd\xb8\x51\x5c\xbc\x80\x1b\x8e\x97\xff\x01\xf9\x79\x2d\xfe\xee\xf9\x08\x00\x00\xff\xff\xa7\xb7\xde\xa3\x76\x03\x00\x00")

func migration006_new_settingsSqlBytes() ([]byte, error) {
	return bindataRead(
		_migration006_new_settingsSql,
		"migration/006_new_settings.sql",
	)
}

func migration006_new_settingsSql() (*asset, error) {
	bytes, err := migration006_new_settingsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migration/006_new_settings.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x1f, 0xb8, 0x46, 0x86, 0x88, 0x7f, 0x33, 0x77, 0xc4, 0xa7, 0x97, 0x56, 0xe8, 0x17, 0xd1, 0x54, 0xf3, 0x53, 0x4f, 0x5c, 0x42, 0x6d, 0xad, 0xcf, 0x6, 0x50, 0x69, 0x4c, 0x32, 0xa7, 0x81, 0x8a}}
	return a, nil
}

var _migration007_indicesSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\xce\xc1\xca\x82\x40\x10\xc0\xf1\xbb\x4f\x31\x47\x3f\xbe\xf5\x09\xc2\xc3\xaa\x4b\x49\xdb\x1a\x66\xd0\x6d\xd9\xdc\xc5\x06\xdc\x4d\x74\x0e\xf5\xf6\x21\x58\x74\xe8\x56\xb7\x99\xf9\x33\xf0\x4b\x12\xf8\xf7\xd8\x8d\x86\x1c\x1c\x87\x28\x7a\xdf\x0f\x64\xc8\x79\x17\x28\x73\x1d\x86\x88\xcb\x46\xd4\xd0\xf0\x4c\x0a\x68\xaf\x7e\x0e\xc0\x8b\x02\x4a\x55\x88\x13\xa0\xbd\xe9\xe5\xaa\x09\xbd\x9b\xc8\xf8\x01\xe2\xfe\x3c\xde\x75\xdb\x1b\xf4\x1a\x2d\x7b\x85\x3f\x06\x5c\xae\xab\xba\x6c\x36\xbb\xb4\x54\x7b\xc9\x73\xc1\x40\x56\xf9\x36\x55\x95\x12\xab\xcf\x0e\x11\xec\x8f\x84\x17\xb4\xd6\x05\x88\x71\x5a\x46\xf6\x7c\x98\x99\xf0\xbd\xf3\x11\x00\x00\xff\xff\x4d\x54\x99\x6a\x58\x01\x00\x00")

func migration007_indicesSqlBytes() ([]byte, error) {
	return bindataRead(
		_migration007_indicesSql,
		"migration/007_indices.sql",
	)
}

func migration007_indicesSql() (*asset, error) {
	bytes, err := migration007_indicesSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migration/007_indices.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xeb, 0x77, 0x1c, 0x99, 0x83, 0xd, 0x58, 0x59, 0xf8, 0x79, 0x8d, 0xd7, 0x13, 0x1b, 0x7, 0x70, 0x1a, 0xdd, 0x56, 0xa4, 0xe2, 0x8e, 0xf, 0xd9, 0x65, 0x4a, 0xfb, 0x62, 0xa5, 0xea, 0x44, 0x7c}}
	return a, nil
}

var _migration008_comment_rankingSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x90\xcb\x4a\x04\x31\x10\x45\xf7\xfd\x15\xb5\x54\xec\xf9\x02\x99\x45\xa6\x3b\x6a\xb0\x26\x91\x31\x01\x77\x21\xa6\xc3\x10\xe8\x3c\x48\x97\xe2\xfc\xbd\x08\x82\x03\xed\xce\xc7\xb2\xaa\xa0\xee\xb9\x67\xb3\x81\xab\x14\x8f\xcd\x51\x00\x53\xbb\xee\x7c\x7e\x24\x47\x21\x85\x4c\xbb\x70\x8c\xb9\x63\xa8\xf9\x01\x34\xdb\x21\x07\x5f\xd2\xc7\x01\xd8\x38\xc2\xa0\xd0\xec\x25\xd4\x52\x5f\x66\xd7\x22\x9d\xec\xe2\x4b\x0b\x20\xa4\x86\x91\xdf\x30\x83\x1a\xa4\x41\xbc\xfe\xfe\x39\xcf\xd3\x4f\x62\x7d\xc9\xd4\xca\x6b\x68\xcb\x3f\xe5\x0a\x39\xf2\x27\x88\xd3\x9b\xfd\xdc\xda\xaf\xe6\x70\x31\x3f\xb7\x93\xf5\xb3\x8b\xc9\xc6\xa9\x5f\x49\xe9\x81\x62\x0a\x0b\xb9\x54\x2f\x7b\x60\x78\xab\x0e\x42\xdf\xed\xb7\x42\x3e\x20\x1b\x78\x0f\xa8\x86\xfb\xad\x54\x92\xff\x39\xf5\x99\xb8\x15\xf6\x4a\xea\x6f\x70\xbf\x07\x00\x00\xff\xff\xa0\xc1\x5c\xb4\x6b\x02\x00\x00")

func migration008_comment_rankingSqlBytes() ([]byte, error) {
	return bindataRead(
		_migration008_comment_rankingSql,
		"migration/008_comment_ranking.sql",
	)
}

func migration008_comment_rankingSql() (*asset, error) {
	bytes, err := migration008_comment_rankingSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migration/008_comment_ranking.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x56, 0x40, 0xae, 0x42, 0x47, 0x94, 0xe7, 0x62, 0x1b, 0x9c, 0xf1, 0xff, 0x86, 0x80, 0xf5, 0xa5, 0x17, 0xd0, 0xee, 0x2, 0x0, 0xa6, 0xf0, 0x79, 0xe5, 0x7f, 0xe4, 0xc8, 0x8e, 0x80, 0xc1, 0xee}}
	return a, nil
}

var _migration009_comment_fiatSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x91\xb1\x4e\xc3\x30\x10\x86\xf7\x3c\xc5\x3f\xa6\x22\x5d\x90\x98\x50\x07\x27\x31\x34\xe2\x6a\xa3\xe0\x20\x36\xcb\x4d\xdc\xca\x52\xec\x56\x89\x2b\xd1\xb7\x47\x85\x50\x18\xd8\x28\x12\x9b\xfd\x9f\x74\xdf\x77\x77\xf3\x39\xae\xbc\xdb\x0e\x26\x5a\x34\xfb\x24\xf9\xfe\x7f\x8a\x26\x5a\x6f\x43\xcc\xed\xd6\x85\x84\x91\xe2\x35\x14\xcb\x89\xa3\xdd\xf9\x53\x01\xac\x2c\x51\x48\x6a\x56\x02\x6e\xd4\x1b\x67\x22\x72\x29\x09\x42\x2a\x88\x86\x08\x25\xbf\x63\x0d\x29\x6c\x4c\x3f\xda\xdb\x9f\xdb\xf3\xd0\xfd\x06\xdc\x1e\x86\xc1\x86\xf6\x88\x67\x56\x17\x4b\x56\xa7\xd7\x37\xb3\x33\xf7\x24\x71\x61\x6c\x25\x4a\xfe\x02\xd7\xbd\xea\x29\x7d\x9f\x5b\x1b\xbf\x3b\x84\x88\x74\xda\x43\x86\x8f\x20\x3b\xfb\xcd\x32\x30\xba\x97\x75\xa5\x96\xab\x45\x25\x1e\x89\x15\x3c\x03\xc9\xe2\x61\x21\xa4\xe0\x7f\x6e\xf9\x79\xa0\x2f\xc3\xe8\xbc\x1d\xa3\xf1\xfb\x7f\xa2\xa6\xd7\x47\xdd\xf6\xc6\x79\xa4\xfd\x7a\x98\xde\xda\x75\x19\x2e\xa8\xfc\x16\x00\x00\xff\xff\x8b\x7a\x18\xa2\xf2\x02\x00\x00")

func migration009_comment_fiatSqlBytes() ([]byte, error) {
	return bindataRead(
		_migration009_comment_fiatSql,
		"migration/009_comment_fiat.sql",
	)
}

func migration009_comment_fiatSql() (*asset, error) {
	bytes, err := migration009_comment_fiatSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migration/009_comment_fiat.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa, 0xe, 0x98, 0x2, 0xca, 0xf, 0x31, 0xcc, 0x38, 0xa, 0x19, 0x86, 0xc0, 0x69, 0x3a, 0xbc, 0x38, 0x88, 0xd9, 0x70, 0x9b, 0x86, 0x0, 0x43, 0xf3, 0xcb, 0xea, 0x63, 0x78, 0xab, 0xb, 0x4f}}
	return a, nil
}

var _migration010_shared_blocked_listSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x58\x5f\x73\xa3\x36\x10\x7f\xe7\x53\xec\x23\x9e\x72\x33\x6d\x27\xd7\xe9\x4c\xa7\x0f\x04\x14\x1f\x53\x2c\xa7\x18\x3a\x77\x4f\x8c\x0c\x6b\x9f\x1a\x10\x14\xe4\x34\xfe\xf6\x1d\x30\xd8\xe2\x4f\x6c\xf7\x12\xdb\x6d\x1e\x12\x39\xda\x5d\xed\xbf\xdf\x4f\x6b\x7d\xf8\x00\xdf\xa5\x7c\x5d\x30\x89\x10\xe4\x9a\xa6\x7e\x5e\x48\x26\x31\x45\x21\xef\x71\xcd\x85\x66\x79\xc4\xf4\x09\xf8\xe6\xbd\x4b\x60\x99\x64\xd1\x13\xc6\x61\xc2\x4b\x09\xba\x06\x3c\x86\x91\x9f\x7b\x67\xea\x50\x1f\x02\xba\x70\xa6\x94\xd8\x40\xe7\x3e\xd0\xc0\x75\xc1\x0c\xfc\x79\xe8\x50\xcb\x23\x33\x42\x7d\x43\x83\xe8\x2b\x13\x02\x93\xb0\x6b\xc7\xfa\x64\x7a\xfa\xdd\xf7\x93\xbd\xa2\xa1\x81\x60\x29\x0e\x4f\xa2\x7f\x98\x5e\x2d\xfd\xe3\xc7\x8f\x1d\xf1\x88\x49\x5c\x67\xc5\xf6\x4c\xf1\x18\xcb\xa8\xe0\xb9\xe4\x99\x50\xc4\x67\xc4\x76\x82\x99\x4f\x3e\xfb\xaa\x6c\x8a\xe9\x12\x8b\x90\x8b\x67\x2e\x31\x44\xc1\x96\x09\xc6\x70\x3f\x9f\xbb\x60\x93\x07\x33\x70\x7d\x78\x30\xdd\x05\x31\x34\x28\x65\xc1\x9f\x30\xcc\x04\x1e\x4b\x4f\xab\xd5\xd8\x6f\x94\xe4\xdf\xd9\x37\x28\x7d\x2d\x10\xcf\x56\x6a\x43\x78\xc9\x79\xc1\xf6\xb1\x9f\x50\x8a\x36\x45\x89\xe1\x9f\xac\x08\x59\x9a\x6d\x84\x3c\xeb\xa4\xa8\x40\x26\x31\x0e\x99\x54\x63\xb2\x4d\x9f\xf8\xce\x8c\x1c\x1a\xa4\x55\xb3\x02\xcf\x23\xd4\x0f\xab\xdd\x85\x6f\xce\x1e\x0d\x0d\x36\x79\xfc\x36\x1b\x30\xa7\x10\x3c\x56\x0a\x63\xf6\x35\x78\xf4\x9c\x99\xe9\x7d\x81\xdf\xc8\x17\xd0\x79\x3c\x31\x34\x70\xa8\x4d\x3e\x03\x8f\x5f\x42\xb5\xf3\xc3\xba\x19\xf5\xea\x77\x57\x68\xdf\x75\x7a\xbb\xea\xed\x1f\xd2\xa0\x1f\xd6\x5d\x19\x25\x4c\xfd\xb0\xae\x64\x1e\xe6\x1e\x71\xa6\xb4\xf6\x6f\xf5\x14\x36\xd8\x01\xfd\x00\xa2\x09\x78\xe4\x81\x78\x84\x5a\x64\x01\x87\xfd\x84\xf1\xb4\xda\xd5\x26\x40\xe8\xd4\xa1\xe4\x57\x47\x88\xcc\xbe\xaf\x81\x66\x5a\x3e\xf1\x60\x41\x7c\xd8\xc8\xd5\xcf\xe9\xf2\x0e\xac\xb9\xeb\x56\x49\x6a\x3e\x87\x1b\xc1\xa3\x2c\xc6\x30\xe2\xbf\x8c\x13\x05\x11\xf1\xb7\x51\x48\x03\x22\xd0\xb5\x11\x22\x39\x9b\x45\xba\x16\xe3\x63\xba\x86\xb6\x3b\xb1\x08\x15\xe6\x19\xa1\x9b\x9d\x54\x7c\x42\x8a\x45\x11\xe6\x12\x55\xd7\xc7\x68\x20\xc5\xb2\x64\xeb\x0e\x05\x8c\x32\xcb\x08\x48\xfe\x15\x42\x46\x00\xf2\x7e\xe8\x18\x82\x23\xa0\xce\xef\x01\xd9\xf5\xac\xe0\x7f\x6d\x70\x5f\xcd\x5e\x41\x8c\x61\xce\x8d\x61\x82\x27\x86\x76\x06\x50\xce\xc0\x49\x0f\x26\xdd\x2b\xab\xe7\x5a\x07\x30\x5d\xc9\xda\xa3\xd7\x20\x37\x8c\xe8\x04\xf4\x06\xa6\x7a\x09\x68\x4d\xc6\xe7\x9b\xfc\xef\xa1\x99\xe5\x39\xb2\x64\x74\x2e\x38\x7f\x24\x18\xa0\xf9\x75\x2c\xef\x65\x51\xc8\x62\x5b\x09\x1f\x91\x6d\x9c\x3b\x75\xbb\x17\x58\xe6\x99\x28\xf1\x84\x18\xcb\xf3\x22\x7b\x56\xa0\xdf\x01\x7e\x23\x84\x65\xc4\x12\xa6\x10\xc4\xe8\x90\x20\x5f\x7a\xe3\x4f\x3b\xa4\xfc\x74\x37\x39\x79\x8f\xbe\xf1\x0a\xbd\xd6\xed\xd9\x76\x46\x9f\x19\xf6\x79\xec\x8a\x1f\x12\x37\xd4\xd8\xef\x5d\xf0\x6a\x7d\x13\x67\xbc\x66\xac\x6e\xd2\x83\xb5\xb6\x67\x47\xcd\x35\xb2\x37\x44\xb9\xe9\x56\x47\xec\x40\xde\x72\x8f\x69\xdb\xd5\x41\xc1\x8c\x8e\xdd\xe2\x63\xf8\x53\xdb\xf7\x9d\x1d\x19\xe5\xd3\x7e\xb1\x5a\xc7\x8e\xd7\xac\x6a\x6d\x9b\xb8\xc4\x27\x75\x4e\x6b\x1c\x28\xdd\x6e\x2e\x2c\xd3\x26\xd7\xc8\xe3\x2d\x13\xf8\x86\x9e\xbf\x56\xfe\xba\xe8\xb8\x5d\x16\x87\x7e\xfc\xdf\x73\x69\x7d\x32\xe9\x94\xf4\xd3\xb9\xdc\xaa\x03\x70\xcd\xaa\xd9\xf8\xe4\x7c\xf1\x04\x37\x9e\xc5\x98\xe0\xba\xe6\xed\x34\x8b\xb1\xb8\x9d\x3f\xbd\x82\xa7\x59\x0c\xfa\x71\xe7\x4e\x4c\x73\x4a\xdd\x3d\xb2\xf0\x3d\xc7\xf2\xaf\x8b\xa1\x02\x59\x99\x09\x75\xdc\xb9\x56\x51\xb3\xd5\x0a\x45\xcc\xc5\x3a\x8c\xb2\xb4\xd2\xdd\x97\xb2\x3f\x01\x5d\xa3\x94\x7b\x6f\x40\x1f\x73\xac\x5b\xc6\xdd\xbf\x41\x57\xf7\x6f\x46\x86\x83\xc7\x8a\x2e\xfd\x28\xdf\xbe\x86\x50\x36\xfa\x73\xd6\x46\xf0\x67\x2c\x4a\x96\x24\xdb\xd6\xdc\xe4\x92\x4d\x50\x3f\x42\x6d\x0f\x03\xe9\xc5\xcb\xae\x4c\x9b\xbb\xa3\xf5\xdd\xdf\x8b\x46\xb9\x7b\xa6\x2b\xa1\xba\x9d\xda\x08\x7f\xb8\x70\x78\xed\x99\x7a\xb3\x78\x8f\x00\xdb\x06\x2a\x51\xca\x0a\x2a\x4a\x88\x83\xf7\xc1\x4b\x8f\x34\xaf\xbb\xc2\xcb\x70\xc5\x13\x89\x45\xd9\x79\xa6\x25\x26\x3d\xd3\x89\x7f\x02\x00\x00\xff\xff\xeb\xe8\xc4\x31\x27\x17\x00\x00")

func migration010_shared_blocked_listSqlBytes() ([]byte, error) {
	return bindataRead(
		_migration010_shared_blocked_listSql,
		"migration/010_shared_blocked_list.sql",
	)
}

func migration010_shared_blocked_listSql() (*asset, error) {
	bytes, err := migration010_shared_blocked_listSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migration/010_shared_blocked_list.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xbc, 0x6e, 0x3d, 0x5c, 0x99, 0x7b, 0x1a, 0x89, 0x7d, 0x99, 0x3f, 0x76, 0xb9, 0xb, 0x8c, 0xe5, 0x4, 0xdf, 0x63, 0x65, 0x5c, 0x7f, 0x36, 0xd6, 0x4c, 0x38, 0x3e, 0x76, 0xec, 0xfb, 0xba, 0x4d}}
	return a, nil
}

var _migration011_accepted_defaultSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd5\x55\xd0\xce\xcd\x4c\x2f\x4a\x2c\x49\x55\x08\x2d\xe0\xe2\x42\xe6\x07\x97\x24\x96\xa4\xe6\xa6\xe6\x95\x38\xa5\xa6\x67\xe6\x71\x39\xfa\x84\xb8\x06\x29\x84\x38\x3a\xf9\xb8\x2a\x24\xe5\xe4\x27\x67\xa7\xa6\xc4\xe7\x64\x16\x97\xc4\x67\xe6\x95\x65\x96\xa4\x2a\x38\x7b\x38\xfa\xb9\xbb\x2a\x38\xfb\xfb\x84\xfa\xfa\x29\x24\x26\x27\xa7\x16\x94\xa4\xa6\x20\x18\x21\x9e\x7e\x91\x9e\x7e\x21\x1a\x86\x9a\x0a\x7e\xa1\x3e\x3e\x0a\x2e\xae\x6e\x8e\xa1\x3e\x21\x60\x8e\x35\x76\x8b\x5d\xf3\x52\x00\x01\x00\x00\xff\xff\x52\xb0\x3d\xa3\xa1\x00\x00\x00")

func migration011_accepted_defaultSqlBytes() ([]byte, error) {
	return bindataRead(
		_migration011_accepted_defaultSql,
		"migration/011_accepted_default.sql",
	)
}

func migration011_accepted_defaultSql() (*asset, error) {
	bytes, err := migration011_accepted_defaultSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migration/011_accepted_default.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd2, 0xbe, 0x1e, 0x8c, 0x9c, 0xf8, 0x64, 0xe, 0xdd, 0x88, 0x6, 0x38, 0x12, 0x93, 0xec, 0xf2, 0xc3, 0x75, 0xf7, 0x2c, 0x72, 0xd6, 0x6c, 0x5d, 0x65, 0x33, 0xb4, 0x9a, 0xc2, 0x7d, 0xc5, 0x3d}}
	return a, nil
}

var _migration012_appeals_for_allSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x90\x3f\x4b\x04\x31\x10\xc5\xfb\xfd\x14\x53\xee\x22\x07\x6a\x6b\x95\x4d\x66\x63\x30\x4e\x24\x7f\x0a\xab\x90\x33\xf1\x08\xb7\xb7\x2e\x9a\xef\x8f\x60\xe5\xea\x71\x8d\x58\xfe\xe0\x31\xf3\x7b\x6f\xb7\x83\xab\x53\x3d\xbc\xa7\x56\x20\xac\x5d\xf7\x9d\x5d\x4b\xad\x9c\xca\xd2\xc6\x72\xa8\x4b\xc7\xb4\x47\x0b\x9e\x8d\x1a\x61\x3f\xbf\xbd\x1c\x4b\x8e\x73\xfd\x68\x31\xad\x6b\x49\x33\x08\x6b\x9e\x60\x32\x16\x95\x24\x78\xc0\xe7\x73\xa1\x58\xf7\xaf\xc7\x78\x73\x77\xfe\x0f\x2e\xf9\x4f\x06\xfc\x9e\x91\x44\xe0\x46\x87\x47\xda\x26\x6a\xfe\xc5\xa3\x92\x8a\x7c\x7f\x7b\x3d\x40\x20\xa7\x24\xa1\x00\x0a\x5a\x83\xc0\x89\x05\xed\xbf\xe0\x9f\x4c\x99\x10\xc0\x0d\x39\x6f\x99\x22\x7f\x61\xa9\xcd\xa0\xfd\x8f\x0a\x03\x58\x9c\xd0\x22\x71\x74\x9b\x1b\xd0\xd7\x3c\x5c\x52\xff\x0c\x00\x00\xff\xff\x4b\xd6\xb7\x2f\xf7\x01\x00\x00")

func migration012_appeals_for_allSqlBytes() ([]byte, error) {
	return bindataRead(
		_migration012_appeals_for_allSql,
		"migration/012_appeals_for_all.sql",
	)
}

func migration012_appeals_for_allSql() (*asset, error) {
	bytes, err := migration012_appeals_for_allSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migration/012_appeals_for_all.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb6, 0x3c, 0xc4, 0x73, 0x3, 0xa0, 0x76, 0x95, 0x1, 0xcf, 0x64, 0xa4, 0x7c, 0x65, 0x9b, 0xcf, 0xc0, 0xf, 0x6d, 0x7e, 0x1a, 0xb0, 0xdd, 0xac, 0xb1, 0xc1, 0x54, 0xa2, 0xa8, 0x39, 0x55, 0x16}}
	return a, nil
}

var _migration013_oauthSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd5\x55\xd0\xce\xcd\x4c\x2f\x4a\x2c\x49\x55\x08\x2d\xe0\xe2\x42\xe6\x07\x97\x24\x96\xa4\xe6\xa6\xe6\x95\x38\xa5\xa6\x67\xe6\x71\x39\xfa\x84\xb8\x06\x29\x84\x38\x3a\xf9\xb8\x2a\x24\x67\x24\xe6\xe5\xa5\xe6\x28\x38\xba\xb8\x28\x38\xfb\xfb\x84\xfa\xfa\x29\x14\x97\x26\x29\x84\x39\x06\x39\x7b\x38\x06\x69\x98\x1a\x68\x2a\xb8\xb8\xba\x39\x86\xfa\x84\x28\xf8\x85\xfa\xf8\x58\x63\x37\xd7\x35\x2f\x85\x2c\x1b\x3d\xfd\x5c\x5c\x23\x40\x16\xc6\x67\xa6\x54\x28\x68\x14\x97\x26\xe9\x28\x24\xe7\x24\x66\xe6\xc6\x67\xa6\x68\xe2\xb6\x0b\x10\x00\x00\xff\xff\x89\x44\xc7\x88\xec\x00\x00\x00")

func migration013_oauthSqlBytes() ([]byte, error) {
	return bindataRead(
		_migration013_oauthSql,
		"migration/013_oauth.sql",
	)
}

func migration013_oauthSql() (*asset, error) {
	bytes, err := migration013_oauthSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migration/013_oauth.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xdb, 0xec, 0x2b, 0x60, 0xb2, 0x21, 0x55, 0x20, 0x26, 0xf0, 0x29, 0xc, 0x81, 0xe5, 0x87, 0x1f, 0xb8, 0x8f, 0xdb, 0x1d, 0x1, 0xc1, 0xe9, 0x22, 0x6b, 0x2c, 0x4b, 0xa0, 0xc0, 0x2e, 0x4c, 0x1c}}
	return a, nil
}

var _migration014_overlap_settingsSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\xd5\xbf\x4e\xc3\x30\x10\x06\xf0\xbd\x4f\x71\x5b\x41\xa8\x52\x0b\x23\x53\xd2\x06\xa8\x64\x12\xa9\x24\xac\x96\x71\xaf\xc1\x6a\xe3\xb3\xec\x4b\x50\xdf\x1e\x15\x84\x54\xf5\x1f\x0c\x24\x19\x33\x44\xfe\xe9\xbe\xfb\xec\xd1\x08\x6e\x2a\x53\x7a\xc5\x08\x85\x1b\x0c\xf6\xbf\x5f\x58\x31\x56\x68\x39\xc6\xd2\xd8\x41\x24\xf2\x64\x01\x79\x14\x8b\x04\xb4\x47\xc5\xe4\x65\x40\x66\x63\x4b\x88\x66\x33\x98\x66\xa2\x78\x4e\x41\xbf\x2b\x96\xd4\xa0\xdf\xa8\x2d\xc4\x59\x26\x20\xcd\x72\x48\x0b\x21\x60\x96\x3c\x44\x85\xc8\x81\x7d\x8d\xf7\xa7\x8f\x4a\xec\xf2\xbf\x11\xd2\x51\x30\x6c\xc8\xc2\x6b\xb4\x98\x3e\x45\x8b\xab\xc9\xf8\xfa\x18\x35\x14\xb8\xe2\x61\x07\x2c\x8f\x15\x35\x28\x35\x55\xbb\xff\x21\x9e\x3f\xce\xd3\xfc\xd8\x73\x37\x6e\xd7\x02\x81\x8d\x5e\xa3\xef\x3d\xab\x43\x88\x5c\x23\xba\x33\x9a\x95\xda\x84\x96\x39\x87\x9a\xef\xb8\xce\xc6\x34\x69\x39\xa6\xc6\xe0\x07\x7a\x4d\xb5\xed\xbf\x55\x27\x2c\xc7\xe5\xba\x3d\x59\xae\x9c\x1c\x74\x50\xb0\x7d\xe1\x57\xd9\xde\x88\xfb\x5b\x25\x36\xae\x24\xb5\xe9\x3d\xb7\x1f\x87\xaa\x76\x83\xb9\xb0\xca\xe3\x96\x97\xf9\x60\x20\x7f\xbc\x99\xbb\x1b\x90\xf3\xd8\x18\xaa\x83\x5c\x92\x55\x3b\x58\xe8\x3d\x33\x5d\x7b\x8f\x56\x6f\x7f\x7b\xbc\xe2\xe9\x85\x6a\x7d\x06\x00\x00\xff\xff\x74\x59\x91\x0f\xe6\x07\x00\x00")

func migration014_overlap_settingsSqlBytes() ([]byte, error) {
	return bindataRead(
		_migration014_overlap_settingsSql,
		"migration/014_overlap_settings.sql",
	)
}

func migration014_overlap_settingsSql() (*asset, error) {
	bytes, err := migration014_overlap_settingsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migration/014_overlap_settings.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x97, 0xec, 0x2, 0x8, 0xc5, 0x29, 0xe0, 0x48, 0x4e, 0xa1, 0xf0, 0x6f, 0x1b, 0xde, 0x87, 0x30, 0x33, 0xe7, 0x7e, 0xca, 0xb8, 0xbd, 0xfc, 0x73, 0xac, 0x74, 0x0, 0x22, 0xb9, 0xbb, 0x40, 0xdb}}
	return a, nil
}

var _migration015_creationtimeSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x91\xcf\x6a\xf3\x30\x10\xc4\xef\x7e\x8a\x3d\xe6\xe3\x23\x4f\xd0\x93\x1c\xab\xc5\x20\xcb\xc1\x91\xa0\xb7\x45\x95\x36\x8e\x68\x2c\x07\x6b\x43\x4b\x9e\xbe\xf8\xd2\xf8\xd0\x4b\xff\xf8\x36\xcb\xb2\x3b\x3f\x66\xb6\x5b\xf8\x3f\xc4\x7e\x72\x4c\x60\x2f\x45\xb1\x9c\x0f\xec\x98\x06\x4a\x5c\x52\x1f\x53\x21\x94\x91\x1d\x18\x51\x2a\x09\xfe\xe4\x52\xa2\x33\x88\xaa\x82\x5d\xab\x6c\xa3\xc1\x4f\xe4\x98\x02\x3a\x86\x4a\x18\x69\xea\x46\x82\x6e\x0d\x68\xab\x14\x54\xf2\x51\x58\x65\x60\x67\xbb\x4e\x6a\x83\xf3\xf6\x60\x44\xb3\x7f\xf8\xda\x51\xa6\xf0\x1b\x96\xeb\x25\xfc\x80\x05\x5a\x0d\x76\x3f\x1f\xac\xce\x59\xeb\x4a\x3e\x43\x0c\xef\xb8\x88\x6d\x73\xd7\xff\x56\xf3\x5b\x44\xb3\xb9\xeb\x3f\xf1\x9b\xe9\xc7\x09\x33\x31\xc7\xd4\x2f\xfb\xe0\x38\x10\xe6\x98\x3c\xe1\x31\x4e\x99\xd1\x8f\xc3\xfc\x04\xca\xfa\xa9\xd6\xe6\xb3\x92\xb9\x9f\x75\x49\x5e\xce\xa3\x7f\xa5\x80\x6f\xe3\x14\x32\x1e\xaf\xb7\x5b\x4c\x94\x33\x0e\x8e\xfd\xe9\x7b\x38\x1f\x01\x00\x00\xff\xff\x19\x03\x65\x2d\x3b\x03\x00\x00")

func migration015_creationtimeSqlBytes() ([]byte, error) {
	return bindataRead(
		_migration015_creationtimeSql,
		"migration/015_creationtime.sql",
	)
}

func migration015_creationtimeSql() (*asset, error) {
	bytes, err := migration015_creationtimeSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migration/015_creationtime.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc, 0xa9, 0x46, 0x33, 0x80, 0xc7, 0x87, 0x8a, 0xe, 0xf0, 0xa1, 0xbf, 0x17, 0x87, 0xf8, 0xaa, 0x14, 0xf, 0x1a, 0x25, 0xfa, 0xe5, 0xf, 0x8c, 0x72, 0x8, 0xa1, 0xe9, 0x3d, 0x3, 0x77, 0xf6}}
	return a, nil
}

var _migration016_protected_settingsSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\xce\xb1\x0e\x82\x30\x14\x46\xe1\x9d\xa7\xf8\x77\xc3\x13\x38\x15\x29\xd3\x95\x26\xd2\xce\xa4\xc2\x4d\x6d\x22\x6d\x53\xae\xfa\xfa\xae\x0e\x8e\x8c\x67\x3a\x5f\xdb\xe2\xb4\xc5\x50\xbd\x30\x5c\x69\x9a\xdf\x9e\xc4\x0b\x6f\x9c\xa4\xe3\x10\x53\xa3\xc8\xea\x1b\xac\xea\x48\x63\xa9\xec\x25\xd7\x79\x67\x91\x98\x02\x54\xdf\xe3\x62\xc8\x5d\x47\x94\xd7\xfd\x19\x97\x79\x7f\xe4\xcf\x5c\x6a\x16\x5e\x84\x57\x74\xc6\x10\x46\x63\x31\x3a\x22\xf4\x7a\x50\x8e\x2c\x06\x45\x93\x3e\xff\x9f\xea\xb4\x1e\xc2\xa9\xf1\xed\x85\x8f\xf1\x7c\x03\x00\x00\xff\xff\x48\x9b\x4a\x7f\x2e\x01\x00\x00")

func migration016_protected_settingsSqlBytes() ([]byte, error) {
	return bindataRead(
		_migration016_protected_settingsSql,
		"migration/016_protected_settings.sql",
	)
}

func migration016_protected_settingsSql() (*asset, error) {
	bytes, err := migration016_protected_settingsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migration/016_protected_settings.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x13, 0x97, 0xa1, 0x86, 0x6a, 0x59, 0x5b, 0x65, 0x4a, 0x6c, 0xa8, 0x64, 0x72, 0xe7, 0xec, 0x21, 0xed, 0x6e, 0xa0, 0x88, 0xf9, 0x99, 0x50, 0x6a, 0xa2, 0x43, 0xce, 0x43, 0xd6, 0xf5, 0x6d, 0x7f}}
	return a, nil
}

var _migration017_comments_protected_flagSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xcd\xb1\x0e\xc2\x20\x10\x87\xf1\x9d\xa7\xf8\xef\xa6\x4f\xe0\x04\x82\xd3\x09\x89\x72\xb3\x21\xed\xd9\x90\x08\x6d\xca\xbd\x7f\x8c\x9b\x83\xe3\x97\x6f\xf8\x4d\x13\x4e\xad\xae\x47\x51\x01\xef\xc6\xfc\xf6\x43\x8b\x4a\x93\xae\x4e\xd6\xda\x8d\xa5\x1c\xee\xc8\xd6\x51\xc0\xbc\xb5\xef\x80\xf5\x1e\x97\x44\x7c\x8b\xa8\xe3\xb9\x1f\x9b\xca\xac\xb2\xc0\xa5\x44\x88\x29\x23\x32\x11\x7c\xb8\x5a\xa6\x8c\x57\x79\x0f\x39\xff\x37\x42\x5f\xcc\x27\x00\x00\xff\xff\x6b\xd1\xce\xb3\x8d\x00\x00\x00")

func migration017_comments_protected_flagSqlBytes() ([]byte, error) {
	return bindataRead(
		_migration017_comments_protected_flagSql,
		"migration/017_comments_protected_flag.sql",
	)
}

func migration017_comments_protected_flagSql() (*asset, error) {
	bytes, err := migration017_comments_protected_flagSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migration/017_comments_protected_flag.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x67, 0xab, 0x90, 0x10, 0x31, 0x21, 0x20, 0x13, 0xef, 0xd7, 0x18, 0x88, 0x69, 0x5, 0x18, 0x34, 0xd2, 0xd6, 0x77, 0x5e, 0xba, 0xf, 0x41, 0x41, 0x28, 0x9b, 0x2f, 0x12, 0x7b, 0x91, 0x57, 0x18}}
	return a, nil
}

var _migration018_comments_timestamp_idxSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd5\x55\xd0\xce\xcd\x4c\x2f\x4a\x2c\x49\x55\x08\x2d\xe0\xe2\x42\xe6\x07\x97\x24\x96\xa4\xe6\xa6\xe6\x95\x38\xa5\xa6\x67\xe6\x71\x39\x07\xb9\x3a\x86\xb8\x2a\x78\xfa\xb9\xb8\x46\x28\x64\xa6\x54\xc4\x27\xe7\xe7\x82\x64\xe3\x4b\x32\x73\x53\x8b\x4b\x12\x73\x0b\xe2\x13\x73\xf2\xf3\x52\x15\xf2\xf3\x14\xa0\x52\x0a\x1a\x70\x39\x4d\x6b\xec\x66\xbb\xe6\xa5\x70\x01\x02\x00\x00\xff\xff\x21\x43\x19\xd2\x85\x00\x00\x00")

func migration018_comments_timestamp_idxSqlBytes() ([]byte, error) {
	return bindataRead(
		_migration018_comments_timestamp_idxSql,
		"migration/018_comments_timestamp_idx.sql",
	)
}

func migration018_comments_timestamp_idxSql() (*asset, error) {
	bytes, err := migration018_comments_timestamp_idxSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migration/018_comments_timestamp_idx.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xcc, 0x16, 0xb6, 0xd7, 0x93, 0xda, 0xaf, 0x41, 0x93, 0x2e, 0xcf, 0x84, 0xbf, 0xbf, 0x11, 0xb9, 0x91, 0x9b, 0xb0, 0x5c, 0xd3, 0xd2, 0xc5, 0x6d, 0xc3, 0xe7, 0x8d, 0x78, 0xed, 0xda, 0x7, 0x13}}
	return a, nil
}

var _migration019_comments_protected_idxSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd5\x55\xd0\xce\xcd\x4c\x2f\x4a\x2c\x49\x55\x08\x2d\xe0\xe2\x42\xe6\x07\x97\x24\x96\xa4\xe6\xa6\xe6\x95\x38\xa5\xa6\x67\xe6\x71\x39\xfa\x84\xb8\x06\x29\x84\x38\x3a\xf9\xb8\x2a\x24\xe7\xe7\x82\x24\x14\x1c\x5d\x5c\x14\x3c\xfd\x5c\x5c\x23\x14\x32\x53\x2a\xe2\x33\x8b\xe3\x0b\x8a\xf2\x4b\x52\x93\x4b\x52\x53\x14\x34\x90\x79\x9a\x3a\x0a\x8e\x3e\xee\xfe\x41\x9e\x21\x1e\xbe\xb6\x9e\x7e\x01\x3e\x8e\xce\xae\x3a\x0a\x3e\xfe\xce\xde\xb6\x7e\xfe\x7e\xae\xd6\xd8\xed\x75\xcd\x4b\xe1\x02\x04\x00\x00\xff\xff\xf1\x86\x94\x0d\xa1\x00\x00\x00")

func migration019_comments_protected_idxSqlBytes() ([]byte, error) {
	return bindataRead(
		_migration019_comments_protected_idxSql,
		"migration/019_comments_protected_idx.sql",
	)
}

func migration019_comments_protected_idxSql() (*asset, error) {
	bytes, err := migration019_comments_protected_idxSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migration/019_comments_protected_idx.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe7, 0xc8, 0x4f, 0x34, 0x4a, 0x43, 0xbd, 0x66, 0x18, 0x83, 0x7c, 0xe6, 0xef, 0x37, 0x4d, 0x3f, 0x5, 0x90, 0xa2, 0x12, 0x96, 0xac, 0x91, 0x2c, 0x4b, 0x3a, 0xcd, 0x44, 0xff, 0xe0, 0x34, 0x4d}}
	return a, nil
}

var _migration020_members_only_settingsSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\xce\xb1\xce\xc2\x20\x14\xc5\xf1\xbd\x4f\x71\xf6\x2f\x7d\x82\x6f\xa2\x96\x4e\xd7\x92\x58\x98\x09\xd6\x9b\x4a\x52\xc0\xc0\x8d\x89\x6f\x6f\xdc\x1c\x1c\x3b\x9e\xe1\xe4\xff\xeb\x7b\xfc\xa5\xb8\xd5\x20\x0c\xf7\xe8\xba\xef\xbd\x48\x10\x4e\x9c\x65\xe0\x2d\xe6\x4e\x91\xd5\x17\x58\x35\x90\xc6\x5a\x39\x48\xa9\xbe\xb1\x48\xcc\x1b\xd4\x38\xe2\x64\xc8\x9d\x67\xec\xf1\xc9\x4d\x2a\x87\xe4\xd7\x7b\x10\x9f\x38\x5d\xb9\x36\x5f\xf2\xfe\xc2\x60\x0c\x61\x36\x16\xb3\x23\xc2\xa8\x27\xe5\xc8\x62\x52\xb4\xe8\xff\xdf\x6d\x9d\x6f\x47\xa8\xd6\x92\x3e\x9f\x76\x04\xe7\x1d\x00\x00\xff\xff\xcc\x22\x21\xf9\x34\x01\x00\x00")

func migration020_members_only_settingsSqlBytes() ([]byte, error) {
	return bindataRead(
		_migration020_members_only_settingsSql,
		"migration/020_members_only_settings.sql",
	)
}

func migration020_members_only_settingsSql() (*asset, error) {
	bytes, err := migration020_members_only_settingsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migration/020_members_only_settings.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x61, 0xba, 0xe4, 0xa2, 0xbb, 0x78, 0x44, 0x90, 0xd0, 0xf2, 0x81, 0x24, 0x1c, 0xfa, 0x52, 0xd1, 0xc3, 0xc2, 0x79, 0xaf, 0xd1, 0xdd, 0xf1, 0xa3, 0xde, 0xf4, 0xe5, 0x22, 0xe6, 0x7, 0xbc, 0x9b}}
	return a, nil
}

var _migration021_comment_classificationSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\x4f\x8f\xda\xc8\x13\x3d\xe3\x4f\xf1\x6e\x19\xf4\x63\xd0\x4f\xab\x68\xb5\xda\x68\x0f\x1e\xe8\x49\xd0\x32\xf6\xc8\x78\x36\x9b\x93\xd3\xb8\xcb\xb8\x15\xbb\x1b\x75\x97\x07\xc8\xa7\x5f\xb5\x31\x90\x68\x40\xca\xcd\xae\xae\xbf\xaf\x5e\xbd\xfb\x7b\xfc\xaf\xd5\x1b\x27\x99\xf0\xb2\x8d\xa2\x1f\xff\x57\x2c\x99\x5a\x32\xfc\x40\x1b\x6d\xa2\x59\x26\xe2\x5c\x20\x8f\x1f\x96\x02\xa5\x6d\xc3\x4b\x51\x36\xd2\x7b\x5d\xe9\x52\xb2\xb6\x06\x77\x51\x04\x00\xf7\xf7\xc8\x6b\xc2\xd7\xc1\x6b\x7a\xf2\xd6\xea\x6b\xff\x7e\xf9\xc7\xec\x53\x9c\xdd\xfd\xfe\x7e\x8c\x24\xcd\x91\xbc\x2c\x97\x78\xce\x16\x4f\x71\xf6\x05\x7f\x8b\x2f\x93\x28\x1a\xf5\xb9\xb4\x87\xf6\xe0\x9a\xb0\x75\xba\x95\xee\x80\x8a\x24\x77\x8e\xa6\xf8\x4c\xd8\x49\xc3\x60\x0b\xee\x0c\x81\x6b\xed\xa7\xd1\x88\xed\x5e\x97\x9a\x0f\x78\x5c\xa6\x71\x7e\xce\x3e\x64\x5c\x6d\xa9\x0c\x5d\xa3\xb2\xae\xf5\xb0\x15\xe4\xba\xf3\x84\x86\x18\x9d\x87\x54\x72\xdb\x67\xb4\x5c\x93\x43\x6b\x15\x35\x1e\xda\x84\x0e\xfa\xf8\xaa\x0b\xc5\xb1\xd3\x5c\xdb\x8e\x51\xcb\x57\x6d\x36\x21\xc0\xd1\xba\xd3\x8d\xea\xbb\x00\xcb\x75\x43\x60\x6b\x61\x2b\x26\x33\x8d\x46\x9e\x5e\xc9\x51\x71\xb3\xb9\x91\x5d\xfb\x92\x0c\xbd\x7d\xd0\x8a\x0c\x6b\x3e\x14\x92\x59\x96\xdf\xae\x38\x18\xdf\x35\xfc\xd6\xce\xb5\x23\x79\xc5\xee\x69\xdf\xc9\xa6\xa0\xfd\xb6\x09\xbd\x5c\xc7\x69\x01\x65\xcd\xbb\x7e\xc0\x80\x2c\x79\xc2\x81\x18\xeb\x8e\x51\x4a\x03\xa9\xc2\xa4\xd4\x0e\xd0\x0c\xb0\x4c\xa3\x91\x91\xdf\xf5\xdb\x92\xca\xee\xf7\xd7\xeb\x7c\x92\x1e\x12\xa9\x3a\x78\xa2\x1e\x6e\x27\xd9\x3a\x38\x7a\xd5\xb4\xa3\x01\xce\x9f\xb9\x36\x8d\x46\xda\x17\x67\x8f\x87\x34\x5d\x8a\x38\xc1\x5c\x3c\xc6\x2f\xcb\x1c\x95\x6c\x3c\x9d\xa6\xa8\x42\x77\x87\xe3\x14\xe7\x08\xcd\xb8\x33\x96\x61\xba\xa6\x19\x43\x69\x75\x74\x92\x1b\x47\x04\xeb\xa0\xb4\xef\xbf\xa7\xd1\x68\x88\x71\x85\xdc\x6e\x9d\x7d\xbd\x94\x9b\x9c\xf9\x9e\x58\xa6\x3f\x7b\xd6\x4b\x46\x69\x9b\xae\x35\xf0\xb5\xed\x1a\x05\x47\x01\xe2\x70\x51\x01\xa3\x81\xfb\xef\x3c\x58\xb7\xe4\x59\xb6\xdb\xe9\x29\xc9\x22\x98\x77\xd6\x71\x0d\x45\xc6\xba\x56\x36\xfa\x7b\x60\x96\xc4\x5a\xf7\x84\xdc\x10\x43\x1a\x68\xa3\x68\x0f\x6b\x40\x7b\x59\x72\x73\xc0\xae\x96\x8c\xdd\xf1\x14\x4e\xd9\x86\xa5\x5c\xe0\xd4\x86\xc9\x55\xb2\xa4\x63\xc1\x73\x7d\x2c\x92\x37\x1b\x79\xf1\x54\x75\x4d\xb8\x0f\xc8\x4e\x69\xd6\x66\x33\x19\x5a\x0b\x49\xd7\x07\x0e\xa3\x78\xee\x3d\xbc\x6e\x8f\x2c\x3a\x1c\xcf\x3b\x30\x8e\x54\x21\x19\xf9\xe2\x49\xac\xf2\xf8\xe9\xf9\x72\xdf\xa7\x0d\x25\xe9\xe7\xbb\xf1\xa4\x0f\xe8\xb6\xea\xd7\x03\x46\xfd\x39\x16\xfd\x41\xe0\x9f\x38\xeb\x15\xe4\xb7\xff\x8f\x87\x5d\xcc\xd2\x64\x95\x67\x71\x18\xe9\xba\x48\x15\x27\x73\xf5\xad\x0f\x00\xf0\x98\x66\x62\xf1\x31\x09\x92\x83\xbb\x8b\x38\x8d\x91\x89\x47\x91\x89\x64\x26\x56\xa7\x64\x3f\xbd\x9f\xe2\x01\xa4\x81\x7a\x4b\x91\x0b\xcc\xe2\xd5\x2c\x9e\x8b\x60\x79\x79\x9e\xc7\x17\x4b\x34\x86\x48\x3e\x2e\x12\xf1\xd7\xc2\x18\x3b\x7f\xe8\xb5\x2f\x9e\xe5\x22\xc3\x4a\xe4\xe8\xb8\xfa\xa3\x5d\xbf\xc7\x2c\x5d\x2e\x43\xd4\xf0\x5f\x74\x46\x97\x56\x51\x51\xea\x0f\xd1\x0d\x81\x16\x46\xfd\x8a\x74\x2f\x92\xb9\xf8\x17\x5a\xed\x8b\x1b\xc8\x54\xd6\x15\xad\x55\x3e\x30\xeb\xa6\xc2\x87\x69\x7f\xb8\xbc\xc9\x85\x47\x13\x9c\x85\x6d\x2e\x56\xb3\x68\xfc\xe1\x76\xbb\xff\x05\x00\x00\xff\xff\xa9\x1c\xe6\x6d\x79\x06\x00\x00")

func migration021_comment_classificationSqlBytes() ([]byte, error) {
	return bindataRead(
		_migration021_comment_classificationSql,
		"migration/021_comment_classification.sql",
	)
}

func migration021_comment_classificationSql() (*asset, error) {
	bytes, err := migration021_comment_classificationSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migration/021_comment_classification.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe2, 0xbf, 0x82, 0x48, 0x67, 0x65, 0x1, 0x8b, 0x82, 0xd, 0x41, 0x10, 0xa4, 0xf3, 0x9a, 0x14, 0xed, 0x4e, 0x8a, 0x7f, 0xbd, 0x5c, 0x7f, 0x71, 0x3c, 0x9d, 0x75, 0x1b, 0x23, 0x96, 0xbb, 0xd5}}
	return a, nil
}

var _migration022_comments_soft_deleteSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd5\x55\xd0\xce\xcd\x4c\x2f\x4a\x2c\x49\x55\x08\x2d\xe0\xe2\x42\xe6\x07\x97\x24\x96\xa4\xe6\xa6\xe6\x95\x38\xa5\xa6\x67\xe6\x71\x39\xfa\x84\xb8\x06\x29\x84\x38\x3a\xf9\xb8\x2a\x24\xe7\xe7\x82\x24\x14\x1c\x5d\x5c\x14\x9c\xfd\x7d\x42\x7d\xfd\x14\x52\x52\x73\x52\x4b\x52\x53\xe2\x13\x4b\x14\x42\x3c\x7d\x5d\x83\x43\x1c\x7d\x03\x14\xfc\x42\x7d\x7c\xac\xb1\x1b\xea\x9a\x97\xc2\x05\x08\x00\x00\xff\xff\x5a\x01\xfa\xdf\x7e\x00\x00\x00")

func migration022_comments_soft_deleteSqlBytes() ([]byte, error) {
	return bindataRead(
		_migration022_comments_soft_deleteSql,
		"migration/022_comments_soft_delete.sql",
	)
}

func migration022_comments_soft_deleteSql() (*asset, error) {
	bytes, err := migration022_comments_soft_deleteSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migration/022_comments_soft_delete.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x34, 0x8b, 0x1d, 0x6b, 0x2b, 0xb5, 0x14, 0x88, 0x23, 0x41, 0x61, 0xa6, 0x66, 0x94, 0xb6, 0x8e, 0xac, 0x21, 0x2e, 0xbc, 0x0, 0x7f, 0x1a, 0x22, 0x65, 0x25, 0xf8, 0x99, 0x3d, 0x8a, 0xb7, 0x15}}
	return a, nil
}

var _migration023_claim_to_channelSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\x41\x6b\xc2\x30\x14\xc7\xef\xf9\x14\xef\x68\x99\xc2\x0e\x1e\x06\x63\x87\x58\x1f\x2e\xac\x46\x49\xe3\x98\xa7\x10\x93\x4c\xc3\xda\x54\x5c\x64\xfb\xf8\xa3\xb4\xc3\x4e\x56\xf1\xe0\xf1\xf5\xfd\x4a\xde\xfb\xbd\xff\x68\x04\x77\xa5\xdf\x1e\x74\x74\xb0\xda\x13\xd2\xad\xf3\xa8\xa3\x2b\x5d\x88\x13\xb7\xf5\x81\x90\x54\x20\x95\x08\x92\x4e\x32\x04\x53\x68\x5f\xaa\x58\x29\xb3\xd3\x21\xb8\x02\x06\x04\x00\xda\xcf\xde\x02\xc0\x2b\x15\xe9\x33\x15\x83\xf1\x7d\x02\x4b\xc1\xe6\x54\xac\xe1\x05\xd7\xc3\x86\x6b\xfe\xaa\xc9\x2e\xc7\x17\x12\xf8\x2a\xcb\x5a\xe8\xe0\x74\x74\x56\xe9\x08\x92\xcd\x31\x97\x74\xbe\x3c\x43\x8e\x7b\xdb\x8f\x90\x04\x90\xcf\x18\xc7\x27\x16\x42\x35\x9d\x40\xfd\x0e\x4d\x25\x0a\xc8\x51\xc2\x31\xbe\x3f\x94\x9b\x31\xa4\x8b\x2c\xab\x17\x6b\x6b\x75\x0c\xde\x54\xd6\x29\xe3\x1f\x49\x8f\x11\x0c\xf6\x52\xe7\xaf\xa9\x76\x55\x5d\x6c\x2b\x65\x74\x51\x6c\xb4\xf9\xf8\xfc\xf5\x75\x8d\x87\x2f\x1d\xcd\xce\x1d\x6a\x88\x71\x09\x2b\x9e\xb3\x19\xc7\xe9\x8d\x6d\x35\x48\xe7\x52\x30\x38\x4d\x37\xec\x0c\x91\xdc\xc2\xeb\xa5\xa0\x5d\x11\x42\xc6\xa7\xf8\x06\xde\x7e\xab\xf3\x20\xaa\x8e\xd2\x05\xff\x27\xa7\xa7\x7e\xd2\x37\x47\x7d\xc4\x9f\x00\x00\x00\xff\xff\x4e\xc2\x4d\x5b\x1a\x03\x00\x00")

func migration023_claim_to_channelSqlBytes() ([]byte, error) {
	return bindataRead(
		_migration023_claim_to_channelSql,
		"migration/023_claim_to_channel.sql",
	)
}

func migration023_claim_to_channelSql() (*asset, error) {
	bytes, err := migration023_claim_to_channelSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migration/023_claim_to_channel.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc4, 0x16, 0xfe, 0xb4, 0x24, 0xb2, 0xfe, 0x7f, 0x76, 0xdf, 0xc2, 0xc, 0x1c, 0xc3, 0x4f, 0x5b, 0x9, 0xdb, 0x3d, 0x96, 0xea, 0xd3, 0xa1, 0x0, 0x1d, 0x1a, 0xa0, 0x17, 0x7e, 0x13, 0x73, 0xe1}}
	return a, nil
}

var _migration024_more_creator_settingsSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\xcf\xb1\x4e\x87\x30\x10\xc7\xf1\xbd\x4f\xf1\xdb\x18\x94\x27\x70\x2a\x50\x07\x53\x4a\x22\xed\x4c\x2e\x70\x14\x12\x29\xa4\x9c\x83\x6f\xef\x54\x63\x8c\xcb\x7f\xbc\xe1\xf3\xbd\xfc\xea\x1a\x4f\xc7\x1e\x33\x09\x23\x5c\xea\xf7\x39\x0a\x09\x1f\x9c\xa4\xe1\xb8\x27\xa5\xad\x37\xef\xf0\xba\xb1\x06\x73\x66\x92\x33\x4f\x37\x8b\xec\x29\x2a\x00\xd0\x5d\x87\x76\xb0\xa1\x77\x58\x99\xe4\x33\xf3\x32\xcd\x1b\xa5\xc4\x1f\x37\xde\xc6\xc1\xa1\x33\xaf\x3a\x58\x0f\x17\xac\x45\x3b\xf4\xbd\x71\x1e\x15\xe5\x4c\x5f\x58\x48\x08\xeb\x99\x7f\x2c\x8a\xad\x9e\xff\xe6\xb7\xf3\xe0\x8b\x22\x97\xf7\x8f\xe4\x8b\x45\xb1\xd5\xcb\xff\xa3\x4d\x5a\xd4\x77\x00\x00\x00\xff\xff\xc9\x11\x24\x64\x1d\x01\x00\x00")

func migration024_more_creator_settingsSqlBytes() ([]byte, error) {
	return bindataRead(
		_migration024_more_creator_settingsSql,
		"migration/024_more_creator_settings.sql",
	)
}

func migration024_more_creator_settingsSql() (*asset, error) {
	bytes, err := migration024_more_creator_settingsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migration/024_more_creator_settings.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x31, 0x65, 0x5a, 0xc, 0x4d, 0x6b, 0xd3, 0xcb, 0xe6, 0xa7, 0xfa, 0x7c, 0x66, 0x7e, 0xee, 0xc5, 0x60, 0x98, 0x4f, 0xd6, 0x48, 0x72, 0x58, 0xba, 0xea, 0xb9, 0xe4, 0xcd, 0x4a, 0x87, 0x90, 0x4b}}
	return a, nil
}

var _migration025_more_creator_settings_renameSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8e\x31\x4e\xc4\x30\x10\x45\x7b\x9f\xe2\x77\x5b\xc0\x9e\x80\xca\x1b\x9b\x02\x39\x36\x4a\xec\x3a\x1a\x25\x93\x60\x89\x38\xc8\x1e\x0a\x6e\x8f\x84\x08\xa2\xd8\xf2\xeb\x3f\x3d\xbd\xeb\x15\x0f\x7b\xde\x2a\x09\x23\x7d\xa8\xff\x73\x14\x12\xde\xb9\xc8\x8d\xb7\x5c\x94\x76\xd1\x0e\x88\xfa\xe6\x2c\xe6\xca\x24\x47\x9d\x1a\x8b\xe4\xb2\x29\x00\x30\x43\x78\x45\x17\x5c\xea\x3d\x56\x26\xf9\xac\xbc\x4c\xf3\x1b\x95\xc2\xef\xed\xf1\x07\xd1\xc6\x9c\xc4\xef\x31\x35\x9e\x25\x1f\xa5\xe1\x65\x0c\x1e\xc6\x3e\xeb\xe4\x22\x7c\x72\x0e\x5d\xe8\x7b\xeb\x23\x2e\x54\x2b\x7d\x61\x21\x21\xac\x47\xfd\x93\x9f\x8e\x76\x79\xba\xdf\x6d\xcb\xa2\xbe\x03\x00\x00\xff\xff\xee\x70\xc1\xd3\xe0\x00\x00\x00")

func migration025_more_creator_settings_renameSqlBytes() ([]byte, error) {
	return bindataRead(
		_migration025_more_creator_settings_renameSql,
		"migration/025_more_creator_settings_rename.sql",
	)
}

func migration025_more_creator_settings_renameSql() (*asset, error) {
	bytes, err := migration025_more_creator_settings_renameSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migration/025_more_creator_settings_rename.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x90, 0xc3, 0xd3, 0x55, 0x59, 0x59, 0x17, 0x9a, 0x4e, 0x87, 0x23, 0x13, 0x45, 0x56, 0xfb, 0x9d, 0xae, 0x15, 0xf0, 0x6b, 0x79, 0xf6, 0x88, 0xda, 0x3f, 0xa8, 0x86, 0xeb, 0x11, 0xfa, 0x2c, 0xbb}}
	return a, nil
}

var _migrationMigrationGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\xc8\xcd\x4c\x2f\x4a\x2c\xc9\xcc\xcf\xe3\xe2\xd2\xd7\x0f\xc9\xc8\x2c\x56\xc8\x2c\x56\x48\xcc\x53\x48\xcd\x2d\x28\xa9\x54\x48\xcf\x57\x48\xcb\xcc\x49\xd5\x51\x48\xcb\x2f\x52\x80\x69\xc9\xcc\x2d\xc8\x2f\x2a\xe1\x02\x04\x00\x00\xff\xff\x4d\x61\xca\x8f\x42\x00\x00\x00")

func migrationMigrationGoBytes() ([]byte, error) {
	return bindataRead(
		_migrationMigrationGo,
		"migration/migration.go",
	)
}

func migrationMigrationGo() (*asset, error) {
	bytes, err := migrationMigrationGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migration/migration.go", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x5e, 0x3c, 0x32, 0xa2, 0xdd, 0x46, 0x12, 0x3d, 0x4a, 0xa, 0x5c, 0x40, 0x7a, 0x2a, 0x79, 0xc7, 0x36, 0x1c, 0xcc, 0xaa, 0x90, 0x28, 0xe2, 0xcc, 0x54, 0x6b, 0x0, 0x2a, 0xe5, 0x9d, 0x49, 0x81}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"migration/000_init.sql":                         migration000_initSql,
	"migration/001_cascade_reaction_delete.sql":      migration001_cascade_reaction_deleteSql,
	"migration/002_pinned_comments.sql":              migration002_pinned_commentsSql,
	"migration/003_blocked.sql":                      migration003_blockedSql,
	"migration/004_flagged.sql":                      migration004_flaggedSql,
	"migration/005_creator_settings.sql":             migration005_creator_settingsSql,
	"migration/006_new_settings.sql":                 migration006_new_settingsSql,
	"migration/007_indices.sql":                      migration007_indicesSql,
	"migration/008_comment_ranking.sql":              migration008_comment_rankingSql,
	"migration/009_comment_fiat.sql":                 migration009_comment_fiatSql,
	"migration/010_shared_blocked_list.sql":          migration010_shared_blocked_listSql,
	"migration/011_accepted_default.sql":             migration011_accepted_defaultSql,
	"migration/012_appeals_for_all.sql":              migration012_appeals_for_allSql,
	"migration/013_oauth.sql":                        migration013_oauthSql,
	"migration/014_overlap_settings.sql":             migration014_overlap_settingsSql,
	"migration/015_creationtime.sql":                 migration015_creationtimeSql,
	"migration/016_protected_settings.sql":           migration016_protected_settingsSql,
	"migration/017_comments_protected_flag.sql":      migration017_comments_protected_flagSql,
	"migration/018_comments_timestamp_idx.sql":       migration018_comments_timestamp_idxSql,
	"migration/019_comments_protected_idx.sql":       migration019_comments_protected_idxSql,
	"migration/020_members_only_settings.sql":        migration020_members_only_settingsSql,
	"migration/021_comment_classification.sql":       migration021_comment_classificationSql,
	"migration/022_comments_soft_delete.sql":         migration022_comments_soft_deleteSql,
	"migration/023_claim_to_channel.sql":             migration023_claim_to_channelSql,
	"migration/024_more_creator_settings.sql":        migration024_more_creator_settingsSql,
	"migration/025_more_creator_settings_rename.sql": migration025_more_creator_settings_renameSql,
	"migration/migration.go":                         migrationMigrationGo,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"migration": {nil, map[string]*bintree{
		"000_init.sql":                         {migration000_initSql, map[string]*bintree{}},
		"001_cascade_reaction_delete.sql":      {migration001_cascade_reaction_deleteSql, map[string]*bintree{}},
		"002_pinned_comments.sql":              {migration002_pinned_commentsSql, map[string]*bintree{}},
		"003_blocked.sql":                      {migration003_blockedSql, map[string]*bintree{}},
		"004_flagged.sql":                      {migration004_flaggedSql, map[string]*bintree{}},
		"005_creator_settings.sql":             {migration005_creator_settingsSql, map[string]*bintree{}},
		"006_new_settings.sql":                 {migration006_new_settingsSql, map[string]*bintree{}},
		"007_indices.sql":                      {migration007_indicesSql, map[string]*bintree{}},
		"008_comment_ranking.sql":              {migration008_comment_rankingSql, map[string]*bintree{}},
		"009_comment_fiat.sql":                 {migration009_comment_fiatSql, map[string]*bintree{}},
		"010_shared_blocked_list.sql":          {migration010_shared_blocked_listSql, map[string]*bintree{}},
		"011_accepted_default.sql":             {migration011_accepted_defaultSql, map[string]*bintree{}},
		"012_appeals_for_all.sql":              {migration012_appeals_for_allSql, map[string]*bintree{}},
		"013_oauth.sql":                        {migration013_oauthSql, map[string]*bintree{}},
		"014_overlap_settings.sql":             {migration014_overlap_settingsSql, map[string]*bintree{}},
		"015_creationtime.sql":                 {migration015_creationtimeSql, map[string]*bintree{}},
		"016_protected_settings.sql":           {migration016_protected_settingsSql, map[string]*bintree{}},
		"017_comments_protected_flag.sql":      {migration017_comments_protected_flagSql, map[string]*bintree{}},
		"018_comments_timestamp_idx.sql":       {migration018_comments_timestamp_idxSql, map[string]*bintree{}},
		"019_comments_protected_idx.sql":       {migration019_comments_protected_idxSql, map[string]*bintree{}},
		"020_members_only_settings.sql":        {migration020_members_only_settingsSql, map[string]*bintree{}},
		"021_comment_classification.sql":       {migration021_comment_classificationSql, map[string]*bintree{}},
		"022_comments_soft_delete.sql":         {migration022_comments_soft_deleteSql, map[string]*bintree{}},
		"023_claim_to_channel.sql":             {migration023_claim_to_channelSql, map[string]*bintree{}},
		"024_more_creator_settings.sql":        {migration024_more_creator_settingsSql, map[string]*bintree{}},
		"025_more_creator_settings_rename.sql": {migration025_more_creator_settings_renameSql, map[string]*bintree{}},
		"migration.go":                         {migrationMigrationGo, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = os.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
