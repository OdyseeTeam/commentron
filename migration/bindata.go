// Code generated by go-bindata.
// sources:
// migration/000_init.sql
// DO NOT EDIT!

package migration

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _migration000_initSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x56\x51\x6f\xa3\x38\x10\x7e\xcf\xaf\x98\xb7\x06\x5d\x22\xb5\x51\x7a\xaa\x74\xea\x83\x03\x4e\x0f\x1d\x85\x0a\xc8\xa9\x7d\x42\x0e\xb8\x60\x15\x6c\x04\x4e\x7b\xf9\xf7\x27\x13\x70\x42\x93\x66\xd3\xdd\x74\xa5\x95\x36\x6f\xc1\x33\xdf\x7c\x9e\xf9\xe6\x93\xc7\x63\xf8\xa3\x60\x69\x45\x24\x85\x45\x39\x18\xec\xfe\x0f\x24\x91\xb4\xa0\x5c\xce\x68\xca\xf8\x00\x39\x21\xf6\xc1\x42\x21\x9a\xa1\x00\x43\x2d\x62\x46\xf2\x01\x00\x80\x85\xe7\x68\xe1\x84\x60\xfe\x8d\x7c\x64\xaa\xa8\x00\x87\xb0\x92\xcf\x37\xc5\x72\xda\x8f\xf0\x1c\x07\x85\xb8\x3b\x8b\x56\x9c\xc5\x22\xa1\x51\xcc\xfe\x3a\x5c\x1a\xf3\xe4\x28\x29\xd3\xc7\x0a\x2f\x44\x33\x07\x43\x9c\x11\xce\x69\x0e\x43\x55\x33\xce\x09\x2b\x22\x96\xc0\xbf\xc8\x57\xc4\x86\xd3\x4b\x03\xc0\xf5\x42\x70\x17\x8e\x33\x52\x21\x9c\x14\x14\x1a\xd6\xc3\xc9\xf5\xb5\x71\x98\xff\x11\xce\x7d\x34\xd3\x73\x83\xd0\x47\xb6\x1b\x76\x44\xa2\xf2\x05\x1e\x7c\xfb\x1e\xf9\x4f\xf0\x0f\x7e\x82\x61\xc7\xc9\x18\x7c\xbe\xd8\x59\x1a\x24\x0a\x75\xb2\x69\x10\x8c\xc7\x50\x67\x62\x95\x27\xb0\xa4\x0d\xe5\x94\x26\x20\xc5\xa6\x21\x7f\x4e\x8d\x26\xa8\x4d\x51\x8d\x04\x7d\xd2\xbf\xf8\x71\xa0\xe9\xe5\x06\x28\x5f\x56\xeb\x48\x0f\x45\x4f\x64\x0f\x29\x26\x5c\xc1\xf0\x55\x9e\x8f\xa0\x16\xc0\x92\x17\x60\xcf\x20\x33\x56\xf7\xab\x54\x1a\xba\x6b\xf7\x96\xa3\x42\xee\x34\xb7\x45\x5f\x8a\x64\x0d\xed\x2f\xc4\x8f\x1f\x08\xf6\xe4\x81\x43\x49\x2a\xdd\x9a\x6d\x6f\xf6\xeb\xd6\x2c\xe5\x44\xae\x2a\xda\x85\x5d\x4d\x6e\x0e\xc5\x8d\xc7\x30\x99\x34\x57\xab\x21\x17\x3c\x05\x56\x43\x59\x89\x3c\x5f\x03\xe5\x62\x95\x66\x1a\x8d\xf1\x54\xd6\x00\x5a\xdb\x93\xc9\x7b\xbc\x26\x54\xb2\x82\xd6\x92\x14\x25\x00\xd8\x6e\x88\xef\xb0\xbf\xdf\x70\x99\xd1\x8a\x5e\xd4\xc0\x05\xbc\x91\x35\xc8\x8c\x48\xf5\x6d\x27\xf9\x8d\xe5\x39\xd0\x57\x5a\x41\x45\x49\x9c\x75\x24\x49\x2c\x69\x55\x37\x30\xac\x8e\x32\x96\x24\x94\xab\x3f\x33\xcf\x73\x30\x72\x35\xa1\x39\x72\x02\xbc\x29\xb7\xb3\x23\xa6\x77\x7f\x8f\xdd\x30\x6a\x17\x24\x52\x0b\xd2\x5f\x16\xad\x3c\x43\xab\x8c\x4a\xc9\x78\xda\x88\x03\x58\x51\xe6\x8c\xd6\x5a\xd4\xac\x06\x29\x4a\xc8\xe9\x2b\xcd\x7f\xde\x7e\x6d\x5c\xb1\xb7\x5e\x0d\x5b\x64\x59\x30\xf7\x7c\x6c\xdf\xb9\xed\x75\xb4\x48\x0d\xf0\xf1\x1c\xfb\xd8\x35\x71\xb0\xf5\x2c\xed\x0d\xe0\xa9\xd6\x39\x38\xc4\x60\xa2\xc0\x44\x16\x56\x5f\x16\x0f\x16\xda\x7e\xf9\x6a\xb2\x5a\xd9\x7d\xae\x9d\x7d\xec\x8c\x66\x9f\xdb\x3e\xff\x1f\xb3\x2e\xdb\xb5\xf0\x63\x6b\xe7\xba\x30\x4f\xe8\x7f\xaa\x90\xa6\xd4\xb3\x97\xd1\x8e\x6d\x19\x67\xa9\xde\x0e\xef\xe3\xfa\xdb\xf1\x9e\xb1\x78\x6f\x52\x91\x28\x19\x67\x82\xb7\xee\xcd\x12\x58\xb2\x94\x71\x09\x2b\xae\x2c\x81\x26\x7a\xb5\x01\x2d\x42\x2f\xb2\x5d\xd3\xc7\x6a\xc5\x46\xef\x8d\xbc\x31\x4f\x65\x55\x27\x3b\xdd\x8e\xc3\x76\xce\x7b\x2c\xf9\x98\x05\x36\xf9\x8d\x01\x7e\x1a\x60\xe3\x7a\xaf\xa4\x6a\x30\x94\xe7\x7d\x0a\x62\x6b\x68\xaa\x6b\xfd\x0b\x56\xa4\x31\x16\xc9\xf8\x5a\x1d\x76\xc9\x17\x57\x17\xad\x95\xf6\xac\x89\x25\xc6\x26\xad\xbf\xe1\x3b\x5b\x71\xc2\xd6\x7c\x6b\xc7\x0f\x55\x38\xa7\x87\x0c\x0c\xc0\xee\x9d\xed\xe2\x5b\x9b\x73\x61\xcd\x7a\xcf\xb8\x00\x87\xb7\xef\x3c\xf3\xf6\xab\xde\x24\x5c\x9e\x41\xdd\xdd\xc3\xe2\xfb\xe4\xf9\x5b\xdf\xa7\xe8\xfb\x97\x51\xdf\xff\x01\x00\x00\xff\xff\xd7\x41\x8a\xbf\xd6\x0c\x00\x00")

func migration000_initSqlBytes() ([]byte, error) {
	return bindataRead(
		_migration000_initSql,
		"migration/000_init.sql",
	)
}

func migration000_initSql() (*asset, error) {
	bytes, err := migration000_initSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migration/000_init.sql", size: 3286, mode: os.FileMode(420), modTime: time.Unix(1595957560, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"migration/000_init.sql": migration000_initSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"migration": &bintree{nil, map[string]*bintree{
		"000_init.sql": &bintree{migration000_initSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
